<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void startMessage()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList pull(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void pull(com.matburt.mobileorg.OrgData.OrgFileParser,java.util.ArrayList,java.util.HashMap,java.util.HashMap)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getLocationEntry(com.matburt.mobileorg.OrgData.OrgNode,java.util.ArrayList,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: com.matburt.mobileorg.Gui.Capture.EditActivityController getController()>
<com.actionbarsherlock.internal.widget.AbsActionBarView$1: void run()> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: boolean showOverflowMenu()>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void promptForNewFile()> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry$3: void <init>(com.matburt.mobileorg.Gui.Capture.LocationEntry)>
<org.apache.james.mime4j.parser.MimeTokenStream: java.io.InputStream getDecodedInputStream()> --> <org.apache.james.mime4j.descriptor.BodyDescriptor: java.lang.String getTransferEncoding()>
<org.apache.james.mime4j.message.MessageBuilder: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.descriptor.BodyDescriptor: java.lang.String getTransferEncoding()>
<org.apache.james.mime4j.message.SimpleContentHandler: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.descriptor.BodyDescriptor: java.lang.String getTransferEncoding()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.AddressList buildAddressList(org.apache.james.mime4j.field.address.parser.ASTaddress_list)> --> <org.apache.james.mime4j.field.address.AddressList: void <init>(java.util.List,boolean)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.OAuthProviderListener: boolean onResponseReceived(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse)>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void onDestroy()> --> <com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void unregisterReceiver(android.content.BroadcastReceiver)>
<com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy: long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HeaderElementIterator: boolean hasNext()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: void <init>(android.content.Context,com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> --> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.String normalize(java.lang.String)>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getBody()>
<com.jcraft.jsch.KnownHosts: void sync(java.lang.String)> --> <com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean performExpand()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeView(android.view.View)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void performCollapse()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeView(android.view.View)>
<com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: android.graphics.drawable.Drawable getBackground()>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.GSSContext: void create(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void onFinishInflate()> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: android.view.View findViewById(int)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean isConnectable()> --> <com.matburt.mobileorg.util.OrgUtils: boolean isNetworkOnline(android.content.Context)>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: boolean isConnectable()> --> <com.matburt.mobileorg.util.OrgUtils: boolean isNetworkOnline(android.content.Context)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: boolean isConnectable()> --> <com.matburt.mobileorg.util.OrgUtils: boolean isNetworkOnline(android.content.Context)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: boolean isConnectable()> --> <com.matburt.mobileorg.util.OrgUtils: boolean isNetworkOnline(android.content.Context)>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxServerException: boolean isValidWithNullBody(org.apache.http.HttpResponse)>
<org.apache.james.mime4j.field.datetime.DateTime: java.lang.String toString()> --> <org.apache.james.mime4j.field.datetime.DateTime: int getYear()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void ReInit(org.apache.james.mime4j.field.structured.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void ReInit(org.apache.james.mime4j.field.structured.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void ReInit(org.apache.james.mime4j.field.structured.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void ReInit(org.apache.james.mime4j.field.structured.parser.SimpleCharStream)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: boolean hasBufferedData()>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int read()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: boolean hasBufferedData()>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: boolean hasBufferedData()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean eof()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: boolean hasBufferedData()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read()> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>
<org.apache.http.impl.AbstractHttpClientConnection: boolean isEof()> --> <org.apache.http.io.EofSensor: boolean isEof()>
<org.apache.http.impl.AbstractHttpServerConnection: boolean isEof()> --> <org.apache.http.io.EofSensor: boolean isEof()>
<com.dropbox.client2.session.AppKeyPair: void <init>(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.TokenPair: void <init>(java.lang.String,java.lang.String)>
<com.dropbox.client2.session.AccessTokenPair: void <init>(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.TokenPair: void <init>(java.lang.String,java.lang.String)>
<com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String)> --> <com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry commitChunkedUpload(java.lang.String,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest)>
<com.jcraft.jsch.Channel$1: void close()> --> <com.jcraft.jsch.Channel$1: void flush()>
<com.jcraft.jsch.Channel$1: void write(byte[],int,int)> --> <com.jcraft.jsch.Channel$1: void flush()>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgNode getOrgNodeFromOlpPath(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: com.matburt.mobileorg.OrgData.OrgNode getOrgNode(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParentSafe(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: com.matburt.mobileorg.OrgData.OrgNode getOrgNode(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedTopNodeId()> --> <com.matburt.mobileorg.OrgData.OrgFile: com.matburt.mobileorg.OrgData.OrgNode getOrgNode(android.content.ContentResolver)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void dispatchPresenterUpdate(boolean)>
<org.apache.james.mime4j.field.datetime.DateTime: java.lang.String toString()> --> <org.apache.james.mime4j.field.datetime.DateTime: int getSecond()>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean expandActionView()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<org.apache.http.HttpHost: int hashCode()> --> <org.apache.http.util.LangUtils: int hashCode(int,java.lang.Object)>
<org.apache.http.message.BasicHeaderElement: int hashCode()> --> <org.apache.http.util.LangUtils: int hashCode(int,java.lang.Object)>
<org.apache.http.message.BasicNameValuePair: int hashCode()> --> <org.apache.http.util.LangUtils: int hashCode(int,java.lang.Object)>
<org.apache.http.entity.mime.HttpMultipart: void <clinit>()> --> <org.apache.http.entity.mime.HttpMultipart: org.apache.james.mime4j.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.http.entity.mime.HttpMultipart: org.apache.james.mime4j.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)>
<com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: int read()> --> <org.apache.james.mime4j.codec.QuotedPrintableInputStream: void fillBuffer()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.ViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.UserAuthNone: java.lang.String getMethods()>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)> --> <com.jcraft.jsch.KeyPair: void generate(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void postShowOverflowMenu()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList runSynchronizer(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void announceStartSync()>
<com.matburt.mobileorg.Services.TimeclockDialog$3: void onClick(android.view.View)> --> <com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment: void <init>(com.matburt.mobileorg.Services.TimeclockDialog,com.matburt.mobileorg.Services.TimeclockDialog$1)>
<org.apache.james.mime4j.message.StorageTextBody: void <init>(org.apache.james.mime4j.storage.MultiReferenceStorage,java.nio.charset.Charset)> --> <org.apache.james.mime4j.message.TextBody: void <init>()>
<org.apache.james.mime4j.message.StringTextBody: void <init>(java.lang.String,java.nio.charset.Charset)> --> <org.apache.james.mime4j.message.TextBody: void <init>()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void removeAgendaBlockEntry(int)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void refresh()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onResume()> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void refresh()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: boolean access$202(com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard,boolean)>
<com.dropbox.client2.exception.DropboxSSLException: void <init>(javax.net.ssl.SSLException)> --> <com.dropbox.client2.exception.DropboxIOException: void <init>(java.io.IOException)>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxIOException: void <init>(java.io.IOException)>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <com.dropbox.client2.exception.DropboxIOException: void <init>(java.io.IOException)>
<com.dropbox.client2.RESTUtility: java.util.Map parseAsQueryString(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxIOException: void <init>(java.io.IOException)>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void <init>(org.apache.http.client.methods.HttpUriRequest,org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxIOException: void <init>(java.io.IOException)>
<org.apache.james.mime4j.message.MessageBuilder: void preamble(java.io.InputStream)> --> <org.apache.james.mime4j.message.MessageBuilder: void expect(java.lang.Class)>
<org.apache.james.mime4j.message.MessageBuilder: void startMessage()> --> <org.apache.james.mime4j.message.MessageBuilder: void expect(java.lang.Class)>
<org.apache.james.mime4j.message.MessageBuilder: void endBodyPart()> --> <org.apache.james.mime4j.message.MessageBuilder: void expect(java.lang.Class)>
<org.apache.james.mime4j.message.MessageBuilder: void startMultipart(org.apache.james.mime4j.descriptor.BodyDescriptor)> --> <org.apache.james.mime4j.message.MessageBuilder: void expect(java.lang.Class)>
<org.apache.james.mime4j.message.MessageBuilder: void epilogue(java.io.InputStream)> --> <org.apache.james.mime4j.message.MessageBuilder: void expect(java.lang.Class)>
<org.apache.james.mime4j.message.MessageBuilder: void endMessage()> --> <org.apache.james.mime4j.message.MessageBuilder: void expect(java.lang.Class)>
<org.apache.james.mime4j.message.MessageBuilder: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.message.MessageBuilder: void expect(java.lang.Class)>
<org.apache.james.mime4j.message.MessageBuilder: void endHeader()> --> <org.apache.james.mime4j.message.MessageBuilder: void expect(java.lang.Class)>
<org.apache.james.mime4j.message.MessageBuilder: void field(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.message.MessageBuilder: void expect(java.lang.Class)>
<org.apache.james.mime4j.message.MessageBuilder: void startBodyPart()> --> <org.apache.james.mime4j.message.MessageBuilder: void expect(java.lang.Class)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void removeView(android.view.View)>
<org.apache.http.entity.mime.FormBodyPart: void generateContentType(org.apache.james.mime4j.descriptor.ContentDescriptor)> --> <org.apache.james.mime4j.descriptor.ContentDescriptor: java.lang.String getCharset()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token getToken(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token getToken(int)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.util.FileUtils: java.io.BufferedWriter getWriter()>
<com.matburt.mobileorg.util.FileUtils: void fetch(java.io.BufferedReader)> --> <com.matburt.mobileorg.util.FileUtils: java.io.BufferedWriter getWriter()>
<com.matburt.mobileorg.OrgData.OrgProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> --> <com.matburt.mobileorg.util.SelectionBuilder: int delete(android.database.sqlite.SQLiteDatabase)>
<org.apache.james.mime4j.parser.MimeEntity: int getLineNumber()> --> <org.apache.james.mime4j.io.LineNumberSource: int getLineNumber()>
<org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset getCharset()> --> <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset getCharset(java.lang.String)>
<org.apache.http.entity.mime.MIME: void <clinit>()> --> <org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset getCharset(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.AbstractOAuthConsumer: void collectHeaderParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void addTagEntry(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.TagTableRow: void setTags(java.lang.String,java.util.ArrayList)>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: void access$1000(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)> --> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
<com.jcraft.jsch.ChannelSftp: int access$1100(com.jcraft.jsch.ChannelSftp,byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: int fill(byte[],int,int)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersVertical(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawHorizontalDivider(android.graphics.Canvas,int)>
<com.matburt.mobileorg.Services.TimeclockDialog: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Services.TimeclockDialog: void setContentView(int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: android.view.animation.Interpolator getInterpolator()>
<com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: boolean isDir()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: boolean isDir()>
<com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> --> <com.jcraft.jsch.SftpATTRS: boolean isDir()>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpATTRS: boolean isDir()>
<com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: boolean isDir()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard getWizard(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE,com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void initAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void init()>
<com.actionbarsherlock.internal.widget.ActionBarView$2: void onClick(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean collapseActionView()>
<com.actionbarsherlock.internal.widget.ActionBarView: void collapseActionView()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean collapseActionView()>
<org.apache.james.mime4j.field.MailboxField: org.apache.james.mime4j.field.address.parser.ParseException getParseException()> --> <org.apache.james.mime4j.field.MailboxField: void parse()>
<org.apache.james.mime4j.field.MailboxField: org.apache.james.mime4j.field.address.Mailbox getMailbox()> --> <org.apache.james.mime4j.field.MailboxField: void parse()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void <init>(java.io.InputStream,java.lang.String)>
<com.jcraft.jsch.jcraft.HMACMD596: void doFinal(byte[],int)> --> <com.jcraft.jsch.jcraft.HMACMD5: void doFinal(byte[],int)>
<org.apache.james.mime4j.parser.MimeEntity: void skipHeader(java.lang.String)> --> <org.apache.james.mime4j.descriptor.MutableBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.parser.AbstractEntity: boolean parseField()> --> <org.apache.james.mime4j.descriptor.MutableBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.field.address.Group: java.lang.String getDisplayString(boolean)> --> <org.apache.james.mime4j.field.address.Mailbox: java.lang.String getDisplayString(boolean)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setCurrentPlayTime(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: boolean animationFrame(long)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: boolean animationFrame(long)>
<com.matburt.mobileorg.Gui.Capture.TagTableRow$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.TagTableRow: void access$000(com.matburt.mobileorg.Gui.Capture.TagTableRow)>
<org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.parser.Field getField()> --> <org.apache.james.mime4j.parser.EntityStateMachine: org.apache.james.mime4j.parser.Field getField()>
<com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> --> <com.jcraft.jsch.IO: void put(byte[],int,int)>
<com.jcraft.jsch.Channel: void write(byte[],int,int)> --> <com.jcraft.jsch.IO: void put(byte[],int,int)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.IO: void put(byte[],int,int)>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int measureContentWidth()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.structured.parser.Token: org.apache.james.mime4j.field.structured.parser.Token newToken(int)>
<com.matburt.mobileorg.Settings.SettingsActivity$1$1: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.content.Context getBaseContext()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.Token: org.apache.james.mime4j.field.mimeversion.parser.Token newToken(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void setOverflowReserved(boolean)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_3()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void loginUbuntuOne()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$UIHandler: void <init>(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard,android.os.Looper)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void loginSSH()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$UIHandler: void <init>(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard,android.os.Looper)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: void loginWebdav()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$UIHandler: void <init>(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard,android.os.Looper)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollRight()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: android.view.View findFocus()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollLeft()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: android.view.View findFocus()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void MoreLexicalActions()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStopStringLiteralDfa_3(int,long)>
<com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> --> <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)>
<com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean runSearch()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onSearchRequested()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean isShowing()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: boolean isShowing()>
<com.actionbarsherlock.widget.ActivityChooserView: boolean isShowingPopup()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: boolean isShowing()>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: boolean isShowing()>
<com.actionbarsherlock.widget.ActivityChooserView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: boolean isShowing()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupDataSetObserver: void onChanged()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: boolean isShowing()>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: com.matburt.mobileorg.util.SelectionBuilder getQuery(android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: void getFileSelection(com.matburt.mobileorg.util.SelectionBuilder,android.content.Context)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void <init>(java.lang.String,float[])>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getMeasuredWidth()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getMeasuredWidth()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void <init>(android.content.Context)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void loginUbuntuOne()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void <init>(android.content.Context)>
<com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void bindItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,com.actionbarsherlock.internal.view.menu.MenuView$ItemView)>
<org.apache.james.mime4j.message.Message: void setBcc(org.apache.james.mime4j.field.address.Address[])> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,org.apache.james.mime4j.field.address.Address[])>
<org.apache.james.mime4j.message.Message: void setTo(org.apache.james.mime4j.field.address.Address[])> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,org.apache.james.mime4j.field.address.Address[])>
<org.apache.james.mime4j.message.Message: void setCc(org.apache.james.mime4j.field.address.Address[])> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,org.apache.james.mime4j.field.address.Address[])>
<org.apache.james.mime4j.message.Message: void setReplyTo(org.apache.james.mime4j.field.address.Address[])> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,org.apache.james.mime4j.field.address.Address[])>
<org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: void <init>(java.io.InputStream,int)> --> <org.apache.james.mime4j.io.LineReaderInputStream: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: void <init>(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.io.LineReaderInputStream: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: void <init>(org.apache.james.mime4j.io.BufferedLineReaderInputStream,java.lang.String)> --> <org.apache.james.mime4j.io.LineReaderInputStream: void <init>(java.io.InputStream)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void fireOnSelected()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemSelectedListener: void onNothingSelected(com.actionbarsherlock.internal.widget.IcsAdapterView)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setVisibility(int)>
<org.apache.http.impl.io.HttpRequestWriter: void writeHeadLine(org.apache.http.HttpMessage)> --> <org.apache.http.io.SessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.impl.io.AbstractMessageWriter: void write(org.apache.http.HttpMessage)> --> <org.apache.http.io.SessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.impl.io.HttpResponseWriter: void writeHeadLine(org.apache.http.HttpMessage)> --> <org.apache.http.io.SessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateTimestamp(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void setupDates()> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateTimestamp(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void restoreInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateTimestamp(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void <init>()> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment$3: void <init>(com.matburt.mobileorg.Gui.Capture.PayloadFragment)>
<com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService$SynchServiceReceiver: void onReceive(android.content.Context,android.content.Intent)> --> <com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: void access$100(com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode$2: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: android.content.ContentResolver access$000(com.matburt.mobileorg.Gui.Outline.OutlineActionMode)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void route()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void name_addr()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void phrase()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void local_part()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.String buildURL(java.lang.String,int,java.lang.String,java.lang.String[])>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.RESTUtility: java.lang.String buildURL(java.lang.String,int,java.lang.String,java.lang.String[])>
<com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <com.dropbox.client2.RESTUtility: java.lang.String buildURL(java.lang.String,int,java.lang.String,java.lang.String[])>
<com.dropbox.client2.android.AuthActivity: void startWebAuth()> --> <com.dropbox.client2.RESTUtility: java.lang.String buildURL(java.lang.String,int,java.lang.String,java.lang.String[])>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry commitChunkedUpload(java.lang.String,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.String buildURL(java.lang.String,int,java.lang.String,java.lang.String[])>
<com.dropbox.client2.session.WebAuthSession: com.dropbox.client2.session.WebAuthSession$WebAuthInfo getAuthInfo(java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.String buildURL(java.lang.String,int,java.lang.String,java.lang.String[])>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploadRequest chunkedUploadRequest(java.io.InputStream,long,com.dropbox.client2.ProgressListener,long,java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.String buildURL(java.lang.String,int,java.lang.String,java.lang.String[])>
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[])> --> <org.apache.http.impl.io.ChunkedOutputStream: void write(byte[],int,int)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void escape(byte)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void softBreak()>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void plain(byte)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void softBreak()>
<com.jcraft.jsch.ChannelSftp: void <init>()> --> <com.jcraft.jsch.ChannelSftp: void setLocalWindowSize(int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin: void clear()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void access$100(com.actionbarsherlock.internal.widget.IcsAbsSpinner,android.view.View,boolean)>
<oauth.signpost.commonshttp.HttpRequestAdapter: void setHeader(java.lang.String,java.lang.String)> --> <org.apache.http.client.methods.HttpUriRequest: void setHeader(java.lang.String,java.lang.String)>
<org.apache.http.message.BasicTokenIterator: int findNext(int)> --> <org.apache.http.message.BasicTokenIterator: int findTokenEnd(int)>
<com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> --> <com.jcraft.jsch.jgss.GSSContextKrb5: void setSystemProperty(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: void findExpandedIndex()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: com.actionbarsherlock.internal.view.menu.MenuBuilder access$400(com.actionbarsherlock.internal.view.menu.MenuPopupHelper)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void sendOpenFailure(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.app.ActionBar$Tab newTab()> --> <com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String payloadToHTML(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getCleanedPayload()>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String nodeToHTML(com.matburt.mobileorg.OrgData.OrgNode,int)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getCleanedPayload()>
<com.matburt.mobileorg.Services.CalendarSyncService: void tryToInsertNode(com.matburt.mobileorg.util.MultiMap,com.matburt.mobileorg.OrgData.OrgNodeDate,java.lang.String,com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getCleanedPayload()>
<com.matburt.mobileorg.Plugin.SyncEditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Plugin.SyncEditActivity: android.view.View findViewById(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void setVisibility(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean hideSubMenus()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void dismiss()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void prepareButtons()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: android.view.View findViewById(int)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void prepareDateImage()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: android.view.View findViewById(int)>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isPayloadEditable()> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isNodeEditable()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isNodeEditable()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isNodeEditable()>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isNodeEditable()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getLocationEntry(com.matburt.mobileorg.OrgData.OrgNode,java.util.ArrayList,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void show()>
<com.actionbarsherlock.internal.view.StandaloneActionMode: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void show()>
<org.apache.james.mime4j.field.address.Address: void addMailboxesTo(java.util.List)> --> <org.apache.james.mime4j.field.address.Address: void doAddMailboxesTo(java.util.List)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runRecover()> --> <com.matburt.mobileorg.OrgData.OrgFile: java.lang.String toString(android.content.ContentResolver)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pushCaptures()> --> <com.matburt.mobileorg.OrgData.OrgFile: java.lang.String toString(android.content.ContentResolver)>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.http.entity.mime.HttpMultipart: void setParent(org.apache.james.mime4j.message.Entity)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateProgressBars(int)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void showProgressBars(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar)>
<org.apache.james.mime4j.field.DateTimeField: org.apache.james.mime4j.field.datetime.parser.ParseException getParseException()> --> <org.apache.james.mime4j.field.DateTimeField: void parse()>
<org.apache.james.mime4j.field.DateTimeField: java.util.Date getDate()> --> <org.apache.james.mime4j.field.DateTimeField: void parse()>
<oauth.signpost.basic.HttpURLConnectionRequestAdapter: java.lang.Object unwrap()> --> <oauth.signpost.basic.HttpURLConnectionRequestAdapter: java.net.HttpURLConnection unwrap()>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parse()> --> <org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)>
<org.apache.james.mime4j.field.ContentDispositionField: void parse()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parseAll()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void access$000(com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard)>
<com.matburt.mobileorg.Gui.Wizard.WizardView$1: void run()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int access$100(com.matburt.mobileorg.Gui.Wizard.WizardView)>
<com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> --> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
<com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> --> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
<com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> --> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Util: boolean array_equals(byte[],byte[])>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView access$900(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView access$900(com.actionbarsherlock.internal.widget.ActionBarView)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfa_4(int,long)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStopStringLiteralDfa_4(int,long)>
<com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: void setUIDGID(int,int)>
<com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: void setUIDGID(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ParseException generateParseException()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jj_rescan_token()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void address()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void parseAddress0()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void address()>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String toHTML(java.lang.String)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String convertToHTML(java.lang.String)>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String payloadToHTML(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String convertToHTML(java.lang.String)>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String toHTML(com.matburt.mobileorg.OrgData.OrgNode,int)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String convertToHTML(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean hasCollapsibleActionView()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean hasCollapsibleActionView()>
<com.dropbox.client2.jsonextract.JsonMap: com.dropbox.client2.jsonextract.JsonThing get(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonMap: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void setReserveOverflow(boolean)>
<org.apache.http.impl.io.ChunkedInputStream: void parseTrailerHeaders()> --> <org.apache.http.HttpException: java.lang.String getMessage()>
<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)> --> <org.apache.http.HttpException: java.lang.String getMessage()>
<com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void <init>(android.content.Context)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard$2: void run()> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator,java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setEvaluator(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void cloneChildren(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgNode getOrgNodeFromFileAlias(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.OrgData.OrgFileParser: void combineBlockAgendas()> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.OrgData.OrgNodeParser: com.matburt.mobileorg.OrgData.OrgNode parseLine(java.lang.String,int)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerEdit: com.matburt.mobileorg.OrgData.OrgNode getParentOrgNode()> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void <init>(long,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.OrgData.CalendarEntry: com.matburt.mobileorg.OrgData.OrgNode convertToOrgNode()> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: com.matburt.mobileorg.OrgData.OrgNode getParentOrgNode()> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.util.OrgUtils: com.matburt.mobileorg.OrgData.OrgNode getCaptureIntentContents(android.content.Intent)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getLocationSelection()> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: com.matburt.mobileorg.OrgData.OrgNode getEditedOrgNode()> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit archiveNodeToSibling(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerCreate: void <init>(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>()>
<com.jcraft.jsch.KeyPair: void writePrivateKey(java.lang.String)> --> <com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)>
<com.matburt.mobileorg.Settings.SettingsActivity: void initSettings()> --> <com.matburt.mobileorg.Settings.SettingsActivity: void updatePreferenceSummary(java.lang.String)>
<com.matburt.mobileorg.Settings.SettingsActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Settings.SettingsActivity: void updatePreferenceSummary(java.lang.String)>
<com.actionbarsherlock.widget.ShareActionProvider: android.view.View onCreateActionView()> --> <com.actionbarsherlock.widget.ActivityChooserView: void setExpandActivityOverflowButtonContentDescription(int)>
<com.matburt.mobileorg.OrgData.OrgFile: void addFile(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: long addFileOrgDataNode(android.content.ContentResolver)>
<com.matburt.mobileorg.Services.SyncService$1: void start()> --> <com.matburt.mobileorg.Services.SyncService: android.content.Context getBaseContext()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setVisibility(int)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setVisibility(int)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setVisibility(int)>
<org.apache.http.impl.AbstractHttpServerConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.HttpRequestFactory createHttpRequestFactory()>
<org.apache.http.params.HttpConnectionParamBean: void setLinger(int)> --> <org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)>
<org.apache.http.impl.AbstractHttpServerConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)>
<com.actionbarsherlock.widget.ActivityChooserView: void access$400(com.actionbarsherlock.widget.ActivityChooserView)> --> <com.actionbarsherlock.widget.ActivityChooserView: void updateAppearance()>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)> --> <org.apache.http.message.BasicLineFormatter: void doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean endOfStream()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read()> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean endOfStream()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean endOfStream()>
<org.json.simple.parser.Yylex: void <clinit>()> --> <org.json.simple.parser.Yylex: int[] zzUnpackAttribute()>
<com.matburt.mobileorg.OrgData.OrgProvider: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgProvider: android.content.UriMatcher buildUriMatcher()>
<com.matburt.mobileorg.Settings.SettingsActivity: void onResume()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: void onResume()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: boolean onInterceptTouchEvent(android.view.MotionEvent)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.IdentityFile: byte a2b(byte)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean hasDividerBeforeChildAt(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void remove(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: int getPosition(java.lang.Object)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setScaleY(float)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setScaleY(float)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setAlpha(float)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void cloneChildren(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void fastInsertNodePayload(java.lang.Long,java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parseLine(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void fastInsertNodePayload(java.lang.Long,java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void fastInsertNodePayload(java.lang.Long,java.lang.String)>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.Channel: void close()> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.Channel: void eof()> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.Channel: void sendOpenConfirmation()> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.Channel: void sendOpenFailure(int)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Channel: int getRecipient()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setPropertyName(java.lang.String)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.String getPropertyName()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.String getPropertyName()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setValues(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.String getPropertyName()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onBackPressed()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void doCancel()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void doCancel()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: android.app.Dialog createTodoDialog()> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: android.content.res.Resources getResources()>
<com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey()> --> <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)>
<org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
<org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>
<com.twofortyfouram.locale.MarketActivity: android.app.Dialog onCreateDialog(int)> --> <com.twofortyfouram.locale.MarketActivity: android.content.pm.PackageManager getPackageManager()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setGroupCheckable(int,boolean,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setCheckable(boolean)>
<org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.AddressList parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.Reader)>
<org.apache.james.mime4j.field.address.Address: org.apache.james.mime4j.field.address.Address parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.Reader)>
<org.apache.james.mime4j.field.address.Mailbox: org.apache.james.mime4j.field.address.Mailbox parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.Reader)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void ReInit(org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void ReInit(org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void ReInit(org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void ReInit(org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getMeasuredHeight()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onVisibilityChanged(android.view.View,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void stopAnimation()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setIndeterminate(boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void stopAnimation()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void stopAnimation()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setVisibility(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void stopAnimation()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setupStartValues()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupStartValue(java.lang.Object)>
<com.matburt.mobileorg.Gui.Wizard.WizardView$1: void start()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollTo(int,int)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void onScrollChanged(int,int,int,int)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollTo(int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.InputStream,java.lang.String)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateFile(java.lang.String,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void write(android.content.ContentResolver)>
<com.jcraft.jsch.KeyPair: boolean decrypt(java.lang.String)> --> <com.jcraft.jsch.KeyPair: boolean decrypt(byte[])>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: java.lang.String getHome()> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: java.lang.String realpath(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor)> --> <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,int)> --> <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)>
<org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream,org.apache.james.mime4j.parser.MimeEntityConfig,org.apache.james.mime4j.storage.StorageProvider)> --> <org.apache.james.mime4j.message.MessageBuilder: void <init>(org.apache.james.mime4j.message.Entity,org.apache.james.mime4j.storage.StorageProvider)>
<org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader,org.json.simple.parser.ContainerFactory)> --> <org.json.simple.parser.JSONParser: java.util.Map createObjectContainer(org.json.simple.parser.ContainerFactory)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.AbstractOAuthProvider: oauth.signpost.http.HttpRequest createRequest(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonMap expectMap()> --> <com.dropbox.client2.jsonextract.JsonMap: void <init>(java.util.Map,java.lang.String)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: android.view.ViewGroup generateLayout()>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void UpdateLineColumn(char)>
<org.apache.james.mime4j.field.structured.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)> --> <org.apache.james.mime4j.field.structured.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>
<com.matburt.mobileorg.Gui.ViewActivity: void onStart()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void onStart()>
<com.actionbarsherlock.widget.ShareActionProvider: void setActivityChooserPolicyIfNeeded()> --> <com.actionbarsherlock.widget.ActivityChooserModel: void setOnChooseActivityListener(com.actionbarsherlock.widget.ActivityChooserModel$OnChooseActivityListener)>
<org.apache.james.mime4j.parser.MimeEntity: void advanceToBoundary()> --> <org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: boolean eof()>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.lang.String testConnection(java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.net.HttpURLConnection createConnection(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.io.InputStream getUrlStream(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.net.HttpURLConnection createConnection(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void putUrlFile(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.net.HttpURLConnection createConnection(java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.app.ActionBar$TabListener: void onTabUnselected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.app.ActionBar$TabListener: void onTabUnselected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void postShowOverflowMenu()> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: boolean post(java.lang.Runnable)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: java.lang.String day_of_week()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int jj_ntk()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int zone()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int jj_ntk()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int obs_zone()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int jj_ntk()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int jj_ntk()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime parseLine()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int jj_ntk()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int month()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int jj_ntk()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int jj_ntk()>
<com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver: void onInvalidated()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void requestLayout()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void requestLayout()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void requestLayout()>
<com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver: void onChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void requestLayout()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void dispatchPresenterUpdate(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter: void updateMenuView(boolean)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: java.lang.String parse()> --> <org.apache.james.mime4j.field.structured.parser.ParseException: void <init>(java.lang.Throwable)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: java.lang.String GetImage()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: java.lang.String GetImage()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getZone()>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field messageId(java.lang.String)> --> <org.apache.james.mime4j.util.MimeUtil: java.lang.String createUniqueMessageId(java.lang.String)>
<com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: void addPreferencesFromResource(int)>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)> --> <org.apache.http.message.HeaderGroup: org.apache.http.Header getFirstHeader(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void <init>(android.content.Context,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTaddress_list parseAddressList()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void parseAddressList0()>
<org.apache.http.message.BasicHeaderElementIterator: void <init>(org.apache.http.HeaderIterator)> --> <org.apache.http.message.BasicHeaderElementIterator: void <init>(org.apache.http.HeaderIterator,org.apache.http.message.HeaderValueParser)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: int getVisibility()>
<com.jcraft.jsch.ChannelSftp$LsEntry: void <init>(com.jcraft.jsch.ChannelSftp,java.lang.String,java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp$LsEntry: void setLongname(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void access$600(com.matburt.mobileorg.Gui.Capture.DateTableRow,int,int,int)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void setDateCallback(int,int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isActionViewExpanded()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isActionViewExpanded()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isActionViewExpanded()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void ReInit(java.io.InputStream,java.lang.String)>
<com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread: void ensureRunning(com.dropbox.client2.session.AbstractSession$DBClientConnManager,int,int)> --> <com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread: void <init>(com.dropbox.client2.session.AbstractSession$DBClientConnManager,int,int)>
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[])> --> <org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserInfo: void showMessage(java.lang.String)>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserInfo: void showMessage(java.lang.String)>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserInfo: void showMessage(java.lang.String)>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.UserInfo: void showMessage(java.lang.String)>
<com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> --> <com.jcraft.jsch.UserInfo: void showMessage(java.lang.String)>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserInfo: void showMessage(java.lang.String)>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserInfo: void showMessage(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.ASTroute: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.ASTroute,java.lang.Object)>
<org.apache.james.mime4j.field.MailboxListField: org.apache.james.mime4j.field.ParseException getParseException()> --> <org.apache.james.mime4j.field.MailboxListField: org.apache.james.mime4j.field.address.parser.ParseException getParseException()>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.BinaryBody binaryBody(org.apache.james.mime4j.storage.Storage)> --> <org.apache.james.mime4j.message.StorageBinaryBody: void <init>(org.apache.james.mime4j.storage.MultiReferenceStorage)>
<org.apache.james.mime4j.message.StorageBinaryBody: org.apache.james.mime4j.message.StorageBinaryBody copy()> --> <org.apache.james.mime4j.message.StorageBinaryBody: void <init>(org.apache.james.mime4j.storage.MultiReferenceStorage)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.BinaryBody binaryBody(java.io.InputStream)> --> <org.apache.james.mime4j.message.StorageBinaryBody: void <init>(org.apache.james.mime4j.storage.MultiReferenceStorage)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void animateToMode(boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToVisibility(int)>
<com.jcraft.jsch.ChannelSftp$RequestQueue: void <init>(com.jcraft.jsch.ChannelSftp,int)> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: void init()>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: void init()>
<com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: java.lang.String getDirectory(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void updateTextButtonVisibility()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean showsTextAsAction()>
<org.apache.james.mime4j.storage.DefaultStorageProvider: void initialize()> --> <org.apache.james.mime4j.storage.ThresholdStorageProvider: void <init>(org.apache.james.mime4j.storage.StorageProvider,int)>
<org.apache.james.mime4j.storage.ThresholdStorageProvider: void <init>(org.apache.james.mime4j.storage.StorageProvider)> --> <org.apache.james.mime4j.storage.ThresholdStorageProvider: void <init>(org.apache.james.mime4j.storage.StorageProvider,int)>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onCheckedChanged(android.widget.RadioGroup,int)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard getWizard(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE,com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setStartDelay(long)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setStartDelay(long)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void configureTab(com.actionbarsherlock.app.ActionBar$Tab,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void configureTab(com.actionbarsherlock.app.ActionBar$Tab,int)>
<com.jcraft.jsch.KnownHosts: void sync()> --> <com.jcraft.jsch.KnownHosts: void sync(java.lang.String)>
<com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> --> <com.jcraft.jsch.KnownHosts: void sync(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity$SynchServiceReceiver: void onReceive(android.content.Context,android.content.Intent)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void refresh()>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void onPostCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void refresh()>
<org.apache.james.mime4j.field.AddressListField$1: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.AddressListField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.entity.BasicHttpEntity: void <init>()>
<org.apache.james.mime4j.field.MailboxListField: void parse()> --> <org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.MailboxList flatten()>
<org.apache.james.mime4j.field.MailboxField: void parse()> --> <org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.MailboxList flatten()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Session$GlobalRequestReply: void setReply(int)>
<org.json.simple.parser.ParseException: void <init>(int)> --> <org.json.simple.parser.ParseException: void <init>(int,int,java.lang.Object)>
<org.json.simple.parser.Yylex: org.json.simple.parser.Yytoken yylex()> --> <org.json.simple.parser.ParseException: void <init>(int,int,java.lang.Object)>
<org.json.simple.parser.ParseException: void <init>(int,java.lang.Object)> --> <org.json.simple.parser.ParseException: void <init>(int,int,java.lang.Object)>
<org.json.simple.parser.JSONParser: void parse(java.lang.String,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.ParseException: void <init>(int,int,java.lang.Object)>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.ParseException: void <init>(int,int,java.lang.Object)>
<org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader,org.json.simple.parser.ContainerFactory)> --> <org.json.simple.parser.ParseException: void <init>(int,int,java.lang.Object)>
<org.json.simple.parser.JSONParser: java.lang.Object parse(java.lang.String,org.json.simple.parser.ContainerFactory)> --> <org.json.simple.parser.ParseException: void <init>(int,int,java.lang.Object)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setMeasuredDimension(int,int)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: int getPositionForView(android.view.View)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void rememberSyncState()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.view.View getChildAt(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseLocation(java.lang.String)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: java.lang.String parse()>
<org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean callbackCreateOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void init(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setContextView(com.actionbarsherlock.internal.widget.ActionBarContextView)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_0(int,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setAdapter(com.matburt.mobileorg.Gui.Outline.OutlineAdapter)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onDestroy()> --> <com.actionbarsherlock.app.SherlockActivity: void onDestroy()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean requiresActionButton()>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream: void write(int)> --> <com.dropbox.client2.ProgressListener$ProgressHttpEntity: com.dropbox.client2.ProgressListener access$000(com.dropbox.client2.ProgressListener$ProgressHttpEntity)>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream: void <init>(com.dropbox.client2.ProgressListener$ProgressHttpEntity,java.io.OutputStream)> --> <com.dropbox.client2.ProgressListener$ProgressHttpEntity: com.dropbox.client2.ProgressListener access$000(com.dropbox.client2.ProgressListener$ProgressHttpEntity)>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream: void write(byte[],int,int)> --> <com.dropbox.client2.ProgressListener$ProgressHttpEntity: com.dropbox.client2.ProgressListener access$000(com.dropbox.client2.ProgressListener$ProgressHttpEntity)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.field.Fields: boolean isValidDispositionType(java.lang.String)>
<com.jcraft.jsch.ChannelAgentForwarding: void run()> --> <com.jcraft.jsch.ChannelAgentForwarding: void sendOpenConfirmation()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contenttype.parser.Token: org.apache.james.mime4j.field.contenttype.parser.Token newToken(int)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.ProtocolVersion: java.lang.String getProtocol()>
<org.apache.http.message.BasicLineParser: boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.ProtocolVersion: java.lang.String getProtocol()>
<org.apache.http.message.BasicLineFormatter: int estimateProtocolVersionLen(org.apache.http.ProtocolVersion)> --> <org.apache.http.ProtocolVersion: java.lang.String getProtocol()>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)> --> <org.apache.http.ProtocolVersion: java.lang.String getProtocol()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa2_0(long,long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa1_0(long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStopAtPos(int,int)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit createParentNewheading(android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgFile: boolean generateEditsForFile()>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.KeyExchange: byte[] getK()>
<com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> --> <org.ietf.jgss.GSSContext: void requestAnonymity(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int access$1400(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor$1: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void scheduleNext()>
<com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void execute(java.lang.Runnable)> --> <com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void scheduleNext()>
<com.jcraft.jsch.ChannelSubsystem: void <init>()> --> <com.jcraft.jsch.ChannelSession: void <init>()>
<com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> --> <com.jcraft.jsch.ChannelSession: void <init>()>
<com.jcraft.jsch.ChannelShell: void <init>()> --> <com.jcraft.jsch.ChannelSession: void <init>()>
<com.jcraft.jsch.ChannelExec: void <init>()> --> <com.jcraft.jsch.ChannelSession: void <init>()>
<com.jcraft.jsch.ChannelSftp: void <init>()> --> <com.jcraft.jsch.ChannelSession: void <init>()>
<com.matburt.mobileorg.Services.CalendarSyncService: void assimilateCalendar()> --> <com.matburt.mobileorg.Services.CalendarWrapper: android.database.Cursor getUnassimilatedCalendarCursor()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: void initLocationView()>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setUpChild(android.view.View)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getMeasuredHeight()>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getMeasuredHeight()>
<com.actionbarsherlock.widget.ActivityChooserView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void layout(int,int,int,int)>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void connect()> --> <com.jcraft.jsch.JSch: void <init>()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void ReInit(org.apache.james.mime4j.field.structured.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void SkipLexicalActions(org.apache.james.mime4j.field.structured.parser.Token)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void <init>(org.apache.james.mime4j.field.structured.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_3()>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <com.dropbox.client2.exception.DropboxSSLException: void <init>(javax.net.ssl.SSLException)>
<org.apache.http.HttpVersion: void <clinit>()> --> <org.apache.http.HttpVersion: void <init>(int,int)>
<org.apache.http.HttpVersion: org.apache.http.ProtocolVersion forVersion(int,int)> --> <org.apache.http.HttpVersion: void <init>(int,int)>
<org.apache.http.HttpException: void <init>(java.lang.String,java.lang.Throwable)> --> <org.apache.http.util.ExceptionUtils: void initCause(java.lang.Throwable,java.lang.Throwable)>
<org.apache.http.impl.io.ChunkedInputStream: void parseTrailerHeaders()> --> <org.apache.http.util.ExceptionUtils: void initCause(java.lang.Throwable,java.lang.Throwable)>
<com.jcraft.jsch.Buffer: int getInt()> --> <com.jcraft.jsch.Buffer: int getShort()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Buffer: int getShort()>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getShort()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void start(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: boolean sendEmptyMessage(int)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)> --> <com.actionbarsherlock.view.MenuInflater: void inflate(int,com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onCreateActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater: void inflate(int,com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater: void inflate(int,com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)> --> <com.actionbarsherlock.view.MenuInflater: void inflate(int,com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater: void inflate(int,com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater: void inflate(int,com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater: void inflate(int,com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.Gui.Capture.EditActivityController getController(java.lang.String,long,java.lang.String,android.content.Intent,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityControllerCreate: void <init>(java.lang.String)>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.message.Entity: void setContentTransferEncoding(java.lang.String)> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String)> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.message.Entity: void setFilename(java.lang.String)> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body,java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String,java.lang.String,long)> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header obtainHeader()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)>
<com.matburt.mobileorg.Gui.FileDecryptionActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.FileDecryptionActivity: android.content.Intent getIntent()>
<org.apache.james.mime4j.field.address.Group: void <init>(java.lang.String,org.apache.james.mime4j.field.address.Mailbox[])> --> <org.apache.james.mime4j.field.address.MailboxList: void <init>(java.util.List,boolean)>
<org.apache.james.mime4j.field.address.Group: void <init>(java.lang.String,java.util.Collection)> --> <org.apache.james.mime4j.field.address.MailboxList: void <init>(java.util.List,boolean)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.MailboxList buildGroupBody(org.apache.james.mime4j.field.address.parser.ASTgroup_body)> --> <org.apache.james.mime4j.field.address.MailboxList: void <init>(java.util.List,boolean)>
<org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.MailboxList flatten()> --> <org.apache.james.mime4j.field.address.MailboxList: void <init>(java.util.List,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void parseMailbox0()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.ContentHandler: void startJSON()>
<org.apache.http.entity.mime.content.InputStreamBody: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.http.entity.mime.content.InputStreamBody: void <init>(java.io.InputStream,java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void doCancel()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: boolean hasEdits()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>
<org.apache.http.params.HttpProtocolParamBean: void setUseExpectContinue(boolean)> --> <org.apache.http.params.HttpProtocolParams: void setUseExpectContinue(org.apache.http.params.HttpParams,boolean)>
<org.apache.http.message.BasicStatusLine: java.lang.String toString()> --> <org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void finish()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setIntValues(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setIntValues(int[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setIntValues(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setIntValues(int[])>
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine)> --> <org.apache.http.MethodNotSupportedException: void <init>(java.lang.String)>
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String)> --> <org.apache.http.MethodNotSupportedException: void <init>(java.lang.String)>
<org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>
<com.matburt.mobileorg.Gui.TabsAdapter: void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)> --> <com.actionbarsherlock.app.ActionBar$Tab: java.lang.Object getTag()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: org.apache.james.mime4j.field.datetime.DateTime parseDate(java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.Reader)>
<org.apache.james.mime4j.field.DateTimeField: void parse()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.Reader)>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Date parseDate(java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.Reader)>
<com.jcraft.jsch.jce.DH: void init()> --> <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>
<org.apache.james.mime4j.message.Entity: java.lang.String getContentTransferEncoding()> --> <org.apache.james.mime4j.field.ContentTransferEncodingField: java.lang.String getEncoding(org.apache.james.mime4j.field.ContentTransferEncodingField)>
<com.matburt.mobileorg.OrgData.MobileOrgApplication: void onCreate()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getApplicationContext()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$EndTimePickerDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$EndTimePickerDialogFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runAgenda()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofInt(java.lang.String,int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: void <init>(java.lang.String,int[])>
<com.matburt.mobileorg.Gui.TabsAdapter: void onPageSelected(int)> --> <com.actionbarsherlock.app.ActionBar: void setSelectedNavigationItem(int)>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorage: java.io.InputStream getInputStream()> --> <javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>
<com.jcraft.jsch.ChannelSession: void start()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Channel$1: void init()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Channel: void sendOpenConfirmation()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Channel: void sendOpenFailure(int)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelDirectTCPIP: void start()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Session: void sendKeepAliveMsg()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Channel: void close()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Channel: void eof()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Session: void sendIgnore()> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void <init>(com.jcraft.jsch.Buffer)>
<org.apache.james.mime4j.field.address.parser.ASTdomain: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.ASTdomain,java.lang.Object)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getOrientation()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void measureChildWithMargins(android.view.View,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getOrientation()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void onRestoreInstanceState(android.os.Parcelable)>
<com.jcraft.jsch.jce.DH: byte[] getE()> --> <javax.crypto.spec.DHParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger)>
<com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>
<oauth.signpost.commonshttp.CommonsHttpOAuthProvider: oauth.signpost.http.HttpRequest createRequest(java.lang.String)> --> <org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry commitChunkedUpload(java.lang.String,java.lang.String,boolean,java.lang.String)> --> <org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$3: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$StartTimePickerDialogFragment: void <init>(com.matburt.mobileorg.Gui.Capture.DateTableRow,android.app.TimePickerDialog$OnTimeSetListener)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void dispatchPresenterUpdate(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void invalidate()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: boolean dispatchOnCreate()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
<oauth.signpost.AbstractOAuthProvider: java.lang.String getResponseParameter(java.lang.String)> --> <oauth.signpost.http.HttpParameters: java.lang.String getFirst(java.lang.Object)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.http.HttpParameters: java.lang.String getFirst(java.lang.Object)>
<oauth.signpost.AbstractOAuthProvider: java.lang.String retrieveRequestToken(oauth.signpost.OAuthConsumer,java.lang.String)> --> <oauth.signpost.http.HttpParameters: java.lang.String getFirst(java.lang.Object)>
<oauth.signpost.http.HttpParameters: java.lang.String getAsHeaderElement(java.lang.String)> --> <oauth.signpost.http.HttpParameters: java.lang.String getFirst(java.lang.Object)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: android.view.View findViewById(int)>
<org.apache.james.mime4j.parser.AbstractEntity: void warn(org.apache.james.mime4j.parser.Event)> --> <org.apache.commons.logging.Log: void warn(java.lang.Object)>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void fillBuffer()> --> <org.apache.commons.logging.Log: void warn(java.lang.Object)>
<org.apache.james.mime4j.codec.Base64InputStream: void handleUnexpecedPad(int)> --> <org.apache.commons.logging.Log: void warn(java.lang.Object)>
<org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWord(java.lang.String,int,int)> --> <org.apache.commons.logging.Log: void warn(java.lang.Object)>
<org.apache.james.mime4j.codec.Base64InputStream: void handleUnexpectedEof(int)> --> <org.apache.commons.logging.Log: void warn(java.lang.Object)>
<org.apache.james.mime4j.message.BodyFactory: java.nio.charset.Charset toJavaCharset(java.lang.String,boolean)> --> <org.apache.commons.logging.Log: void warn(java.lang.Object)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$3: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: android.app.TimePickerDialog$OnTimeSetListener access$300(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList pull(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList getFilesThatChangedRemotely(java.util.HashMap)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.actionbarsherlock.widget.ShareActionProvider: void setActivityChooserPolicyIfNeeded()> --> <com.actionbarsherlock.widget.ActivityChooserModel: com.actionbarsherlock.widget.ActivityChooserModel get(android.content.Context,java.lang.String)>
<com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)> --> <com.actionbarsherlock.widget.ActivityChooserModel: com.actionbarsherlock.widget.ActivityChooserModel get(android.content.Context,java.lang.String)>
<com.actionbarsherlock.widget.ShareActionProvider: android.view.View onCreateActionView()> --> <com.actionbarsherlock.widget.ActivityChooserModel: com.actionbarsherlock.widget.ActivityChooserModel get(android.content.Context,java.lang.String)>
<com.actionbarsherlock.widget.ShareActionProvider: void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu)> --> <com.actionbarsherlock.widget.ActivityChooserModel: com.actionbarsherlock.widget.ActivityChooserModel get(android.content.Context,java.lang.String)>
<com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.widget.ActivityChooserModel: com.actionbarsherlock.widget.ActivityChooserModel get(android.content.Context,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.internal.view.menu.ActionMenuItem findItemWithShortcut(int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: char getNumericShortcut()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToTab(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setTabSelected(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToTab(int)>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorageOutputStream: void write0(byte[],int,int)> --> <javax.crypto.CipherOutputStream: void write(byte[],int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_4()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <clinit>()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jj_la1_1()>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setMaxActivityCount(int)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: java.lang.String getTimestamp()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void announceDateModified(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: java.lang.String getTimestamp()>
<com.google.gdata.util.common.base.UnicodeEscaper: int nextEscapeIndex(java.lang.CharSequence,int,int)> --> <com.google.gdata.util.common.base.UnicodeEscaper: int codePointAt(java.lang.CharSequence,int,int)>
<com.google.gdata.util.common.base.UnicodeEscaper: java.lang.String escapeSlow(java.lang.String,int)> --> <com.google.gdata.util.common.base.UnicodeEscaper: int codePointAt(java.lang.CharSequence,int,int)>
<com.google.gdata.util.common.base.UnicodeEscaper$1: java.lang.Appendable append(java.lang.CharSequence,int,int)> --> <com.google.gdata.util.common.base.UnicodeEscaper: int codePointAt(java.lang.CharSequence,int,int)>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatHeaderElement(org.apache.http.HeaderElement,boolean,org.apache.http.message.HeaderValueFormatter)> --> <org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.GSSContext: byte[] getMIC(byte[],int,int)>
<com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> --> <com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditHost: com.matburt.mobileorg.Gui.Capture.EditActivityController getController()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditHost: com.matburt.mobileorg.Gui.Capture.EditActivityController getController()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditHost: com.matburt.mobileorg.Gui.Capture.EditActivityController getController()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditHost: com.matburt.mobileorg.Gui.Capture.EditActivityController getController()>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditHost: com.matburt.mobileorg.Gui.Capture.EditActivityController getController()>
<com.matburt.mobileorg.Services.TimeclockService: void cancelNotification()> --> <com.matburt.mobileorg.Services.TimeclockService: void stopSelf()>
<com.matburt.mobileorg.Gui.Theme.DefaultTheme: com.matburt.mobileorg.Gui.Theme.DefaultTheme getTheme(android.content.Context)> --> <com.matburt.mobileorg.Gui.Theme.MonoTheme: void <init>()>
<org.apache.http.message.BasicLineFormatter: void <clinit>()> --> <org.apache.http.message.BasicLineFormatter: void <init>()>
<org.apache.http.protocol.HttpRequestHandlerRegistry: void <init>()> --> <org.apache.http.protocol.UriPatternMatcher: void <init>()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>
<org.json.simple.JSONValue: java.lang.Object parseWithException(java.lang.String)> --> <org.json.simple.parser.JSONParser: java.lang.Object parse(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void closeMode()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void killMode()>
<com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void killMode()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void killMode()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void killMode()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$DatePickerDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$DatePickerDialogFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.actionbarsherlock.widget.ActivityChooserView: void setActivityChooserModel(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean isShowingPopup()>
<com.actionbarsherlock.widget.ActivityChooserView$2: void onGlobalLayout()> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean isShowingPopup()>
<com.actionbarsherlock.widget.ActivityChooserView: boolean dismissPopup()> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean isShowingPopup()>
<com.actionbarsherlock.widget.ActivityChooserView: boolean showPopup()> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean isShowingPopup()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void dispatchRestoreInstanceState(android.util.SparseArray)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void dispatchThawSelfOnly(android.util.SparseArray)>
<org.apache.james.mime4j.util.MimeUtil$1: java.lang.Object initialValue()> --> <org.apache.james.mime4j.util.MimeUtil$1: java.text.DateFormat initialValue()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void refreshProgress(int,int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: boolean post(java.lang.Runnable)>
<com.twofortyfouram.locale.MarketActivity$1: void onClick(android.content.DialogInterface,int)> --> <com.twofortyfouram.locale.MarketActivity: android.content.Context getApplicationContext()>
<com.twofortyfouram.locale.MarketActivity: void onCreate(android.os.Bundle)> --> <com.twofortyfouram.locale.MarketActivity: android.content.Context getApplicationContext()>
<com.jcraft.jsch.jgss.GSSContextKrb5: void <clinit>()> --> <com.jcraft.jsch.jgss.GSSContextKrb5: java.lang.String getSystemProperty(java.lang.String)>
<com.matburt.mobileorg.Gui.TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.TabsAdapter$TabInfo: void <init>(java.lang.Class,android.os.Bundle)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void signRequest(org.apache.http.HttpRequest)> --> <oauth.signpost.commonshttp.CommonsHttpOAuthConsumer: oauth.signpost.http.HttpRequest sign(java.lang.Object)>
<org.apache.james.mime4j.field.structured.parser.Token: org.apache.james.mime4j.field.structured.parser.Token newToken(int)> --> <org.apache.james.mime4j.field.structured.parser.Token: void <init>()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void <init>(org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager)> --> <org.apache.james.mime4j.field.structured.parser.Token: void <init>()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void ReInit(org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager)> --> <org.apache.james.mime4j.field.structured.parser.Token: void <init>()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.structured.parser.Token: void <init>()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.structured.parser.Token: void <init>()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.structured.parser.Token: void <init>()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.structured.parser.Token: void <init>()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: com.matburt.mobileorg.Gui.Outline.OutlineAdapter access$100(com.matburt.mobileorg.Gui.Outline.OutlineListView)>
<com.jcraft.jsch.ChannelSubsystem: void setErrStream(java.io.OutputStream)> --> <com.jcraft.jsch.ChannelSubsystem: void setExtOutputStream(java.io.OutputStream)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void handleTrustRelationship(android.content.Context)> --> <javax.net.ssl.HttpsURLConnection: void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMimeEntity()>
<org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor)> --> <org.apache.james.mime4j.descriptor.BodyDescriptor: java.lang.String getMimeType()>
<org.apache.james.mime4j.message.MessageBuilder: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.descriptor.BodyDescriptor: java.lang.String getMimeType()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.view.MenuItem setShowAsActionFlags(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: void setShowAsAction(int)>
<com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)> --> <com.actionbarsherlock.widget.ActivityChooserModel$OnChooseActivityListener: boolean onChooseActivity(com.actionbarsherlock.widget.ActivityChooserModel,android.content.Intent)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void onDraw(android.graphics.Canvas)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void UpdateLineColumn(char)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean hasEdits()> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean hasEdits(com.matburt.mobileorg.OrgData.OrgNode)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getMeasuredWidth()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getMeasuredWidth()>
<com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService$SynchServiceReceiver: void <init>(com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService,com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$1)> --> <com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService$SynchServiceReceiver: void <init>(com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void jj_rescan_token()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3_2()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_2_2(int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3_2()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setSupportProgressBarIndeterminate(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarIndeterminate(boolean)>
<com.actionbarsherlock.app.SherlockListActivity: void setSupportProgressBarIndeterminate(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarIndeterminate(boolean)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setSupportProgressBarIndeterminate(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarIndeterminate(boolean)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setSupportProgressBarIndeterminate(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarIndeterminate(boolean)>
<com.actionbarsherlock.app.SherlockActivity: void setSupportProgressBarIndeterminate(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarIndeterminate(boolean)>
<org.apache.http.message.BasicTokenIterator: int findNext(int)> --> <org.apache.http.message.BasicTokenIterator: int findTokenSeparator(int)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void setStartTimeCallback(int,int)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void notifyListenerOfChange()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void remove()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void notifyListenerOfChange()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void setDateCallback(int,int,int)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void notifyListenerOfChange()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void setEndTimeCallback(int,int)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void notifyListenerOfChange()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<org.apache.james.mime4j.codec.Base64OutputStream: void writePad()> --> <org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>
<org.apache.james.mime4j.codec.Base64OutputStream: void flush()> --> <org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>
<org.apache.james.mime4j.codec.Base64OutputStream: void close0()> --> <org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>
<org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)> --> <org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>
<org.apache.james.mime4j.codec.Base64OutputStream: void writeLineSeparator()> --> <org.apache.james.mime4j.codec.Base64OutputStream: void flush0()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder getRootMenu()>
<org.apache.james.mime4j.parser.RawField: java.lang.String toString()> --> <org.apache.james.mime4j.parser.RawField: java.lang.String getBody()>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int indexOf(byte[])> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int indexOf(byte[],int,int)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int indexOf(byte[],int,int)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.descriptor.BodyDescriptor getBodyDescriptor()> --> <org.apache.james.mime4j.parser.AbstractEntity: int getState()>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.parser.Field getField()> --> <org.apache.james.mime4j.parser.AbstractEntity: int getState()>
<com.dropbox.client2.SdkVersion: void main(java.lang.String[])> --> <com.dropbox.client2.SdkVersion: java.lang.String get()>
<com.dropbox.client2.DropboxAPI: void <clinit>()> --> <com.dropbox.client2.SdkVersion: java.lang.String get()>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.HostKeyRepository getHostKeyRepository()>
<com.jcraft.jsch.ChannelSession: void start()> --> <com.jcraft.jsch.ChannelSession: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> --> <com.jcraft.jsch.ChannelSession: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelSession: void sendRequests()> --> <com.jcraft.jsch.ChannelSession: com.jcraft.jsch.Session getSession()>
<org.apache.http.impl.entity.EntitySerializer: java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.entity.ContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.entity.ContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)>
<com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread: void start()> --> <com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread: void run()>
<com.jcraft.jsch.Buffer: byte[] getMPIntBits()> --> <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>
<com.jcraft.jsch.Buffer: void getByte(byte[])> --> <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>
<com.jcraft.jsch.Buffer: byte[] getMPInt()> --> <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>
<com.jcraft.jsch.Buffer: byte[] getString()> --> <com.jcraft.jsch.Buffer: void getByte(byte[],int,int)>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.HostKeyRepository: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)>
<com.twofortyfouram.locale.MarketActivity: android.app.Dialog onCreateDialog(int)> --> <com.twofortyfouram.locale.MarketActivity: java.lang.String getPackageName()>
<com.twofortyfouram.locale.MarketActivity$2: void onClick(android.content.DialogInterface,int)> --> <com.twofortyfouram.locale.MarketActivity: java.lang.String getPackageName()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateProgressBars(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: boolean isIndeterminate()>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorage: java.io.InputStream getInputStream()> --> <org.apache.james.mime4j.storage.Storage: java.io.InputStream getInputStream()>
<org.apache.james.mime4j.storage.MultiReferenceStorage: java.io.InputStream getInputStream()> --> <org.apache.james.mime4j.storage.Storage: java.io.InputStream getInputStream()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorage: java.io.InputStream getInputStream()> --> <org.apache.james.mime4j.storage.Storage: java.io.InputStream getInputStream()>
<com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: java.io.InputStream access$200(com.jcraft.jsch.ChannelSftp)>
<org.apache.james.mime4j.message.StorageBinaryBody: void writeTo(java.io.OutputStream)> --> <org.apache.james.mime4j.codec.CodecUtil: void copy(java.io.InputStream,java.io.OutputStream)>
<org.apache.james.mime4j.codec.CodecUtil: void encodeBase64(java.io.InputStream,java.io.OutputStream)> --> <org.apache.james.mime4j.codec.CodecUtil: void copy(java.io.InputStream,java.io.OutputStream)>
<org.apache.james.mime4j.storage.AbstractStorageProvider: org.apache.james.mime4j.storage.Storage store(java.io.InputStream)> --> <org.apache.james.mime4j.codec.CodecUtil: void copy(java.io.InputStream,java.io.OutputStream)>
<org.apache.james.mime4j.message.StorageTextBody: void writeTo(java.io.OutputStream)> --> <org.apache.james.mime4j.codec.CodecUtil: void copy(java.io.InputStream,java.io.OutputStream)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.util.OrgUtils: void setTheme(android.app.Activity)>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.util.OrgUtils: void setTheme(android.app.Activity)>
<com.matburt.mobileorg.Gui.SearchActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.util.OrgUtils: void setTheme(android.app.Activity)>
<com.matburt.mobileorg.Gui.CertificateConflictActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.util.OrgUtils: void setTheme(android.app.Activity)>
<com.matburt.mobileorg.Gui.ViewActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.util.OrgUtils: void setTheme(android.app.Activity)>
<com.matburt.mobileorg.Settings.SettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.util.OrgUtils: void setTheme(android.app.Activity)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.util.OrgUtils: void setTheme(android.app.Activity)>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageWriter createResponseWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.HttpResponseWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getSecond()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int read(byte[],int,int)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int read(byte[])> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int read(byte[],int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()> --> <org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorage: void <init>(org.apache.james.mime4j.storage.Storage,java.lang.String,javax.crypto.spec.SecretKeySpec)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getFirstVisiblePosition()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isScrollableForAccessibility()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getFirstVisiblePosition()>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void UpdateLineColumn(char)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_8()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_10()>
<org.apache.james.mime4j.field.structured.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.structured.parser.TokenMgrError: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void SwitchTo(int)> --> <org.apache.james.mime4j.field.structured.parser.TokenMgrError: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void ReInit(org.apache.james.mime4j.field.datetime.parser.SimpleCharStream)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.message.BodyFactory: void <init>()> --> <org.apache.james.mime4j.storage.DefaultStorageProvider: org.apache.james.mime4j.storage.StorageProvider getInstance()>
<org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.storage.DefaultStorageProvider: org.apache.james.mime4j.storage.StorageProvider getInstance()>
<org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream,org.apache.james.mime4j.parser.MimeEntityConfig)> --> <org.apache.james.mime4j.storage.DefaultStorageProvider: org.apache.james.mime4j.storage.StorageProvider getInstance()>
<org.apache.james.mime4j.message.BodyFactory: void <init>(org.apache.james.mime4j.storage.StorageProvider)> --> <org.apache.james.mime4j.storage.DefaultStorageProvider: org.apache.james.mime4j.storage.StorageProvider getInstance()>
<org.apache.http.entity.mime.MultipartEntity: void consumeContent()> --> <org.apache.http.entity.mime.MultipartEntity: boolean isStreaming()>
<org.apache.http.message.HeaderGroup: void setHeaders(org.apache.http.Header[])> --> <org.apache.http.message.HeaderGroup: void clear()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getTopLevelNode(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getFileAliases(android.content.ContentResolver)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpProgressMonitor: void end()>
<com.jcraft.jsch.ChannelSftp$1: void close()> --> <com.jcraft.jsch.SftpProgressMonitor: void end()>
<com.jcraft.jsch.ChannelSftp$2: void close()> --> <com.jcraft.jsch.SftpProgressMonitor: void end()>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpProgressMonitor: void end()>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.james.mime4j.message.MessageWriter: void writeBody(org.apache.james.mime4j.message.Body,java.io.OutputStream)>
<org.apache.james.mime4j.message.MessageWriter: void writeEntity(org.apache.james.mime4j.message.Entity,java.io.OutputStream)> --> <org.apache.james.mime4j.message.MessageWriter: void writeBody(org.apache.james.mime4j.message.Body,java.io.OutputStream)>
<org.apache.james.mime4j.message.Entity: void setContentTransferEncoding(java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentTransferEncodingField contentTransferEncoding(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setOnClickListener(android.view.View$OnClickListener)>
<com.jcraft.jsch.ChannelSftp$LsEntry: void <init>(com.jcraft.jsch.ChannelSftp,java.lang.String,java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp$LsEntry: void setAttrs(com.jcraft.jsch.SftpATTRS)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void init()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void notifyDataSetInvalidated()>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void insertAll(java.util.ArrayList,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void notifyDataSetInvalidated()>
<org.apache.http.message.BasicHeaderElementIterator: void parseNextElement()> --> <org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void addListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<org.apache.james.mime4j.util.StringArrayMap: java.lang.String getValue(java.lang.String)> --> <org.apache.james.mime4j.util.StringArrayMap: java.lang.String asString(java.lang.Object)>
<com.actionbarsherlock.widget.ActivityChooserView: void onMeasure(int,int)> --> <com.actionbarsherlock.widget.ActivityChooserView: void setMeasuredDimension(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parseLine()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.Token jj_consume_token(int)>(1);     default: goto $r1 = $r0.<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: int[] jj_la1>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.http.entity.mime.HttpMultipart: void setMode(org.apache.http.entity.mime.HttpMultipartMode)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.app.ActionBar$Tab: android.view.View getCustomView()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: void writeConfig(int,android.content.Context,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: android.content.SharedPreferences getPreferences(int,android.content.Context)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: android.content.Intent getWidgetIntent(int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: android.content.SharedPreferences getPreferences(int,android.content.Context)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: void updateWidget(int,android.appwidget.AppWidgetManager,android.content.Context)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: android.content.SharedPreferences getPreferences(int,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList getAgendasTitles(android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void removeAgenda(int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: int addAgenda(android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void removeAgendaEntry(int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: com.matburt.mobileorg.Gui.Agenda.OrgAgenda getAgenda(int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void writeAgendaEntry(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder,int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void replaceAgenda(com.matburt.mobileorg.Gui.Agenda.OrgAgenda,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<org.apache.http.impl.io.ChunkedInputStream: void nextChunk()> --> <org.apache.http.impl.io.ChunkedInputStream: int getChunkSize()>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void <init>(android.view.View)>
<com.matburt.mobileorg.Services.CalendarComptabilityWrappers: void initCalendar()> --> <com.matburt.mobileorg.Services.CalendarComptabilityWrappers: void setupBaseUris()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> --> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: java.lang.Object[] getPort(com.jcraft.jsch.Session,int)>
<com.matburt.mobileorg.Services.CalendarComptabilityWrappers: void setupBaseUris()> --> <com.matburt.mobileorg.Services.CalendarComptabilityWrappers: java.lang.String getCalendarUriBase()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: int getMeasuredWidth()>
<oauth.signpost.AbstractOAuthConsumer: void <init>(java.lang.String,java.lang.String)> --> <oauth.signpost.signature.HmacSha1MessageSigner: void <init>()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void buildConsumer()> --> <oauth.signpost.signature.HmacSha1MessageSigner: void <init>()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStopAtPos(int,int)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getHeight()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.IcsLinearLayout createTabLayout()> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setSelectedNavigationItem(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getNavigationMode()>
<com.actionbarsherlock.internal.app.ActionBarImpl: int getNavigationMode()> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getNavigationMode()>
<com.actionbarsherlock.internal.app.ActionBarImpl: int getNavigationItemCount()> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getNavigationMode()>
<com.actionbarsherlock.internal.app.ActionBarImpl: int getSelectedNavigationIndex()> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getNavigationMode()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getNavigationMode()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.app.ActionBar getActionBar()>
<com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.app.ActionBar getActionBar()>
<com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.app.ActionBar getActionBar()>
<com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.app.ActionBar getActionBar()>
<com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.MenuInflater getMenuInflater()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.app.ActionBar getActionBar()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.app.ActionBar getActionBar()>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.ContentHandler: boolean startObject()>
<com.actionbarsherlock.internal.widget.ActionBarView: android.os.Parcelable onSaveInstanceState()> --> <com.actionbarsherlock.internal.widget.ActionBarView$SavedState: void <init>(android.os.Parcelable)>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.HostKeyRepository: java.lang.String getKnownHostsRepositoryID()>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void startMultipart(org.apache.james.mime4j.descriptor.BodyDescriptor)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStopStringLiteralDfa_2(int,long)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateDeadline(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void setupDates()> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateDeadline(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void restoreInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateDeadline(java.lang.String)>
<com.matburt.mobileorg.Services.TimeclockDialog$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Services.TimeclockDialog: void access$000(com.matburt.mobileorg.Services.TimeclockDialog)>
<com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment$1: void onTimeSet(android.widget.TimePicker,int,int)> --> <com.matburt.mobileorg.Services.TimeclockDialog: void access$000(com.matburt.mobileorg.Services.TimeclockDialog)>
<com.matburt.mobileorg.Services.TimeclockDialog$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Services.TimeclockDialog: void access$000(com.matburt.mobileorg.Services.TimeclockDialog)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry putFile(java.lang.String,java.io.InputStream,long,java.lang.String,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,java.lang.String,com.dropbox.client2.ProgressListener)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: void <init>(com.actionbarsherlock.internal.view.menu.MenuPopupHelper,com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<com.matburt.mobileorg.Gui.ViewFragment: void displayPayload(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String payloadToHTML(com.matburt.mobileorg.OrgData.OrgNode)>
<com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <org.apache.http.client.entity.UrlEncodedFormEntity: void <init>(java.util.List,java.lang.String)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitView(com.actionbarsherlock.internal.widget.ActionBarContainer)>
<org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)> --> <org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)> --> <org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()> --> <org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>
<org.apache.james.mime4j.message.Entity: void <init>(org.apache.james.mime4j.message.Entity)> --> <org.apache.james.mime4j.message.BodyCopier: org.apache.james.mime4j.message.Body copy(org.apache.james.mime4j.message.Body)>
<org.apache.james.mime4j.field.ContentDispositionField: java.lang.String getDispositionType()> --> <org.apache.james.mime4j.field.ContentDispositionField: void parse()>
<org.apache.james.mime4j.field.ContentDispositionField: boolean isInline()> --> <org.apache.james.mime4j.field.ContentDispositionField: void parse()>
<org.apache.james.mime4j.field.ContentDispositionField: java.lang.String getParameter(java.lang.String)> --> <org.apache.james.mime4j.field.ContentDispositionField: void parse()>
<org.apache.james.mime4j.field.ContentDispositionField: org.apache.james.mime4j.field.ParseException getParseException()> --> <org.apache.james.mime4j.field.ContentDispositionField: void parse()>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Map getParameters()> --> <org.apache.james.mime4j.field.ContentDispositionField: void parse()>
<org.apache.james.mime4j.field.ContentDispositionField: boolean isAttachment()> --> <org.apache.james.mime4j.field.ContentDispositionField: void parse()>
<org.apache.james.mime4j.field.ContentDispositionField: boolean isDispositionType(java.lang.String)> --> <org.apache.james.mime4j.field.ContentDispositionField: void parse()>
<org.apache.james.mime4j.field.address.Mailbox: int hashCode()> --> <org.apache.james.mime4j.field.address.Mailbox: java.lang.Object getCanonicalizedAddress()>
<org.apache.james.mime4j.field.address.Mailbox: boolean equals(java.lang.Object)> --> <org.apache.james.mime4j.field.address.Mailbox: java.lang.Object getCanonicalizedAddress()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void loginSSH()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard$3: void <init>(com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendLSTAT(byte[])>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void browseTo(java.lang.String)> --> <com.dropbox.client2.DropboxAPI$Entry: java.lang.String fileName()>
<com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void browseTo(java.lang.String)> --> <com.dropbox.client2.DropboxAPI$Entry: java.lang.String fileName()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: boolean isOverflowMenuShowing()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean isOverflowMenuShowing()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean isOverflowMenuShowing()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean showOverflowMenu()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean isOverflowMenuShowing()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: boolean isOverflowMenuShowing()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean isOverflowMenuShowing()>
<org.apache.http.impl.SocketHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionOutputBuffer createHttpDataTransmitter(java.net.Socket,int,org.apache.http.params.HttpParams)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin: android.view.View get(int)>
<com.actionbarsherlock.internal.widget.IcsSpinner: android.view.View makeAndAddView(int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin: android.view.View get(int)>
<org.apache.http.impl.io.HttpRequestParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.message.ParserCursor: void <init>(int,int)>
<org.apache.http.message.BufferedHeader: org.apache.http.HeaderElement[] getElements()> --> <org.apache.http.message.ParserCursor: void <init>(int,int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.message.ParserCursor: void <init>(int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.message.ParserCursor: void <init>(int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.message.ParserCursor: void <init>(int,int)>
<org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()> --> <org.apache.http.message.ParserCursor: void <init>(int,int)>
<org.apache.http.impl.io.HttpResponseParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.message.ParserCursor: void <init>(int,int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.message.ParserCursor: void <init>(int,int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.message.ParserCursor: void <init>(int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.message.ParserCursor: void <init>(int,int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.message.ParserCursor: void <init>(int,int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getHeight()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void setModifiable(boolean)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.apache.http.client.ClientProtocolException: java.lang.String toString()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void access$500(com.matburt.mobileorg.Gui.Capture.DateTableRow,int,int)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void setStartTimeCallback(int,int)>
<org.apache.http.impl.io.ChunkedInputStream: void close()> --> <org.apache.http.impl.io.ChunkedInputStream: void exhaustInputStream(java.io.InputStream)>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: com.dropbox.client2.DropboxAPI$Entry parseXDropboxMetadata(org.apache.http.HttpResponse)> --> <org.json.simple.JSONValue: java.lang.Object parse(java.lang.String)>
<org.apache.james.mime4j.util.MimeUtil: java.lang.String fold(java.lang.String,int)> --> <org.apache.james.mime4j.util.MimeUtil: int indexOfWsp(java.lang.String,int)>
<com.actionbarsherlock.widget.ActivityChooserView: void setActivityChooserModel(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean showPopup()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity$SynchServiceReceiver: void onReceive(android.content.Context,android.content.Intent)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void setSupportProgressBarVisibility(boolean)>
<com.jcraft.jsch.ChannelSftp$1: void write(int)> --> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
<com.jcraft.jsch.ChannelSftp$1: void write(byte[])> --> <com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateFile(java.lang.String,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: boolean doesFileExist(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgFile: void write(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: boolean doesFileExist(android.content.ContentResolver)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <init>(java.io.InputStream)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.OAuthProviderListener: void prepareSubmission(oauth.signpost.http.HttpRequest)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem addInternal(android.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem add(int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem addInternal(android.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem findItem(android.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem addInternal(android.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem add(int)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem addInternal(android.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem add(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem addInternal(android.view.MenuItem)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.lang.String language()> --> <org.apache.james.mime4j.field.language.parser.ParseException: void <init>()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.json.JSONObject: java.lang.String getString(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()> --> <org.json.JSONObject: java.lang.String getString(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)> --> <org.json.JSONObject: java.lang.String getString(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <org.json.JSONObject: java.lang.String getString(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <org.json.JSONObject: java.lang.String getString(java.lang.String)>
<com.dropbox.client2.DropboxAPI$BasicUploadRequest: com.dropbox.client2.DropboxAPI$Entry upload()> --> <com.dropbox.client2.exception.DropboxPartialFileException: void <init>(long)>
<com.dropbox.client2.DropboxAPI$ChunkedUploadRequest: com.dropbox.client2.DropboxAPI$ChunkedUploadResponse upload()> --> <com.dropbox.client2.exception.DropboxPartialFileException: void <init>(long)>
<com.dropbox.client2.DropboxAPI$ChunkedUploader: void upload(com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.exception.DropboxPartialFileException: void <init>(long)>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void copyStreamToOutput(java.io.OutputStream,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.exception.DropboxPartialFileException: void <init>(long)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setEmbeddedTabView(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setAllowCollapse(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void setTabContainer(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setAllowCollapse(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setAllowCollapse(boolean)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseContentDisposition(java.lang.String)> --> <org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: org.apache.james.mime4j.field.datetime.DateTime parseDate(java.lang.String)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuInflater: java.lang.Class[] access$400()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getAnimatedVisibility()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.KeyExchange: int getState()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.KeyExchange: int getState()>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setCustomView(android.view.View)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ScrollingTabContainerView access$800(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setText(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ScrollingTabContainerView access$800(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setContentDescription(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ScrollingTabContainerView access$800(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ScrollingTabContainerView access$800(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.matburt.mobileorg.Services.CalendarSyncService: void assimilateCalendar()> --> <com.matburt.mobileorg.Services.CalendarSyncService: android.content.ContentResolver getContentResolver()>
<com.matburt.mobileorg.Services.CalendarSyncService: void onCreate()> --> <com.matburt.mobileorg.Services.CalendarSyncService: android.content.ContentResolver getContentResolver()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.json.JSONException: java.lang.String toString()>
<com.matburt.mobileorg.Gui.Wizard.LocalDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Gui.Wizard.LocalDirectoryBrowser: java.lang.Object getDir(int)>
<org.apache.james.mime4j.message.Message: java.lang.String getSubject()> --> <org.apache.james.mime4j.field.UnstructuredField: java.lang.String getValue()>
<com.matburt.mobileorg.OrgData.OrgEdit: void setType(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgEdit$TYPE: com.matburt.mobileorg.OrgData.OrgEdit$TYPE valueOf(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setNumericShortcut(char)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setIcon(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemActionRequestChanged(com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setGroupVisible(int,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeItemAtInt(int,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setEnabled(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void clearAll()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setShortcutsVisible(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setShortcut(char,char)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemVisibleChanged(com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setAlphabeticShortcut(char)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setQwertyMode(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void clear()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setActionViewExpanded(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setCheckedInt(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setActionProvider(com.actionbarsherlock.view.ActionProvider)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setIcon(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setTitleCondensed(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeGroup(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setCheckable(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void clearHeader()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemsChanged(boolean)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setNextSelectedPositionInt(int)>
<org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.util.ByteSequence: int length()>
<org.apache.james.mime4j.parser.RawField: java.lang.String parseBody()> --> <org.apache.james.mime4j.util.ByteSequence: int length()>
<org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.util.ByteSequence: int length()>
<org.apache.james.mime4j.codec.CodecUtil: void encodeQuotedPrintableBinary(java.io.InputStream,java.io.OutputStream)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encode(java.io.InputStream,java.io.OutputStream)>
<org.apache.james.mime4j.codec.CodecUtil: void encodeQuotedPrintable(java.io.InputStream,java.io.OutputStream)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encode(java.io.InputStream,java.io.OutputStream)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.view.ActionProvider: void setSubUiVisibilityListener(com.actionbarsherlock.view.ActionProvider$SubUiVisibilityListener)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: com.dropbox.client2.android.AndroidAuthSession buildSession()> --> <com.dropbox.client2.android.AndroidAuthSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType,com.dropbox.client2.session.AccessTokenPair)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeAllTabs()> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void removeAllViews()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void access$000(com.matburt.mobileorg.Gui.Capture.PayloadFragment)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToEdit()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void buildConsumer()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void buildConsumer()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void buildConsumer()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void buildConsumer()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void buildConsumer()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void signRequest(org.apache.http.HttpRequest)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void buildConsumer()>
<com.jcraft.jsch.jgss.GSSContextKrb5: boolean isEstablished()> --> <org.ietf.jgss.GSSContext: boolean isEstablished()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setupEndValues()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupEndValue(java.lang.Object)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.IcsSpinner createSpinner()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void setLocalWindowSizeMax(int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_2_1(int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jj_save(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_2_2(int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jj_save(int,int)>
<com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> --> <com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageWriter createRequestWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.HttpRequestWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>
<org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader,org.json.simple.parser.ContainerFactory)> --> <org.json.simple.parser.JSONParser: int peekStatus(java.util.LinkedList)>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.JSONParser: int peekStatus(java.util.LinkedList)>
<com.twofortyfouram.locale.PackageUtilities: void <clinit>()> --> <com.twofortyfouram.locale.PackageUtilities: java.util.Set constructPackageSet()>
<com.actionbarsherlock.view.MenuInflater$MenuState: void addItem()> --> <com.actionbarsherlock.view.Menu: com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.HttpRequestFactory createHttpRequestFactory()> --> <org.apache.http.impl.DefaultHttpRequestFactory: void <init>()>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateFileFromAlias(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateFile(java.lang.String,java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateCaptureFile(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateFile(java.lang.String,java.lang.String,android.content.ContentResolver)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAddrSpec(org.apache.james.mime4j.field.address.DomainList,org.apache.james.mime4j.field.address.parser.ASTaddr_spec)> --> <org.apache.james.mime4j.field.address.Mailbox: void <init>(org.apache.james.mime4j.field.address.DomainList,java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)>
<com.dropbox.client2.jsonextract.JsonMap: java.util.Iterator iterator()> --> <com.dropbox.client2.jsonextract.JsonMap$WrapperIterator: void <init>(java.lang.String,java.util.Iterator,com.dropbox.client2.jsonextract.JsonMap$1)>
<org.apache.http.entity.mime.HttpMultipart$1: void <clinit>()> --> <org.apache.http.entity.mime.HttpMultipartMode: org.apache.http.entity.mime.HttpMultipartMode[] values()>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void epilogue(java.io.InputStream)>
<org.apache.james.mime4j.field.address.MailboxList: void print()> --> <org.apache.james.mime4j.field.address.Mailbox: java.lang.String toString()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: com.actionbarsherlock.internal.nineoldandroids.animation.Animator clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: com.actionbarsherlock.internal.nineoldandroids.animation.Animator clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: com.actionbarsherlock.internal.nineoldandroids.animation.Animator clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Animator: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: com.actionbarsherlock.internal.nineoldandroids.animation.Animator clone()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setNewTodo(java.lang.String)> --> <com.matburt.mobileorg.util.OrgNodeNotFoundException: void printStackTrace()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void collapseActionView()>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer$2: void start()> --> <com.matburt.mobileorg.Synchronizers.DropboxSynchronizer$2: void run()>
<com.jcraft.jsch.Session: void send_newkeys()> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.Session: void disconnect()> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Logger getLogger()>
<oauth.signpost.AbstractOAuthConsumer: void collectHeaderParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpRequest: java.lang.String getHeader(java.lang.String)>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.http.HttpRequest: java.lang.String getHeader(java.lang.String)>
<org.apache.http.impl.AbstractHttpClientConnection: boolean isStale()> --> <org.apache.http.impl.AbstractHttpClientConnection: boolean isOpen()>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.ChannelX11: void sendOpenFailure(int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem findItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.SubMenu getSubMenu()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.SubMenu getSubMenu()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.SubMenu getSubMenu()>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: void <init>(org.apache.http.HttpResponse,com.dropbox.client2.DropboxAPI$1)> --> <com.dropbox.client2.DropboxAPI$DropboxFileInfo: void <init>(org.apache.http.HttpResponse)>
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.protocol.BasicHttpProcessor copy()> --> <org.apache.http.protocol.BasicHttpProcessor: void <init>()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: android.os.Parcelable onSaveInstanceState()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: long getSelectedItemId()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: org.apache.james.mime4j.field.mimeversion.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: org.apache.james.mime4j.field.mimeversion.parser.ParseException generateParseException()>
<org.apache.james.mime4j.field.ContentTransferEncodingField: void <clinit>()> --> <org.apache.james.mime4j.field.ContentTransferEncodingField$1: void <init>()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.widget.ActivityChooserView$SetActivated: void invoke(android.view.View,boolean)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofObject(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: void <init>(float,java.lang.Object)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofObject(float,java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: void <init>(float,java.lang.Object)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: void <init>(float,java.lang.Object)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setShortcut(boolean,char)>
<org.apache.james.mime4j.message.Entity: void setFilename(java.lang.String)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Message: void setMailbox(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Message: void setSubject(java.lang.String)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Message: void setMailboxList(java.lang.String,java.util.Collection)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Entity: void setContentTransferEncoding(java.lang.String)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Message: void createMessageId(java.lang.String)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Message: void setDate(java.util.Date,java.util.TimeZone)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body,java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String,java.lang.String,long)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,java.util.Collection)> --> <org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)>
<com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread: void start()> --> <com.dropbox.client2.session.AbstractSession$DBClientConnManager: int getConnectionsInPool()>
<com.actionbarsherlock.internal.view.menu.ActionMenu: void setGroupCheckable(int,boolean,boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.view.MenuItem setCheckable(boolean)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void invalidateDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getScrollX()>
<com.actionbarsherlock.internal.widget.ActionBarView$HomeView: boolean dispatchHoverEvent(android.view.MotionEvent)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: boolean onHoverEvent(android.view.MotionEvent)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void showToast(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.DropboxSynchronizer$2: void <init>(com.matburt.mobileorg.Synchronizers.DropboxSynchronizer,android.os.Handler,java.lang.Runnable)>
<com.dropbox.client2.DropboxAPI: void assertAuthenticated()> --> <com.dropbox.client2.session.Session: boolean isLinked()>
<org.apache.james.mime4j.message.Entity: java.lang.String getMimeType()> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getMimeType(org.apache.james.mime4j.field.ContentTypeField,org.apache.james.mime4j.field.ContentTypeField)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setSubMenu(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_3()>
<org.apache.http.message.BasicListHeaderIterator: java.lang.Object next()> --> <org.apache.http.message.BasicListHeaderIterator: org.apache.http.Header nextHeader()>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)> --> <org.apache.http.ProtocolVersion: int getMinor()>
<org.apache.http.ProtocolVersion: int compareToVersion(org.apache.http.ProtocolVersion)> --> <org.apache.http.ProtocolVersion: int getMinor()>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.exception.OAuthCommunicationException: void <init>(java.lang.Exception)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.exception.OAuthCommunicationException: void <init>(java.lang.Exception)>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,int)> --> <org.apache.james.mime4j.field.address.parser.Node: void jjtSetParent(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)> --> <org.apache.james.mime4j.field.address.parser.Node: void jjtSetParent(org.apache.james.mime4j.field.address.parser.Node)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void dismiss()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean isShowing()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onGlobalLayout()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean isShowing()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: void onSaveInstanceState(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: void onSaveInstanceState(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: void onSaveInstanceState(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: void onSaveInstanceState(android.os.Bundle)>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parse()> --> <org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)>
<org.apache.http.impl.io.ChunkedInputStream: void parseTrailerHeaders()> --> <org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_0()>
<oauth.signpost.http.HttpParameters: void putMap(java.util.Map)> --> <oauth.signpost.http.HttpParameters: java.util.SortedSet put(java.lang.String,java.util.SortedSet)>
<oauth.signpost.http.HttpParameters: java.lang.Object put(java.lang.Object,java.lang.Object)> --> <oauth.signpost.http.HttpParameters: java.util.SortedSet put(java.lang.String,java.util.SortedSet)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void startHeader()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView$PreviousPageButtonListener: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView)>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UIKeyboardInteractive: java.lang.String[] promptKeyboardInteractive(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean[])>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UIKeyboardInteractive: java.lang.String[] promptKeyboardInteractive(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean[])>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTmailbox parseMailbox()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void parseMailbox0()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$8: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE[] values()>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate$1: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE[] values()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment$2: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE[] values()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void doCancel()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity$1: void <init>(com.matburt.mobileorg.Gui.Capture.EditActivity)>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.Gui.Capture.EditActivityController getController(android.content.Intent,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgNode getOrgNodeFromOlpPath(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParentSafe(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgNode getOrgNodeFromOlpPath(java.lang.String,android.content.ContentResolver)>
<org.apache.james.mime4j.parser.MimeEntity: java.io.InputStream getLimitedContentStream()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: long getMaxContentLen()>
<com.matburt.mobileorg.Services.TimeclockDialog: void <init>()> --> <com.matburt.mobileorg.Services.TimeclockDialog$3: void <init>(com.matburt.mobileorg.Services.TimeclockDialog)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void beginTransaction()>
<com.dropbox.client2.DropboxAPI$DeltaPage: com.dropbox.client2.DropboxAPI$DeltaPage extractFromJson(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonList: java.util.ArrayList extract(com.dropbox.client2.jsonextract.JsonExtractor)>
<com.dropbox.client2.jsonextract.JsonList$Extractor: java.util.List extract(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.jsonextract.JsonList: java.util.ArrayList extract(com.dropbox.client2.jsonextract.JsonExtractor)>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HeaderIterator: boolean hasNext()>
<org.apache.http.message.BasicTokenIterator: int findNext(int)> --> <org.apache.http.HeaderIterator: boolean hasNext()>
<org.apache.http.message.BasicHeaderElementIterator: void parseNextElement()> --> <org.apache.http.HeaderIterator: boolean hasNext()>
<org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()> --> <org.apache.http.HeaderIterator: boolean hasNext()>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HeaderIterator: boolean hasNext()>
<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)> --> <org.apache.http.HeaderIterator: boolean hasNext()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupValue(java.lang.Object,com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: void setValue(java.lang.Object)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: void setValue(java.lang.Object)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_2_2(int)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.SubMenu setHeaderTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderTitleInt(java.lang.CharSequence)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.Util: boolean glob(byte[],byte[])>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Util: boolean glob(byte[],byte[])>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> --> <com.jcraft.jsch.Util: boolean glob(byte[],byte[])>
<com.matburt.mobileorg.Plugin.SyncEditActivity: void finish()> --> <com.matburt.mobileorg.Plugin.SyncEditActivity: java.lang.String getString(int)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: java.lang.String getTags()> --> <com.matburt.mobileorg.Gui.Capture.TagTableRow: java.lang.String getSelection()>
<com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void setTranslationX(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setTranslationX(float)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void setTranslationX(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setTranslationX(float)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parseLine()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: int jj_ntk()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.lang.String value()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: int jj_ntk()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: int jj_ntk()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void onConfigurationChanged(android.content.res.Configuration)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void show()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()>
<com.matburt.mobileorg.OrgData.OrgNode: boolean hasChildren(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildChildrenUri(long)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getOrgNodeChildren(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildChildrenUri(long)>
<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)> --> <org.apache.http.ProtocolVersion: int compareToVersion(org.apache.http.ProtocolVersion)>
<org.apache.http.ProtocolVersion: boolean greaterEquals(org.apache.http.ProtocolVersion)> --> <org.apache.http.ProtocolVersion: int compareToVersion(org.apache.http.ProtocolVersion)>
<com.matburt.mobileorg.Gui.Theme.DefaultTheme: com.matburt.mobileorg.Gui.Theme.DefaultTheme getTheme(android.content.Context)> --> <com.matburt.mobileorg.Gui.Theme.DefaultTheme: void <init>()>
<com.matburt.mobileorg.Gui.Theme.MonoTheme: void <init>()> --> <com.matburt.mobileorg.Gui.Theme.DefaultTheme: void <init>()>
<com.matburt.mobileorg.Gui.Theme.WhiteTheme: void <init>()> --> <com.matburt.mobileorg.Gui.Theme.DefaultTheme: void <init>()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void announceStartSync()> --> <com.matburt.mobileorg.util.OrgUtils: void announceSyncStart(android.content.Context)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void jjCheckNAddTwoStates(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void jjCheckNAddStates(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void jjCheckNAddStates(int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void jjCheckNAdd(int)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: void access$100(com.matburt.mobileorg.Gui.Capture.LocationEntry)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token jjFillToken()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void saveEdits(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: void write(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setNewTodo(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void write(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerCreate: void saveEdits(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: void write(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit archiveNodeToSibling(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void write(android.content.ContentResolver)>
<com.matburt.mobileorg.Services.CalendarSyncService: void assimilateCalendar()> --> <com.matburt.mobileorg.OrgData.OrgNode: void write(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void displayNewUserDialogs()>
<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)> --> <org.apache.http.entity.ByteArrayEntity: void <init>(byte[])>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <com.dropbox.client2.RESTUtility: void updateClientProxy(org.apache.http.client.HttpClient,com.dropbox.client2.session.Session)>
<com.dropbox.client2.RESTUtility: org.apache.http.client.HttpClient updatedHttpClient(com.dropbox.client2.session.Session)> --> <com.dropbox.client2.RESTUtility: void updateClientProxy(org.apache.http.client.HttpClient,com.dropbox.client2.session.Session)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStopStringLiteralDfa_0(int,long)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onDetachedFromWindow()>
<com.actionbarsherlock.internal.view.menu.ActionMenu: boolean isShortcutKey(int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.internal.view.menu.ActionMenuItem findItemWithShortcut(int,android.view.KeyEvent)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performShortcut(int,android.view.KeyEvent,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.internal.view.menu.ActionMenuItem findItemWithShortcut(int,android.view.KeyEvent)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setObjectValues(java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setValues(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setIntValues(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setValues(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setFloatValues(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setValues(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofPropertyValuesHolder(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setValues(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])>
<com.matburt.mobileorg.Services.CalendarSyncService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.CalendarSyncService$1: void start()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void removeTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.app.ActionBar$Tab: int getPosition()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.app.ActionBar$Tab: int getPosition()>
<org.apache.http.impl.DefaultHttpClientConnection: void <init>()> --> <org.apache.http.impl.SocketHttpClientConnection: void <init>()>
<org.json.simple.parser.Yylex: int[] zzUnpackAttribute()> --> <org.json.simple.parser.Yylex: int zzUnpackAttribute(java.lang.String,int,int[])>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void updateMenuView(boolean)>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void updateMenuView(boolean)>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.Gui.Capture.EditActivityController getController(java.lang.String,long,java.lang.String,android.content.Intent,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void <init>(long,android.content.ContentResolver,java.lang.String)>
<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)> --> <org.apache.http.HttpException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.http.MethodNotSupportedException: void <init>(java.lang.String,java.lang.Throwable)> --> <org.apache.http.HttpException: void <init>(java.lang.String,java.lang.Throwable)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setBackgroundDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setPrimaryBackground(android.graphics.drawable.Drawable)>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.ContentHandler: boolean endArray()>
<com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList generateApplyEditNodes(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void setPayload(java.lang.String)>
<com.matburt.mobileorg.util.OrgUtils: com.matburt.mobileorg.OrgData.OrgNode getCaptureIntentContents(android.content.Intent)> --> <com.matburt.mobileorg.OrgData.OrgNode: void setPayload(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNode: void <init>(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: void setPayload(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNode: void addLogbook(long,long,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void setPayload(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNode: void addAutomaticTimestamp()> --> <com.matburt.mobileorg.OrgData.OrgNode: void setPayload(java.lang.String)>
<com.matburt.mobileorg.OrgData.CalendarEntry: com.matburt.mobileorg.OrgData.OrgNode convertToOrgNode()> --> <com.matburt.mobileorg.OrgData.OrgNode: void setPayload(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: com.matburt.mobileorg.OrgData.OrgNode getEditedNode()> --> <com.matburt.mobileorg.OrgData.OrgNode: void setPayload(java.lang.String)>
<com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> --> <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void local_part()> --> <org.apache.james.mime4j.field.address.parser.ASTlocal_part: void <init>(int)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void preamble(java.io.InputStream)>
<com.dropbox.client2.jsonextract.JsonThing: boolean isBoolean()> --> <com.dropbox.client2.jsonextract.JsonThing: boolean is(java.lang.Class)>
<com.dropbox.client2.jsonextract.JsonThing: boolean isMap()> --> <com.dropbox.client2.jsonextract.JsonThing: boolean is(java.lang.Class)>
<com.dropbox.client2.jsonextract.JsonThing: boolean isList()> --> <com.dropbox.client2.jsonextract.JsonThing: boolean is(java.lang.Class)>
<com.dropbox.client2.jsonextract.JsonThing: boolean isString()> --> <com.dropbox.client2.jsonextract.JsonThing: boolean is(java.lang.Class)>
<com.dropbox.client2.jsonextract.JsonThing: boolean isNumber()> --> <com.dropbox.client2.jsonextract.JsonThing: boolean is(java.lang.Class)>
<com.actionbarsherlock.internal.widget.IcsProgressBar$AccessibilityEventSender: void start()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$AccessibilityEventSender: void run()>
<com.actionbarsherlock.widget.ShareActionProvider: void setActivityChooserPolicyIfNeeded()> --> <com.actionbarsherlock.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: void <init>(com.actionbarsherlock.widget.ShareActionProvider,com.actionbarsherlock.widget.ShareActionProvider$1)>
<org.apache.http.impl.EnglishReasonPhraseCatalog: void <clinit>()> --> <org.apache.http.impl.EnglishReasonPhraseCatalog: void <init>()>
<com.matburt.mobileorg.Settings.SettingsActivity$1$1: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.content.ComponentName startService(android.content.Intent)>
<com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Channel: void setRemotePacketSize(int)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void setRemotePacketSize(int)>
<com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity,int)>
<com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity)> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity,int)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity,int)>
<com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity,int)>
<com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity,int)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity,int)>
<com.matburt.mobileorg.Gui.SearchActivity: void doSearch(java.lang.String)> --> <com.matburt.mobileorg.Gui.SearchActivity: java.lang.String getString(int)>
<com.jcraft.jsch.ChannelShell: void start()> --> <com.jcraft.jsch.ChannelShell: void run()>
<com.actionbarsherlock.widget.ShareActionProvider: android.view.View onCreateActionView()> --> <com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: com.matburt.mobileorg.util.SelectionBuilder getQuery(android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: java.lang.String getSelection(java.util.ArrayList,java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getTitle()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: java.lang.CharSequence getTitle()>
<com.actionbarsherlock.internal.view.StandaloneActionMode: java.lang.CharSequence getTitle()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: java.lang.CharSequence getTitle()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void name_addr()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void route()>();     default: goto $r3 = $r0.<org.apache.james.mime4j.field.address.parser.AddressListParser: int[] jj_la1>
<org.apache.james.mime4j.parser.AbstractEntity: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor,int,int,org.apache.james.mime4j.parser.MimeEntityConfig)> --> <org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.descriptor.MutableBodyDescriptor newBodyDescriptor(org.apache.james.mime4j.descriptor.BodyDescriptor)>
<org.apache.http.impl.io.IdentityOutputStream: void write(int)> --> <org.apache.http.io.SessionOutputBuffer: void write(int)>
<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)> --> <org.apache.http.io.SessionOutputBuffer: void write(int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void initAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void initAnimation()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void startAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void initAnimation()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void end()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void initAnimation()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setCurrentPlayTime(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void initAnimation()>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean access$600(com.actionbarsherlock.widget.ActivityChooserView)>
<org.apache.james.mime4j.field.address.Group: void <init>(java.lang.String,org.apache.james.mime4j.field.address.Mailbox[])> --> <org.apache.james.mime4j.field.address.Group: void <init>(java.lang.String,org.apache.james.mime4j.field.address.MailboxList)>
<org.apache.james.mime4j.field.address.Group: void <init>(java.lang.String,java.util.Collection)> --> <org.apache.james.mime4j.field.address.Group: void <init>(java.lang.String,org.apache.james.mime4j.field.address.MailboxList)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Address buildAddress(org.apache.james.mime4j.field.address.parser.ASTaddress)> --> <org.apache.james.mime4j.field.address.Group: void <init>(java.lang.String,org.apache.james.mime4j.field.address.MailboxList)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void start()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void run()>
<com.jcraft.jsch.ChannelSftp: void sendRENAME(byte[],byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])>
<com.jcraft.jsch.ChannelSftp: void sendSYMLINK(byte[],byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem findItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean hasSubMenu()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean hasSubMenu()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean hasSubMenu()>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Buffer: int getOffSet()>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Buffer: int getOffSet()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.ByteArrayBuffer,int,int)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: com.matburt.mobileorg.Gui.Capture.DateTableRow getDateTableRow(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.commonsware.cwac.merge.MergeSpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> --> <com.commonsware.cwac.merge.MergeSpinnerAdapter: java.util.List getPieces()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void invalidate()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void ping_u1_url(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void invalidate()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.apache.http.HttpResponse executeRequest(org.apache.http.client.methods.HttpUriRequest)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void invalidate()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>
<org.apache.http.message.BasicLineFormatter: void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)> --> <org.apache.http.StatusLine: java.lang.String getReasonPhrase()>
<com.dropbox.client2.exception.DropboxServerException: void <init>(org.apache.http.HttpResponse)> --> <org.apache.http.StatusLine: java.lang.String getReasonPhrase()>
<oauth.signpost.commonshttp.HttpResponseAdapter: java.lang.String getReasonPhrase()> --> <org.apache.http.StatusLine: java.lang.String getReasonPhrase()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setupTitle(java.lang.String,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.text.SpannableStringBuilder)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void formatLinks(com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.text.SpannableStringBuilder)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void refreshDisplay()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity$SynchServiceReceiver: void onReceive(android.content.Context,android.content.Intent)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void refreshDisplay()>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.ChannelSftp: void sendINIT()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void updateDrawableBounds(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingBottom()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingBottom()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.AddressList parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTaddress_list parseAddressList()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runTimeClockingService()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: java.lang.Object getItem(int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getItemViewType(int)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getItemViewType(int)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getItemViewType(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.Session: int getTimeout()>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> --> <com.jcraft.jsch.Session: int getTimeout()>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.AbstractOAuthConsumer: void completeOAuthParameters(oauth.signpost.http.HttpParameters)>
<org.json.simple.JSONValue: java.lang.Object parseWithException(java.io.Reader)> --> <org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader)>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader)>
<org.json.simple.JSONValue: java.lang.Object parse(java.io.Reader)> --> <org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void getAndParseFile(com.matburt.mobileorg.OrgData.OrgFile,com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader,android.content.Context)>
<com.matburt.mobileorg.Gui.FileDecryptionActivity: void onActivityResult(int,int,android.content.Intent)> --> <com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader,android.content.Context)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void initIndeterminateProgress()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void initProgress()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: com.actionbarsherlock.view.MenuInflater getMenuInflater()> --> <com.actionbarsherlock.view.MenuInflater: void <init>(android.content.Context)>
<com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.MenuInflater getMenuInflater()> --> <com.actionbarsherlock.view.MenuInflater: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: com.actionbarsherlock.view.MenuInflater getMenuInflater()> --> <com.actionbarsherlock.view.MenuInflater: void <init>(android.content.Context)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.util.List doParse()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: org.apache.james.mime4j.field.language.parser.Token jj_consume_token(int)>(1);     default: goto $r1 = $r0.<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: int[] jj_la1>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofKeyframe(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofKeyframe(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runDeleteNode()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode$1: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineActionMode)>
<org.apache.james.mime4j.util.ByteArrayBuffer: int indexOf(byte)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: int indexOf(byte,int,int)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getWidth()>
<com.jcraft.jsch.IdentityFile: boolean setPassphrase(byte[])> --> <com.jcraft.jsch.HASH: int getBlockSize()>
<com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> --> <com.jcraft.jsch.HASH: int getBlockSize()>
<org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void access$000(com.matburt.mobileorg.Gui.Capture.DateTableRow)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void remove()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setHomeButtonEnabled(boolean)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setHomeButtonEnabled(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setHomeButtonEnabled(boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void access$400(com.matburt.mobileorg.Gui.Outline.OutlineActionMode)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void deleteFileNode()>
<com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: void onStart(android.content.Intent,int)> --> <com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: android.widget.RemoteViews genUpdateDisplay(android.content.Context)>
<com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)>
<com.matburt.mobileorg.Settings.SettingsActivity: void init()> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void UpdateLineColumn(char)>
<com.matburt.mobileorg.util.SelectionBuilder: int update(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)> --> <com.matburt.mobileorg.util.SelectionBuilder: java.lang.String[] getSelectionArgs()>
<com.matburt.mobileorg.util.SelectionBuilder: int delete(android.database.sqlite.SQLiteDatabase)> --> <com.matburt.mobileorg.util.SelectionBuilder: java.lang.String[] getSelectionArgs()>
<com.matburt.mobileorg.util.SelectionBuilder: java.lang.String toString()> --> <com.matburt.mobileorg.util.SelectionBuilder: java.lang.String[] getSelectionArgs()>
<com.matburt.mobileorg.util.SelectionBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.util.SelectionBuilder: java.lang.String[] getSelectionArgs()>
<com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> --> <com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getFilenames(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>()>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateFileFromAlias(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>()>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.HashMap getFileChecksums(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>()>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getFileAliases(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>()>
<com.matburt.mobileorg.Services.CalendarComptabilityWrappers: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Services.CalendarComptabilityWrappers$intCalendars: void <init>(com.matburt.mobileorg.Services.CalendarComptabilityWrappers)>
<com.jcraft.jsch.ChannelShell: void start()> --> <com.jcraft.jsch.ChannelShell: void sendRequests()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicLineFormatter: void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicHeaderElement: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.HeaderGroup: org.apache.http.Header getCondensedHeader(java.lang.String)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer,int)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.HttpHost: java.lang.String toURI()> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicLineFormatter: void doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.util.CharArrayBuffer: void append(java.lang.Object)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.HttpHost: java.lang.String toHostString()> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.ParserCursor: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicLineParser: org.apache.http.Header parseHeader(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicNameValuePair: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicLineFormatter: void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.ProtocolVersion: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>
<com.matburt.mobileorg.Services.TimeclockDialog: void <init>()> --> <com.matburt.mobileorg.Services.TimeclockDialog$1: void <init>(com.matburt.mobileorg.Services.TimeclockDialog)>
<com.matburt.mobileorg.util.SelectionBuilder: int delete(android.database.sqlite.SQLiteDatabase)> --> <com.matburt.mobileorg.util.SelectionBuilder: void assertTable()>
<com.matburt.mobileorg.util.SelectionBuilder: int update(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)> --> <com.matburt.mobileorg.util.SelectionBuilder: void assertTable()>
<com.matburt.mobileorg.util.SelectionBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.util.SelectionBuilder: void assertTable()>
<com.google.gdata.util.common.base.UnicodeEscaper$1: java.lang.Appendable append(java.lang.CharSequence)> --> <com.google.gdata.util.common.base.UnicodeEscaper$1: java.lang.Appendable append(java.lang.CharSequence,int,int)>
<com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> --> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
<com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
<com.jcraft.jsch.HostKey: java.lang.String getKey()> --> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
<com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> --> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
<com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> --> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> --> <com.jcraft.jsch.Util: byte[] toBase64(byte[],int,int)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onCreatePanelMenu(int,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: android.content.Intent getIntent()>
<com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> --> <com.jcraft.jsch.HostKey: java.lang.String getHost()>
<com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> --> <com.jcraft.jsch.HostKey: java.lang.String getHost()>
<com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> --> <com.jcraft.jsch.HostKey: java.lang.String getHost()>
<com.matburt.mobileorg.Settings.SettingsActivity$1$1: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.content.Context getApplicationContext()>
<com.matburt.mobileorg.Settings.SettingsActivity: void populateSyncSources()> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.content.Context getApplicationContext()>
<com.matburt.mobileorg.Settings.SettingsActivity: void populateCalendarNames()> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.content.Context getApplicationContext()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchPostResume()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setShowHideAnimationEnabled(boolean)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchStop()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setShowHideAnimationEnabled(boolean)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentTypeField contentType(java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.field.Fields: boolean isValidMimeType(java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink share(java.lang.String)> --> <com.dropbox.client2.DropboxAPI$DropboxLink: void <init>(java.util.Map,com.dropbox.client2.DropboxAPI$1)>
<com.matburt.mobileorg.OrgData.OrgProvider: com.matburt.mobileorg.util.SelectionBuilder buildSelectionFromUri(android.net.Uri)> --> <com.matburt.mobileorg.OrgData.OrgContract$Files: java.lang.String getFilename(android.net.Uri)>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <javax.crypto.Mac: void init(java.security.Key)>
<com.jcraft.jsch.jce.HMACMD596: void init(byte[])> --> <javax.crypto.Mac: void init(java.security.Key)>
<com.jcraft.jsch.jce.HMACMD5: void init(byte[])> --> <javax.crypto.Mac: void init(java.security.Key)>
<com.jcraft.jsch.jce.HMACSHA1: void init(byte[])> --> <javax.crypto.Mac: void init(java.security.Key)>
<com.jcraft.jsch.jce.HMACSHA196: void init(byte[])> --> <javax.crypto.Mac: void init(java.security.Key)>
<com.matburt.mobileorg.Gui.ViewActivity: void setupRecursionSubmenu(com.actionbarsherlock.view.SubMenu)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setIcon(int)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setIcon(int)>
<com.matburt.mobileorg.Gui.ViewActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setIcon(int)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setIcon(int)>
<com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: void onPause()> --> <com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: void onResume()> --> <com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity,int)> --> <com.actionbarsherlock.ActionBarSherlock$Implementation: int dpi()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToView()> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void display(java.lang.String)>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpInetConnection: java.net.InetAddress getRemoteAddress()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Proxy: java.io.OutputStream getOutputStream()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: float getFraction()>
<com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> --> <org.ietf.jgss.GSSException: java.lang.String toString()>
<com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> --> <org.ietf.jgss.GSSException: java.lang.String toString()>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenRSA: byte[] getEP()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.Token getToken(int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: int jj_ntk()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState: void <clinit>()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState$1: void <init>()>
<com.jcraft.jsch.Channel: void close()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.ChannelSession: void run()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob_rsa()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob_dss()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_rsa(byte[])> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.Channel: void eof()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.ChannelDirectTCPIP: void run()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.Channel$1: void init()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.Channel: void sendOpenConfirmation()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.Buffer: void <init>()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.Channel: void sendOpenFailure(int)> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_dss(byte[])> --> <com.jcraft.jsch.Buffer: void <init>(int)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void announceDateModified(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void access$000(com.matburt.mobileorg.Gui.Capture.DatesFragment,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void announceDateModified(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void setupSpinner(java.lang.String)> --> <com.matburt.mobileorg.util.OrgUtils: void setupSpinner(android.widget.Spinner,java.util.ArrayList,java.lang.String)>
<com.matburt.mobileorg.util.OrgUtils: void setupSpinnerWithEmpty(android.widget.Spinner,java.util.ArrayList,java.lang.String)> --> <com.matburt.mobileorg.util.OrgUtils: void setupSpinner(android.widget.Spinner,java.util.ArrayList,java.lang.String)>
<com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void <init>(com.actionbarsherlock.widget.ActivityChooserView,com.actionbarsherlock.widget.ActivityChooserView$1)>
<org.apache.http.message.BasicHeaderValueFormatter: void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean)> --> <org.apache.http.message.BasicHeaderValueFormatter: boolean isSeparator(char)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.DateTime: void <init>(java.lang.String,int,int,int,int,int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: java.lang.ThreadLocal access$100()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: boolean sendEmptyMessageDelayed(int,long)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setCustomView(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void removeView(android.view.View)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Proxy: java.net.Socket getSocket()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setCustomView(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void requestLayout()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState$1: java.lang.Object[] newArray(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState$1: com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState[] newArray(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void setupFirstPage()>
<com.matburt.mobileorg.OrgData.OrgNodeParser: void <init>(java.util.ArrayList)> --> <com.matburt.mobileorg.OrgData.OrgNodeParser: java.lang.String getTodoRegex(java.util.ArrayList)>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorageOutputStream: void <init>(org.apache.james.mime4j.storage.StorageOutputStream,java.lang.String,javax.crypto.spec.SecretKeySpec)> --> <javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>
<com.matburt.mobileorg.Gui.SearchActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: android.widget.ListAdapter getAdapter()>
<org.json.simple.parser.JSONParser: int getPosition()> --> <org.json.simple.parser.Yylex: int getPosition()>
<com.actionbarsherlock.internal.widget.IcsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$SpinnerPopup: void setPromptText(java.lang.CharSequence)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setPrompt(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$SpinnerPopup: void setPromptText(java.lang.CharSequence)>
<com.matburt.mobileorg.Services.CalendarComptabilityWrappers: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Services.CalendarComptabilityWrappers$intEvents: void <init>(com.matburt.mobileorg.Services.CalendarComptabilityWrappers)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void animateToMode(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean hasEmbeddedTabs()>
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)> --> <org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.impl.client.DefaultHttpClient: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()> --> <com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuItemWrapper: boolean onMenuItemClick(android.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()> --> <com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getItemViewType(int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getCount()>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getCount()>
<com.actionbarsherlock.widget.ActivityChooserView: void updateAppearance()> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getCount()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int measureContentWidth()> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getCount()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <clinit>()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$2: void <init>()>
<org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.parser.MimeTokenStream createMaximalDescriptorStream()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: void setMaximalBodyDescriptor(boolean)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void getAndParseFile(com.matburt.mobileorg.OrgData.OrgFile,com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.OrgData.OrgFile: boolean isEncrypted()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void <init>(org.apache.http.client.methods.HttpUriRequest,org.apache.http.HttpResponse)> --> <com.dropbox.client2.DropboxAPI$DropboxFileInfo: void <init>(org.apache.http.HttpResponse,com.dropbox.client2.DropboxAPI$1)>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.ChannelSession: void sendRequests()> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.ChannelShell: void start()> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.ChannelSubsystem: void start()> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.jcraft.jsch.ChannelExec: void start()> --> <com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<org.apache.james.mime4j.field.DateTimeField: void parse()> --> <org.apache.james.mime4j.field.datetime.DateTime: java.util.Date getDate()>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Date parseDate(java.lang.String)> --> <org.apache.james.mime4j.field.datetime.DateTime: java.util.Date getDate()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.contenttype.parser.Token)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char[] GetSuffix(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char[] GetSuffix(int)>
<com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int)> --> <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)>
<org.apache.james.mime4j.field.address.parser.SimpleNode: java.lang.String toString(java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: java.lang.String toString()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: android.content.Intent getIntent()>
<com.jcraft.jsch.Buffer: byte[] getString(int[],int[])> --> <com.jcraft.jsch.Buffer: int getByte(int)>
<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)> --> <org.apache.http.HeaderElement: org.apache.http.NameValuePair getParameterByName(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNodeDate: void <init>(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodeDate: long getDayInUTC(long)>
<com.jcraft.jsch.IdentityFile: boolean setPassphrase(byte[])> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ChannelExec: void start()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void setBulkRequests(int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: void setTimeout(int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.KeyPairDSA: void generate(int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ChannelShell: void start()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ChannelSubsystem: void start()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: java.util.ArrayList getVisibleItems()>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: int access$800(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> --> <com.jcraft.jsch.KeyPairDSA: int writeSEQUENCE(byte[],int,int)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void postShowOverflowMenu()> --> <com.actionbarsherlock.internal.widget.AbsActionBarView$1: void <init>(com.actionbarsherlock.internal.widget.AbsActionBarView)>
<com.actionbarsherlock.app.SherlockActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.app.SherlockListActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void onDetachedFromWindow()>
<oauth.signpost.OAuth: void <clinit>()> --> <com.google.gdata.util.common.base.PercentEscaper: void <init>(java.lang.String,boolean)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: org.apache.james.mime4j.field.datetime.DateTime parseDate(java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime parseLine()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime parseAll()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void expandNodes(java.util.ArrayList)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void expand(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void collapseExpand(int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void expand(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: org.apache.james.mime4j.field.language.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: org.apache.james.mime4j.field.language.parser.ParseException generateParseException()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void removeAllTabs()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void cleanupTabs()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void setDividerDrawable(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void end()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void cancel()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void cancel()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void cancel()>
<com.actionbarsherlock.internal.widget.ActionBarView$SavedState: void <init>(android.os.Parcel,com.actionbarsherlock.internal.widget.ActionBarView$1)> --> <com.actionbarsherlock.internal.widget.ActionBarView$SavedState: void <init>(android.os.Parcel)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder getQueryFromSettings()> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: java.util.ArrayList getFileList()>
<org.apache.james.mime4j.field.UnstructuredField: void <clinit>()> --> <org.apache.james.mime4j.field.UnstructuredField$1: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <clinit>()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$5: void <init>()>
<org.apache.james.mime4j.field.address.Mailbox: org.apache.james.mime4j.field.address.Mailbox parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTmailbox parseMailbox()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runDeleteNode()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date date()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: java.lang.String year()>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParentSafe(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgFile: com.matburt.mobileorg.OrgData.OrgNode getOrgNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerEdit: boolean hasEdits(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void setupTodoAndParentId(long)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void restoreFromBundle(android.os.Bundle)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.lang.StringBuilder nodesToString(long,long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Services.TimeclockDialog: void onStart()> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgNode getOrgNodeFromFilename(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getOrgNodePathFromTopLevel(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void <init>(long,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: com.matburt.mobileorg.OrgData.OrgNode getParentOrgNode()> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Services.TimeclockService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.ViewActivity: void onStart()> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setNewTodo(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void setState(long[])> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerEdit: void <init>(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: boolean hasChildren(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateProgressBars(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setIndeterminate(boolean)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setIndeterminate(boolean)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: android.view.ViewGroup generateLayout()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setIndeterminate(boolean)>
<com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> --> <com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>
<com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>
<com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>
<com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: void setFLAGS(int)>
<com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList generateApplyEditNodes(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getPayload()>
<com.matburt.mobileorg.OrgData.OrgFileParser: void cloneChildren(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getPayload()>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.OrgData.OrgNodePayload getOrgNodePayload()> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getPayload()>
<com.matburt.mobileorg.OrgData.OrgNode: void <init>(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getPayload()>
<com.matburt.mobileorg.OrgData.OrgNode: void addLogbook(long,long,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getPayload()>
<com.matburt.mobileorg.OrgData.OrgNode: void addAutomaticTimestamp()> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getPayload()>
<com.matburt.mobileorg.OrgData.OrgEdit: void setOldValue(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getPayload()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard$3: void start()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void showToastRemote(java.lang.String)>
<com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: android.preference.Preference findPreference(java.lang.CharSequence)>
<com.actionbarsherlock.internal.app.ActionBarImpl: int getNavigationItemCount()> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.widget.SpinnerAdapter getDropdownAdapter()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.util.List doParse()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: int jj_ntk()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.lang.String language()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: int jj_ntk()>
<org.apache.http.entity.BasicHttpEntity: void writeTo(java.io.OutputStream)> --> <org.apache.http.entity.BasicHttpEntity: java.io.InputStream getContent()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_3()>
<org.apache.http.message.AbstractHttpMessage: boolean containsHeader(java.lang.String)> --> <org.apache.http.message.HeaderGroup: boolean containsHeader(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer$IntelligentX509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer$IntelligentX509TrustManager: boolean validateCertificate(int,java.lang.String)>
<org.apache.james.mime4j.message.MessageWriter: void writeBody(org.apache.james.mime4j.message.Body,java.io.OutputStream)> --> <org.apache.james.mime4j.message.MessageWriter: void writeEntity(org.apache.james.mime4j.message.Entity,java.io.OutputStream)>
<org.apache.james.mime4j.message.MessageWriter: void writeMultipart(org.apache.james.mime4j.message.Multipart,java.io.OutputStream)> --> <org.apache.james.mime4j.message.MessageWriter: void writeEntity(org.apache.james.mime4j.message.Entity,java.io.OutputStream)>
<org.apache.james.mime4j.message.Message: void writeTo(java.io.OutputStream)> --> <org.apache.james.mime4j.message.MessageWriter: void writeEntity(org.apache.james.mime4j.message.Entity,java.io.OutputStream)>
<com.actionbarsherlock.internal.widget.ActionBarView$SavedState$1: java.lang.Object createFromParcel(android.os.Parcel)> --> <com.actionbarsherlock.internal.widget.ActionBarView$SavedState$1: com.actionbarsherlock.internal.widget.ActionBarView$SavedState createFromParcel(android.os.Parcel)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$CreatedCopyRef createCopyRef(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonExtractionException: java.lang.String getMessage()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DeltaPage delta(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonExtractionException: java.lang.String getMessage()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void onFinishInflate()> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void <init>(android.content.Context)>
<com.actionbarsherlock.widget.ActivityChooserModel: void setDefaultActivity(int)> --> <com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)>
<com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)> --> <com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)>
<com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.ActionProvider getActionProvider()> --> <com.actionbarsherlock.internal.view.ActionProviderWrapper: com.actionbarsherlock.view.ActionProvider unwrap()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void setModifable(boolean)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void setModifiable(boolean)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void setupSettings(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)>
<com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> --> <com.jcraft.jsch.KnownHosts: int getType(byte[])>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Cipher: int getBlockSize()>
<com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> --> <com.jcraft.jsch.Cipher: int getBlockSize()>
<com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> --> <com.jcraft.jsch.Cipher: int getBlockSize()>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Cipher: int getBlockSize()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void checkFocus()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isInFilterMode()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void setFocusableInTouchMode(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isInFilterMode()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void updateEmptyStatus(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isInFilterMode()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void setFocusable(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isInFilterMode()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void bindTab(com.actionbarsherlock.app.ActionBar$Tab)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void incrementSecondaryProgressBy(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setSecondaryProgress(int)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setSecondaryProgress(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateProgressBars(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setSecondaryProgress(int)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setSecondaryProgress(int)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void access$000(com.matburt.mobileorg.Gui.Agenda.AgendasFragment,int)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void showBlockAgendaFragment(int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setAdapter(android.widget.Adapter)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setAdapter(android.widget.SpinnerAdapter)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setAdapter(android.widget.SpinnerAdapter)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setAdapter(android.widget.SpinnerAdapter)>
<com.actionbarsherlock.widget.ActivityChooserModel: void setHistoryMaxSize(int)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void pruneExcessiveHistoricalRecordsLocked()>
<com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void pruneExcessiveHistoricalRecordsLocked()>
<com.actionbarsherlock.widget.ActivityChooserModel: void access$900(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void pruneExcessiveHistoricalRecordsLocked()>
<com.matburt.mobileorg.OrgData.OrgProvider: com.matburt.mobileorg.util.SelectionBuilder buildSelectionFromUri(android.net.Uri)> --> <com.matburt.mobileorg.OrgData.OrgContract$Files: java.lang.String getId(android.net.Uri)>
<com.matburt.mobileorg.OrgData.OrgFile: long addFileNode(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$Files: java.lang.String getId(android.net.Uri)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: int findItemIndex(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: int getItemId()>
<com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)>
<com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[],byte[],byte[])> --> <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)>
<org.apache.http.impl.AbstractHttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)> --> <org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)>
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)> --> <org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)>
<com.actionbarsherlock.app.SherlockDialogFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()>
<com.actionbarsherlock.app.SherlockFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()>
<com.actionbarsherlock.app.SherlockListFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()>
<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)> --> <org.apache.http.io.SessionInputBuffer: int read(byte[],int,int)>
<org.apache.http.impl.io.IdentityInputStream: int read(byte[],int,int)> --> <org.apache.http.io.SessionInputBuffer: int read(byte[],int,int)>
<org.apache.http.impl.io.ChunkedInputStream: int read(byte[],int,int)> --> <org.apache.http.io.SessionInputBuffer: int read(byte[],int,int)>
<org.apache.james.mime4j.storage.DefaultStorageProvider: void initialize()> --> <org.apache.james.mime4j.storage.TempFileStorageProvider: void <init>()>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorageOutputStream: void <init>(org.apache.james.mime4j.storage.StorageOutputStream,java.lang.String,javax.crypto.spec.SecretKeySpec)> --> <org.apache.james.mime4j.storage.StorageOutputStream: void <init>()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: void <init>(org.apache.james.mime4j.storage.ThresholdStorageProvider)> --> <org.apache.james.mime4j.storage.StorageOutputStream: void <init>()>
<org.apache.james.mime4j.storage.MemoryStorageProvider$MemoryStorageOutputStream: void <init>()> --> <org.apache.james.mime4j.storage.StorageOutputStream: void <init>()>
<org.apache.james.mime4j.storage.TempFileStorageProvider$TempFileStorageOutputStream: void <init>(java.io.File)> --> <org.apache.james.mime4j.storage.StorageOutputStream: void <init>()>
<oauth.signpost.signature.SignatureBaseString: java.lang.String normalizeRequestUrl()> --> <oauth.signpost.http.HttpRequest: java.lang.String getRequestUrl()>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.http.HttpRequest: java.lang.String getRequestUrl()>
<oauth.signpost.signature.QueryStringSigningStrategy: java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpRequest: java.lang.String getRequestUrl()>
<oauth.signpost.AbstractOAuthConsumer: java.lang.String sign(java.lang.String)> --> <oauth.signpost.http.HttpRequest: java.lang.String getRequestUrl()>
<oauth.signpost.AbstractOAuthConsumer: void collectQueryParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpRequest: java.lang.String getRequestUrl()>
<org.apache.http.impl.io.ChunkedOutputStream: void flushCache()> --> <org.apache.http.io.SessionOutputBuffer: void writeLine(java.lang.String)>
<org.apache.http.impl.io.ChunkedOutputStream: void writeClosingChunk()> --> <org.apache.http.io.SessionOutputBuffer: void writeLine(java.lang.String)>
<org.apache.http.impl.io.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)> --> <org.apache.http.io.SessionOutputBuffer: void writeLine(java.lang.String)>
<com.matburt.mobileorg.Plugin.SyncEditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Plugin.SyncEditActivity: void setContentView(int)>
<oauth.signpost.AbstractOAuthProvider: void retrieveAccessToken(oauth.signpost.OAuthConsumer,java.lang.String)> --> <oauth.signpost.OAuthConsumer: java.lang.String getTokenSecret()>
<org.apache.james.mime4j.field.address.Builder: void addSpecials(java.lang.StringBuilder,org.apache.james.mime4j.field.address.parser.Token)> --> <org.apache.james.mime4j.field.address.Builder: void addSpecials(java.lang.StringBuilder,org.apache.james.mime4j.field.address.parser.Token)>
<org.apache.james.mime4j.field.address.Builder: java.lang.String buildString(org.apache.james.mime4j.field.address.parser.SimpleNode,boolean)> --> <org.apache.james.mime4j.field.address.Builder: void addSpecials(java.lang.StringBuilder,org.apache.james.mime4j.field.address.parser.Token)>
<com.matburt.mobileorg.Gui.SearchActivity: void doSearch(java.lang.String)> --> <com.matburt.mobileorg.Gui.SearchActivity: android.content.ContentResolver getContentResolver()>
<com.dropbox.client2.exception.DropboxServerException: void <init>(org.apache.http.HttpResponse,java.lang.Object)> --> <com.dropbox.client2.exception.DropboxServerException: void <init>(org.apache.http.HttpResponse)>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxServerException: void <init>(org.apache.http.HttpResponse)>
<com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState: void <clinit>()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState$1: void <init>()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setIcon(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void updateTextButtonVisibility()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void updateTextButtonVisibility()>
<com.actionbarsherlock.internal.widget.IcsSpinner: boolean performClick()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: boolean performClick()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getId()>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>
<org.apache.http.impl.entity.StrictContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>
<org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime parseLine()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel: android.os.Handler access$1100(com.actionbarsherlock.widget.ActivityChooserModel)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.entity.BasicHttpEntity: void setContentType(org.apache.http.Header)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int)> --> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean dismissPopupMenus()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean dismissPopupMenus()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean dismissPopupMenus()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void dismissPopupMenus()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean dismissPopupMenus()>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onLayout(boolean,int,int,int,int)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void cloneChildren(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildIdUri(java.lang.Long)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParent(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildIdUri(java.lang.Long)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void combineBlockAgendas()> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildIdUri(java.lang.Long)>
<com.matburt.mobileorg.OrgData.OrgNode: int updateNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildIdUri(java.lang.Long)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit archiveNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildIdUri(java.lang.Long)>
<com.matburt.mobileorg.OrgData.OrgFile: void addFile(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildIdUri(java.lang.Long)>
<com.matburt.mobileorg.OrgData.OrgFile: long removeFileOrgDataNodes(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildIdUri(java.lang.Long)>
<com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildIdUri(java.lang.Long)>
<com.matburt.mobileorg.OrgData.OrgNode: void deleteNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildIdUri(java.lang.Long)>
<org.apache.http.impl.io.ContentLengthInputStream: long skip(long)> --> <org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>
<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[])> --> <org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>
<com.jcraft.jsch.IO: void getByte(byte[])> --> <com.jcraft.jsch.IO: void getByte(byte[],int,int)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.IO: void getByte(byte[],int,int)>
<com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> --> <com.jcraft.jsch.IO: void getByte(byte[],int,int)>
<org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.james.mime4j.util.ByteSequence,java.io.OutputStream)> --> <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.james.mime4j.util.ByteArrayBuffer,java.io.OutputStream)>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.james.mime4j.util.ByteArrayBuffer,java.io.OutputStream)>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofInt(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofInt(float,int)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.StringBuilder addLogbook(java.lang.StringBuilder,long,long,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String formatClockEntry(long)>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpProgressMonitor: boolean count(long)>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> --> <com.jcraft.jsch.SftpProgressMonitor: boolean count(long)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpProgressMonitor: boolean count(long)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpProgressMonitor: boolean count(long)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpProgressMonitor: boolean count(long)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpProgressMonitor: boolean count(long)>
<com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> --> <com.jcraft.jsch.SftpProgressMonitor: boolean count(long)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: android.content.Context access$700(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.widget.ActivityChooserView: android.content.Context access$700(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.widget.ActivityChooserView: android.content.Context access$700(com.actionbarsherlock.widget.ActivityChooserView)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry$2: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: void access$400(com.matburt.mobileorg.Gui.Capture.LocationEntry,java.lang.String)>
<com.matburt.mobileorg.Services.CalendarSyncService$1: void run()> --> <com.matburt.mobileorg.Services.CalendarSyncService: com.matburt.mobileorg.Services.CalendarWrapper access$000(com.matburt.mobileorg.Services.CalendarSyncService)>
<com.matburt.mobileorg.Services.CalendarSyncService$1: void start()> --> <com.matburt.mobileorg.Services.CalendarSyncService: com.matburt.mobileorg.Services.CalendarWrapper access$000(com.matburt.mobileorg.Services.CalendarSyncService)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void showToastRemote(java.lang.String)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$UIHandler: android.os.Message obtainMessage(int)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener: com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener withFinalVisibility(int)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileOverwriteRequest(java.lang.String,java.io.InputStream,long,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,java.lang.String,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void start()> --> <org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>
<com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Session$GlobalRequestReply: void <init>(com.jcraft.jsch.Session,com.jcraft.jsch.Session$1)>
<org.apache.james.mime4j.field.address.parser.ASTmailbox: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<org.apache.james.mime4j.field.address.parser.ASTname_addr: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<org.apache.james.mime4j.field.address.parser.ASTdomain: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<org.apache.james.mime4j.field.address.parser.ASTlocal_part: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<org.apache.james.mime4j.field.address.parser.ASTaddress_list: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<org.apache.james.mime4j.field.address.parser.ASTroute: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<org.apache.james.mime4j.field.address.parser.ASTgroup_body: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<org.apache.james.mime4j.field.address.parser.ASTaddr_spec: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<org.apache.james.mime4j.field.address.parser.ASTaddress: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<org.apache.james.mime4j.field.address.parser.ASTphrase: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<org.apache.james.mime4j.field.address.parser.ASTangle_addr: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runDeleteNode()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode$2: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineActionMode)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void setupFirstPage()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxLogin()>
<com.jcraft.jsch.Session: void delPortForwardingL(java.lang.String,int)> --> <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)>
<com.commonsware.cwac.merge.MergeAdapter: void addViews(java.util.List,boolean)> --> <com.commonsware.cwac.sacklist.SackOfViewsAdapter: void <init>(java.util.List)>
<com.commonsware.cwac.merge.MergeAdapter$EnabledSackAdapter: void <init>(java.util.List)> --> <com.commonsware.cwac.sacklist.SackOfViewsAdapter: void <init>(java.util.List)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard$2: void start()> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.lang.String testConnection(java.lang.String,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> --> <com.jcraft.jsch.Buffer: void putLong(long)>
<com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> --> <com.jcraft.jsch.Buffer: void putLong(long)>
<com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void putLong(long)>
<oauth.signpost.OAuth: oauth.signpost.http.HttpParameters decodeForm(java.lang.String)> --> <oauth.signpost.OAuth: boolean isEmpty(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.ChannelSftp$2: void <init>(com.jcraft.jsch.ChannelSftp,long,com.jcraft.jsch.SftpProgressMonitor,byte[])>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onCheckedChanged(android.widget.RadioGroup,int)> --> <com.matburt.mobileorg.Gui.Wizard.WizardActivity: com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE getWizardType(int)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void access$1300(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getLastVisiblePosition()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isScrollableForAccessibility()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getLastVisiblePosition()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void updateEmptyStatus(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getRight()>
<org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,org.apache.james.mime4j.util.ByteSequence,int,int)>
<org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(org.apache.james.mime4j.util.ByteSequence,int,int)> --> <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,org.apache.james.mime4j.util.ByteSequence,int,int)>
<org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,org.apache.james.mime4j.util.ByteSequence,int,int)>
<org.apache.http.impl.io.HttpRequestParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.util.CharArrayBuffer: int length()>
<org.apache.http.message.BufferedHeader: org.apache.http.HeaderElement[] getElements()> --> <org.apache.http.util.CharArrayBuffer: int length()>
<org.apache.http.message.BasicLineParser: boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: int length()>
<org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()> --> <org.apache.http.util.CharArrayBuffer: int length()>
<org.apache.http.impl.io.HttpResponseParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.util.CharArrayBuffer: int length()>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: int length()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.CharArrayBuffer: int length()>
<org.apache.http.message.BufferedHeader: java.lang.String getValue()> --> <org.apache.http.util.CharArrayBuffer: int length()>
<org.apache.http.impl.io.ChunkedInputStream: int getChunkSize()> --> <org.apache.http.util.CharArrayBuffer: int length()>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <com.dropbox.client2.session.AbstractSession$1: void <init>(com.dropbox.client2.session.AbstractSession)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void finish()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void closeMode()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token jjFillToken()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.JSchAuthCancelException: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setGravity(int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void requestLayout()>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setContentDescription(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setContentDescription(java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard getWizard(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE,com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getRight()>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String nodeToHTMLRecursive(com.matburt.mobileorg.OrgData.OrgNode,int)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void cloneChildren(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void combineBlockAgendas()> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void expand(int)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.lang.StringBuilder nodesToString(long,long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getChild(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: java.lang.String getTodo(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void addChild(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildrenStringArray(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildren(android.content.ContentResolver)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.OAuthConsumer: java.lang.String getConsumerKey()>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream)> --> <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor)> --> <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>
<com.actionbarsherlock.ActionBarSherlock: boolean callbackPrepareOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock$OnPreparePanelListener: boolean onPreparePanel(int,android.view.View,com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void putUrlFile(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void saveConfig()> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void finish()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void cancelConfig()> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void finish()>
<com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.HostKey: java.lang.String getType()>
<com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> --> <com.jcraft.jsch.HostKey: java.lang.String getType()>
<com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> --> <com.jcraft.jsch.HostKey: java.lang.String getType()>
<org.apache.james.mime4j.codec.CodecUtil: void encodeBase64(java.io.InputStream,java.io.OutputStream)> --> <org.apache.james.mime4j.codec.Base64OutputStream: void close()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void <init>(android.content.Context,com.dropbox.client2.DropboxAPI)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void browseTo(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void browseTo(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.ArrayList getDates(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getDeadline()>
<com.matburt.mobileorg.OrgData.OrgNodePayload: void cleanPayload()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getDeadline()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void setupDates()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getDeadline()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void bindItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,com.actionbarsherlock.internal.view.menu.MenuView$ItemView)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setItemInvoker(com.actionbarsherlock.internal.view.menu.MenuBuilder$ItemInvoker)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.parser.MimeEntity: java.lang.String stateToString(int)>
<org.apache.james.mime4j.parser.MimeEntity: void skipHeader(java.lang.String)> --> <org.apache.james.mime4j.parser.MimeEntity: java.lang.String stateToString(int)>
<org.apache.james.mime4j.parser.MimeEntity: java.io.InputStream getContentStream()> --> <org.apache.james.mime4j.parser.MimeEntity: java.lang.String stateToString(int)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void initProgressBar()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: void write0(byte[],int,int)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void append(byte[],int,int)>
<org.apache.james.mime4j.storage.MemoryStorageProvider$MemoryStorageOutputStream: void write0(byte[],int,int)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void append(byte[],int,int)>
<org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.nio.charset.Charset,java.lang.String)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void append(byte[],int,int)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void append(byte[],int,int)>
<org.apache.http.entity.mime.HttpMultipart: org.apache.james.mime4j.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void append(byte[],int,int)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void append(byte[],int,int)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void append(byte[],int,int)>
<com.actionbarsherlock.widget.ShareActionProvider: void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu)> --> <com.actionbarsherlock.view.SubMenu: com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setAdapter(android.widget.SpinnerAdapter)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void resetList()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.InputStream,java.lang.String)>
<com.jcraft.jsch.KeyPair: void setPassphrase(java.lang.String)> --> <com.jcraft.jsch.KeyPair: void setPassphrase(byte[])>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem findItem(int)> --> <com.actionbarsherlock.view.SubMenu: com.actionbarsherlock.view.MenuItem findItem(int)>
<com.matburt.mobileorg.Gui.Wizard.WizardView$PageSwipeDetector: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,com.matburt.mobileorg.Gui.Wizard.WizardView$1)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView$PageSwipeDetector: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView)>
<com.dropbox.client2.session.RequestTokenPair: void <init>(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.AccessTokenPair: void <init>(java.lang.String,java.lang.String)>
<com.dropbox.client2.session.WebAuthSession: java.util.Map setUpToken(java.lang.String)> --> <com.dropbox.client2.session.AccessTokenPair: void <init>(java.lang.String,java.lang.String)>
<com.dropbox.client2.android.AndroidAuthSession: java.lang.String finishAuthentication()> --> <com.dropbox.client2.session.AccessTokenPair: void <init>(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: com.dropbox.client2.android.AndroidAuthSession buildSession()> --> <com.dropbox.client2.session.AccessTokenPair: void <init>(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersHorizontal(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getPaddingRight()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawHorizontalDivider(android.graphics.Canvas,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getPaddingRight()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void ReInit(java.io.InputStream,java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void writeAgendaBlockEntry(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder,int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void removeAgenda(int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void removeBlockAgendaEntry(int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: int addBlockAgenda(android.content.Context,java.lang.String)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void replaceAgenda(com.matburt.mobileorg.Gui.Agenda.BlockAgenda,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.address.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)> --> <org.apache.james.mime4j.field.address.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.AbstractOAuthProvider: void closeConnection(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse)>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: void putByte(byte[],int,int)>
<com.jcraft.jsch.Buffer: void putByte(byte[])> --> <com.jcraft.jsch.Buffer: void putByte(byte[],int,int)>
<com.jcraft.jsch.Buffer: void putString(byte[],int,int)> --> <com.jcraft.jsch.Buffer: void putByte(byte[],int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void parseLine()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>(1);     default: goto $r1 = $r0.<org.apache.james.mime4j.field.address.parser.AddressListParser: int[] jj_la1>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: com.matburt.mobileorg.Gui.Capture.EditActivityController getController()> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig$EditActivityControllerCaptureWidget: void <init>(com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void ping_u1_url(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void signRequest(org.apache.http.HttpRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void signRequest(org.apache.http.HttpRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void signRequest(org.apache.http.HttpRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.apache.http.HttpResponse executeRequest(org.apache.http.client.methods.HttpUriRequest)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void signRequest(org.apache.http.HttpRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void signRequest(org.apache.http.HttpRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void signRequest(org.apache.http.HttpRequest)>
<com.actionbarsherlock.view.MenuInflater$MenuState: com.actionbarsherlock.view.SubMenu addSubMenuItem()> --> <com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void addItem()> --> <com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ParseException generateParseException()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jj_add_error_token(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_scan_token(int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jj_add_error_token(int,int)>
<org.apache.james.mime4j.util.MimeUtil: java.lang.String createUniqueMessageId(java.lang.String)> --> <org.apache.james.mime4j.util.MimeUtil: int nextCounterValue()>
<org.apache.james.mime4j.util.MimeUtil: java.lang.String createUniqueBoundary()> --> <org.apache.james.mime4j.util.MimeUtil: int nextCounterValue()>
<oauth.signpost.commonshttp.CommonsHttpOAuthProvider: oauth.signpost.http.HttpResponse sendRequest(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.commonshttp.HttpResponseAdapter: void <init>(org.apache.http.HttpResponse)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener: void onViewDetachedFromWindow(android.view.View)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener: void onViewDetachedFromWindow(android.view.View)>
<com.dropbox.client2.session.WebAuthSession: com.dropbox.client2.session.WebAuthSession$WebAuthInfo getAuthInfo(java.lang.String)> --> <com.dropbox.client2.session.WebAuthSession$WebAuthInfo: void <init>(java.lang.String,com.dropbox.client2.session.RequestTokenPair,com.dropbox.client2.session.WebAuthSession$1)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setChecked(boolean)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void setBackgroundResource(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: java.lang.String GetImage()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: java.lang.String GetImage()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runArchiveNode(boolean)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode$4: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineActionMode,boolean)>
<com.jcraft.jsch.ChannelX11: void <init>()> --> <com.jcraft.jsch.ChannelX11: void setLocalWindowSize(int)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)> --> <org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>
<com.jcraft.jsch.jcraft.HMACSHA196: void doFinal(byte[],int)> --> <com.jcraft.jsch.jcraft.HMACSHA1: void doFinal(byte[],int)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getOrgNodeChildren(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList orgDataCursorToArrayList(android.database.Cursor)>
<com.matburt.mobileorg.Gui.SearchActivity: void doSearch(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList orgDataCursorToArrayList(android.database.Cursor)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: void setupFirstPage()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: android.view.View createWebDAVConfig()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void MoreLexicalActions()>
<org.apache.http.protocol.HttpService: void <init>(org.apache.http.protocol.HttpProcessor,org.apache.http.ConnectionReuseStrategy,org.apache.http.HttpResponseFactory)> --> <org.apache.http.protocol.HttpService: void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)>
<org.apache.james.mime4j.field.Fields: boolean isValidDispositionType(java.lang.String)> --> <org.apache.james.mime4j.codec.EncoderUtil: boolean isToken(java.lang.String)>
<org.apache.james.mime4j.field.Fields: boolean isValidMimeType(java.lang.String)> --> <org.apache.james.mime4j.codec.EncoderUtil: boolean isToken(java.lang.String)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeHeaderParameter(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.codec.EncoderUtil: boolean isToken(java.lang.String)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)> --> <org.apache.http.message.BasicLineFormatter: void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void write_ext(byte[],int,int)>
<oauth.signpost.AbstractOAuthConsumer: void setTokenWithSecret(java.lang.String,java.lang.String)> --> <oauth.signpost.signature.OAuthMessageSigner: void setTokenSecret(java.lang.String)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseMD5(java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void refresh()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setSelection(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void ensureCheckedItemVisible()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setSelection(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onRestoreInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setSelection(int)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$3: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: android.webkit.WebView access$400(com.matburt.mobileorg.Gui.Capture.PayloadFragment)>
<org.apache.james.mime4j.message.Message: void setFrom(org.apache.james.mime4j.field.address.Mailbox[])> --> <org.apache.james.mime4j.message.Message: void setMailboxList(java.lang.String,org.apache.james.mime4j.field.address.Mailbox[])>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: void setShortcutsVisible(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setShortcutsVisible(boolean)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void invalidateOptionsMenu()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void invalidateOptionsMenu()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void invalidateOptionsMenu()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_1(int,int)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void saveCurrentPage()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: android.content.Context getContext()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void hideKeyboard()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: android.content.Context getContext()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: android.content.Context getContext()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void restoreLastPage()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: android.content.Context getContext()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void addPage(int)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: android.content.Context getContext()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: java.lang.Object getAnimatedValue()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.Object getAnimatedValue()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.Object getAnimatedValue()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setAnimatedValue(java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.Object getAnimatedValue()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: android.view.View getChildAt(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runCaptureActivity(long,android.content.Context)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runCaptureActivity(long,android.content.Context)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void phrase()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void name_addr()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void phrase()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: void init()>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: void init()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: void init()>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_dss(byte[])> --> <com.jcraft.jsch.SignatureDSA: void init()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.NullWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.jcraft.jsch.JSch: void removeIdentity(java.lang.String)> --> <com.jcraft.jsch.Identity: java.lang.String getName()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Identity: java.lang.String getName()>
<com.jcraft.jsch.JSch: java.util.Vector getIdentityNames()> --> <com.jcraft.jsch.Identity: java.lang.String getName()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Identity: java.lang.String getName()>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setScaleX(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void prepareForUpdate()>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setTranslationX(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void prepareForUpdate()>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setTranslationY(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void prepareForUpdate()>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setScaleY(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void prepareForUpdate()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void checkCloseActionMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void dismissPopupMenus()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void setupFirstPage()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuLogin()>
<com.matburt.mobileorg.Gui.ViewActivity: void onStart()> --> <com.matburt.mobileorg.Gui.ViewActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setShowFooterView(boolean)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.contentdisposition.parser.Token)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.impl.io.ContentLengthInputStream: void <init>(org.apache.http.io.SessionInputBuffer,long)>
<com.matburt.mobileorg.OrgData.OrgContract$Edits: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgContract: android.net.Uri access$000()>
<com.matburt.mobileorg.OrgData.OrgContract$OrgData: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgContract: android.net.Uri access$000()>
<com.matburt.mobileorg.OrgData.OrgContract$Files: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgContract: android.net.Uri access$000()>
<com.matburt.mobileorg.OrgData.OrgContract$Todos: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgContract: android.net.Uri access$000()>
<com.matburt.mobileorg.OrgData.OrgContract$Tags: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgContract: android.net.Uri access$000()>
<com.matburt.mobileorg.OrgData.OrgContract$Priorities: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgContract: android.net.Uri access$000()>
<com.matburt.mobileorg.OrgData.OrgContract$Search: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgContract: android.net.Uri access$000()>
<com.matburt.mobileorg.Services.SyncService$1: void start()> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void close()>
<com.matburt.mobileorg.Gui.FileDecryptionActivity: void onActivityResult(int,int,android.content.Intent)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void close()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void setContentView(int)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.entity.BasicHttpEntity: void setChunked(boolean)>
<org.apache.http.message.AbstractHttpMessage: void setHeaders(org.apache.http.Header[])> --> <org.apache.http.message.HeaderGroup: void setHeaders(org.apache.http.Header[])>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.james.mime4j.message.BodyPart: org.apache.james.mime4j.message.Body getBody()>
<org.apache.http.entity.mime.HttpMultipart: long getTotalLength()> --> <org.apache.james.mime4j.message.BodyPart: org.apache.james.mime4j.message.Body getBody()>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofObject(java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofObject(float,java.lang.Object)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void requestWindowFeature(long)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: void updateWidget(int,android.appwidget.AppWidgetManager,android.content.Context)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: android.content.Intent getWidgetIntent(int,android.content.Context)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void readItem(android.util.AttributeSet)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: char getShortcut(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.EditActivity$2: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void setResult(int)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void setResult(int)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void doCancel()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void setResult(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: void <init>(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,com.actionbarsherlock.internal.widget.ScrollingTabContainerView$1)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: void <init>(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$CreatedCopyRef createCopyRef(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonThing: void <init>(java.lang.Object)>
<com.dropbox.client2.jsonextract.JsonList: java.util.ArrayList extract(com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonThing: void <init>(java.lang.Object)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DeltaPage delta(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonThing: void <init>(java.lang.Object)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getPaddingRight()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: boolean isFull()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(int)> --> <org.apache.http.util.ByteArrayBuffer: boolean isFull()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void start()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void run()>
<com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void <init>(com.actionbarsherlock.widget.ActivityChooserModel$1)> --> <com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void <init>()>
<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader)> --> <org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>
<org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()> --> <org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>
<com.jcraft.jsch.ChannelSubsystem: void init()> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
<com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream,boolean)> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
<com.jcraft.jsch.ChannelDirectTCPIP: void setOutputStream(java.io.OutputStream)> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
<com.jcraft.jsch.ChannelExec: void init()> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
<com.jcraft.jsch.ChannelShell: void init()> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: boolean access$000(com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parseLine()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parse()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parseAll()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parse()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: int getWidth()>
<com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void setVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void setAnimation(android.view.animation.Animation)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: java.lang.Object getItem(int)>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatParameters(org.apache.http.NameValuePair[],boolean,org.apache.http.message.HeaderValueFormatter)> --> <org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setup(com.matburt.mobileorg.OrgData.OrgNode,boolean,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.content.ContentResolver)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void applyLevelIndentation(long,android.text.SpannableStringBuilder)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.DomainList buildRoute(org.apache.james.mime4j.field.address.parser.ASTroute)> --> <org.apache.james.mime4j.field.address.parser.ASTroute: int jjtGetNumChildren()>
<org.apache.http.impl.DefaultHttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)> --> <org.apache.http.impl.DefaultHttpResponseFactory: java.util.Locale determineLocale(org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.DefaultHttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext)> --> <org.apache.http.impl.DefaultHttpResponseFactory: java.util.Locale determineLocale(org.apache.http.protocol.HttpContext)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int getPaddingTop()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int getPaddingTop()>
<org.apache.james.mime4j.util.StringArrayMap: java.util.Enumeration getValueEnum(java.lang.String)> --> <org.apache.james.mime4j.util.StringArrayMap: java.util.Enumeration asStringEnum(java.lang.Object)>
<org.apache.james.mime4j.storage.MemoryStorageProvider: org.apache.james.mime4j.storage.StorageOutputStream createStorageOutputStream()> --> <org.apache.james.mime4j.storage.MemoryStorageProvider$MemoryStorageOutputStream: void <init>(org.apache.james.mime4j.storage.MemoryStorageProvider$1)>
<com.actionbarsherlock.app.SherlockActivity: void setSupportProgressBarVisibility(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarVisibility(boolean)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setSupportProgressBarVisibility(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarVisibility(boolean)>
<com.actionbarsherlock.app.SherlockListActivity: void setSupportProgressBarVisibility(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarVisibility(boolean)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setSupportProgressBarVisibility(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarVisibility(boolean)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setSupportProgressBarVisibility(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarVisibility(boolean)>
<org.apache.james.mime4j.field.AddressListField: void parse()> --> <org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.AddressList parse(java.lang.String)>
<org.apache.james.mime4j.field.address.AddressList: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.AddressList parse(java.lang.String)>
<org.apache.james.mime4j.field.MailboxField: void parse()> --> <org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.AddressList parse(java.lang.String)>
<org.apache.james.mime4j.field.MailboxListField: void parse()> --> <org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.AddressList parse(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setInterpolator(android.content.Context,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setInterpolator(android.view.animation.Interpolator)>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Wizard.WizardActivity: android.view.View findViewById(int)>
<org.apache.james.mime4j.field.MailboxField: void parse()> --> <org.apache.james.mime4j.field.MailboxField: java.lang.String getBody()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void route()> --> <org.apache.james.mime4j.field.address.parser.ASTroute: void <init>(int)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.ArrayList getDates(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getTimestamp()>
<com.matburt.mobileorg.OrgData.OrgNodePayload: void cleanPayload()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getTimestamp()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void setupDates()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getTimestamp()>
<com.matburt.mobileorg.Services.SyncService: void runSynchronizer()> --> <com.matburt.mobileorg.Services.SyncService$1: void <init>(com.matburt.mobileorg.Services.SyncService,com.matburt.mobileorg.Synchronizers.Synchronizer,com.matburt.mobileorg.OrgData.OrgFileParser,boolean,com.matburt.mobileorg.OrgData.OrgDatabase)>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer$1: java.lang.Object next()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer$1: java.lang.Byte next()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.SubMenu getSubMenu()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.SubMenu getSubMenu()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.SubMenu getSubMenu()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.SubMenu getSubMenu()>
<com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.MenuInflater getMenuInflater()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.MenuInflater getMenuInflater()>
<com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.MenuInflater getMenuInflater()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.MenuInflater getMenuInflater()>
<com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.MenuInflater getMenuInflater()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: java.lang.CharSequence getContentDescription()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa0_1()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity$SynchServiceReceiver: void onReceive(android.content.Context,android.content.Intent)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void setSupportProgress(int)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void updateDrawableState()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void updateDrawableState()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void drawableStateChanged()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void updateDrawableState()>
<org.apache.http.util.ByteArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)> --> <org.apache.http.util.ByteArrayBuffer: void append(char[],int,int)>
<com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> --> <com.jcraft.jsch.KeyPairRSA: int writeSEQUENCE(byte[],int,int)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField bcc(org.apache.james.mime4j.field.address.Address[])> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField cc(org.apache.james.mime4j.field.address.Address[])> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField 'to'(java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField replyTo(java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField 'to'(org.apache.james.mime4j.field.address.Address[])> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField cc(java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField 'to'(org.apache.james.mime4j.field.address.Address)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField replyTo(org.apache.james.mime4j.field.address.Address[])> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField bcc(java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList(java.lang.String,java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField replyTo(org.apache.james.mime4j.field.address.Address)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField bcc(org.apache.james.mime4j.field.address.Address)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField cc(org.apache.james.mime4j.field.address.Address)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: void <init>(int,int,int,int)>
<org.apache.james.mime4j.message.MessageWriter: void writeMultipart(org.apache.james.mime4j.message.Multipart,java.io.OutputStream)> --> <org.apache.james.mime4j.message.Multipart: org.apache.james.mime4j.util.ByteSequence getPreambleRaw()>
<com.actionbarsherlock.ActionBarSherlock: boolean callbackCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock$OnCreatePanelMenuListener: boolean onCreatePanelMenu(int,com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.parser.MimeEntity: void skipHeader(java.lang.String)> --> <org.apache.james.mime4j.parser.RawField: void <init>(org.apache.james.mime4j.util.ByteSequence,int)>
<org.apache.james.mime4j.parser.AbstractEntity: boolean parseField()> --> <org.apache.james.mime4j.parser.RawField: void <init>(org.apache.james.mime4j.util.ByteSequence,int)>
<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestSignal: void write(com.jcraft.jsch.Packet)>
<org.apache.http.entity.BufferedHttpEntity: boolean isStreaming()> --> <org.apache.http.HttpEntity: boolean isStreaming()>
<org.apache.http.entity.HttpEntityWrapper: boolean isStreaming()> --> <org.apache.http.HttpEntity: boolean isStreaming()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStopStringLiteralDfa_1(int,long)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getTodos(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList cursorToArrayList(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getPriorities(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList cursorToArrayList(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getTags(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList cursorToArrayList(android.database.Cursor)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void <init>(com.actionbarsherlock.widget.ActivityChooserView,com.actionbarsherlock.widget.ActivityChooserView$1)> --> <com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void <init>(com.actionbarsherlock.widget.ActivityChooserView)>
<com.jcraft.jsch.JSch: void <clinit>()> --> <com.jcraft.jsch.JSch$1: void <init>()>
<com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.session.WebAuthSession: java.util.Map setUpToken(java.lang.String)> --> <com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getThumbnailStream(java.lang.String,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat)> --> <com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)> --> <org.apache.http.impl.entity.EntitySerializer: java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage)>
<org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequestInterceptor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.impl.io.IdentityInputStream: void <init>(org.apache.http.io.SessionInputBuffer)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String)> --> <org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor,int)> --> <org.apache.http.protocol.BasicHttpProcessor: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int)>
<oauth.signpost.signature.AuthorizationHeaderSigningStrategy: java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.OAuth: java.lang.String toHeaderElement(java.lang.String,java.lang.String)>
<com.twofortyfouram.locale.MarketActivity: android.app.Dialog onCreateDialog(int)> --> <com.twofortyfouram.locale.SharedResources: java.lang.CharSequence getTextResource(android.content.pm.PackageManager,java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setCustomView(android.view.View)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ActionBarContextView access$500(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void finish()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ActionBarContextView access$500(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setSubtitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ActionBarContextView access$500(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ActionBarContextView access$500(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getTitle()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ActionBarContextView access$500(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getSubtitle()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ActionBarContextView access$500(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void onMenuModeChange(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ActionBarContextView access$500(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.matburt.mobileorg.Gui.CertificateConflictActivity$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.CertificateConflictActivity: void finish()>
<com.matburt.mobileorg.Gui.CertificateConflictActivity$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.CertificateConflictActivity: void finish()>
<org.apache.james.mime4j.storage.CipherStorageProvider: void <init>(org.apache.james.mime4j.storage.StorageProvider,java.lang.String)> --> <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.DH: byte[] getE()>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.DH: byte[] getE()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.DH: byte[] getE()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchPrepareOptionsMenu(android.view.Menu)>
<com.actionbarsherlock.app.SherlockActivity: boolean onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchPrepareOptionsMenu(android.view.Menu)>
<com.actionbarsherlock.app.SherlockFragmentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchPrepareOptionsMenu(android.view.Menu)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchPrepareOptionsMenu(android.view.Menu)>
<com.actionbarsherlock.app.SherlockListActivity: boolean onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchPrepareOptionsMenu(android.view.Menu)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> --> <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC access$000(com.jcraft.jsch.KnownHosts)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> --> <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC access$000(com.jcraft.jsch.KnownHosts)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean hasDividerBeforeChildAt(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView$ActionMenuChildView: boolean needsDividerAfter()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setup(com.matburt.mobileorg.OrgData.OrgNode,boolean,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.content.ContentResolver)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void setupTodo(java.lang.String,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.content.ContentResolver)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void invalidate()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateProgressBars(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getProgress()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void showProgressBars(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getProgress()>
<org.apache.james.mime4j.field.address.DomainList: java.lang.String toString()> --> <org.apache.james.mime4j.field.address.DomainList: java.lang.String toRouteString()>
<org.apache.james.mime4j.field.address.Mailbox: java.lang.String getDisplayString(boolean)> --> <org.apache.james.mime4j.field.address.DomainList: java.lang.String toRouteString()>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void FillBuff()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.JSchPartialAuthException: java.lang.String getMethods()>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: java.lang.String getHome()> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: long getFileId(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: void setFilename(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: int getChangesCount(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgNode getOrgNodeFromFilename(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateFile(java.lang.String,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.util.OrgUtils: long getNodeFromPath(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: boolean areChildrenEditable(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: boolean isNodeEditable(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgNode getOrgNodeFromOlpPath(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pushCaptures()> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: android.database.Cursor getFileSchedule(java.lang.String,boolean,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void getAndParseFile(com.matburt.mobileorg.OrgData.OrgFile,com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode findOriginalNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void access$400(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void startAnimation()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void end()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void startAnimation()>
<com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$ExpandedIndexObserver: void <init>(com.actionbarsherlock.internal.view.menu.MenuPopupHelper,com.actionbarsherlock.internal.view.menu.MenuPopupHelper$1)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper$ExpandedIndexObserver: void <init>(com.actionbarsherlock.internal.view.menu.MenuPopupHelper)>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: void addItem()>
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],java.lang.String)> --> <org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],int,int,java.lang.String)>
<org.apache.http.entity.mime.content.AbstractContentBody: void <init>(java.lang.String)> --> <org.apache.james.mime4j.message.SingleBody: void <init>()>
<org.apache.james.mime4j.message.TextBody: void <init>()> --> <org.apache.james.mime4j.message.SingleBody: void <init>()>
<org.apache.james.mime4j.message.BinaryBody: void <init>()> --> <org.apache.james.mime4j.message.SingleBody: void <init>()>
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)> --> <org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)>
<com.actionbarsherlock.widget.ActivityChooserModel: void readHistoricalData()> --> <com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void execute(java.lang.Runnable)>
<com.actionbarsherlock.widget.ActivityChooserModel: void persistHistoricalData()> --> <com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void execute(java.lang.Runnable)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.util.MimeUtil: boolean isMultipart(java.lang.String)>
<org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void parseContentType(java.lang.String)> --> <org.apache.james.mime4j.util.MimeUtil: boolean isMultipart(java.lang.String)>
<com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Channel: void disconnect()>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Channel: void disconnect()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void disconnect()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void saveEdits(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit createParentNewheading(android.content.ContentResolver)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void ReInit(org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void ReInit(org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void ReInit(org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void ReInit(org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void <init>()> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment$1: void <init>(com.matburt.mobileorg.Gui.Capture.PayloadFragment)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState$1: com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState createFromParcel(android.os.Parcel)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState: void <init>(android.os.Parcel,com.actionbarsherlock.internal.widget.IcsAbsSpinner$1)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxList()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: java.util.ArrayList listFiles()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean shouldShowShortcut()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setShortcut(boolean,char)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean shouldShowShortcut()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setObjectValues(java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofObject(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator,java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>
<oauth.signpost.commonshttp.HttpResponseAdapter: java.io.InputStream getContent()> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<com.dropbox.client2.RESTUtility: java.util.Map parseAsQueryString(org.apache.http.HttpResponse)> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void <init>(org.apache.http.client.methods.HttpUriRequest,org.apache.http.HttpResponse)> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<com.dropbox.client2.session.AbstractSession$GzipDecompressingEntity: java.io.InputStream getContent()> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.InputStream getUrl(java.lang.String)> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<oauth.signpost.commonshttp.HttpRequestAdapter: java.io.InputStream getMessagePayload()> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.json.JSONObject responseToJson(org.apache.http.HttpResponse)> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<org.apache.http.entity.HttpEntityWrapper: java.io.InputStream getContent()> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<org.apache.http.entity.BufferedHttpEntity: java.io.InputStream getContent()> --> <org.apache.http.HttpEntity: java.io.InputStream getContent()>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void fillBuffer()> --> <org.apache.james.mime4j.codec.ByteQueue: void enqueue(byte)>
<org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)> --> <org.apache.james.mime4j.codec.ByteQueue: void enqueue(byte)>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void populatePushbackQueue()> --> <org.apache.james.mime4j.codec.ByteQueue: void enqueue(byte)>
<org.apache.james.mime4j.codec.Base64InputStream: int decodePad(int,int,byte[],int,int)> --> <org.apache.james.mime4j.codec.ByteQueue: void enqueue(byte)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.view.View getActionView()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.view.View getActionView()>
<com.jcraft.jsch.ChannelSftp$1: void flush()> --> <com.jcraft.jsch.SftpException: java.lang.String toString()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setVisible(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemVisibleChanged(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToView()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void restoreInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToView()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onDatesModified()> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToView()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$3: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToView()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToView()>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.exception.OAuthExpectationFailedException: void <init>(java.lang.String)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.exception.OAuthExpectationFailedException: void <init>(java.lang.String)>
<oauth.signpost.AbstractOAuthProvider: void retrieveAccessToken(oauth.signpost.OAuthConsumer,java.lang.String)> --> <oauth.signpost.exception.OAuthExpectationFailedException: void <init>(java.lang.String)>
<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void expand(int)>
<org.apache.james.mime4j.util.ByteArrayBuffer: void append(byte[],int,int)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void expand(int)>
<org.apache.james.mime4j.message.MessageWriter: java.io.OutputStream encodeStream(java.io.OutputStream,java.lang.String,boolean)> --> <org.apache.james.mime4j.codec.CodecUtil: java.io.OutputStream wrapQuotedPrintable(java.io.OutputStream,boolean)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseIndexFile()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: void setTags(java.util.ArrayList,android.content.ContentResolver)>
<org.apache.james.mime4j.util.CharsetUtil$Charset: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.apache.james.mime4j.util.CharsetUtil$1)> --> <org.apache.james.mime4j.util.CharsetUtil$Charset: void <init>(java.lang.String,java.lang.String,java.lang.String[])>
<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)> --> <org.apache.http.message.BasicTokenIterator: boolean isHttpSeparator(char)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.matburt.mobileorg.Services.TimeclockDialog$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Services.TimeclockDialog: int access$200(com.matburt.mobileorg.Services.TimeclockDialog)>
<com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> --> <com.matburt.mobileorg.Services.TimeclockDialog: int access$200(com.matburt.mobileorg.Services.TimeclockDialog)>
<org.apache.http.impl.SocketHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionInputBuffer createHttpDataReceiver(java.net.Socket,int,org.apache.http.params.HttpParams)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void <init>(com.actionbarsherlock.internal.view.menu.MenuBuilder,int,int,int,int,java.lang.CharSequence,int)>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.message.BasicLineFormatter: void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)> --> <org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.message.BasicHttpRequest: org.apache.http.ProtocolVersion getProtocolVersion()> --> <org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void save()> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: android.content.ContentResolver getContentResolver()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.InputStream)>
<org.apache.http.impl.io.SocketInputBuffer: void <clinit>()> --> <org.apache.http.impl.io.SocketInputBuffer: java.lang.Class SocketTimeoutExceptionClass()>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.OAuthConsumer: void setAdditionalParameters(oauth.signpost.http.HttpParameters)>
<oauth.signpost.http.HttpParameters: java.lang.String getFirst(java.lang.Object)> --> <oauth.signpost.http.HttpParameters: java.lang.String getFirst(java.lang.Object,boolean)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void addAgenda(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void showBlockAgenda(int)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void collapseCurrent()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: int findParent(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void setParentChecked(int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: int findParent(int)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void setupSettings(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void setupFileList(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void <init>(com.actionbarsherlock.view.MenuInflater,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: void resetGroup()>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: void resetGroup()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.contenttype.parser.Token)>
<org.apache.james.mime4j.message.Message: void setBcc(org.apache.james.mime4j.field.address.Address)> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,org.apache.james.mime4j.field.address.Address)>
<org.apache.james.mime4j.message.Message: void setTo(org.apache.james.mime4j.field.address.Address)> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,org.apache.james.mime4j.field.address.Address)>
<org.apache.james.mime4j.message.Message: void setReplyTo(org.apache.james.mime4j.field.address.Address)> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,org.apache.james.mime4j.field.address.Address)>
<org.apache.james.mime4j.message.Message: void setCc(org.apache.james.mime4j.field.address.Address)> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,org.apache.james.mime4j.field.address.Address)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setTitle(java.lang.CharSequence)>
<com.jcraft.jsch.jce.DH: byte[] getK()> --> <javax.crypto.KeyAgreement: byte[] generateSecret()>
<com.matburt.mobileorg.Gui.ViewActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.Menu: com.actionbarsherlock.view.SubMenu addSubMenu(int)>
<org.apache.james.mime4j.MimeIOException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.MimeIOException: void <init>(org.apache.james.mime4j.MimeException)>
<org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream,org.apache.james.mime4j.parser.MimeEntityConfig,org.apache.james.mime4j.storage.StorageProvider)> --> <org.apache.james.mime4j.MimeIOException: void <init>(org.apache.james.mime4j.MimeException)>
<org.apache.james.mime4j.message.Header: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.MimeIOException: void <init>(org.apache.james.mime4j.MimeException)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void end()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: boolean isStarted()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void cancel()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: boolean isStarted()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void getAndParseFile(com.matburt.mobileorg.OrgData.OrgFile,com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.SynchronizerInterface: java.io.BufferedReader getRemoteFile(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pushCaptures()> --> <com.matburt.mobileorg.Synchronizers.SynchronizerInterface: java.io.BufferedReader getRemoteFile(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseChecksumFile()> --> <com.matburt.mobileorg.Synchronizers.SynchronizerInterface: java.io.BufferedReader getRemoteFile(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseIndexFile()> --> <com.matburt.mobileorg.Synchronizers.SynchronizerInterface: java.io.BufferedReader getRemoteFile(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: java.lang.ThreadLocal access$000()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: int getCount()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean access$200(com.actionbarsherlock.internal.view.menu.MenuPopupHelper)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: com.actionbarsherlock.internal.view.menu.MenuItemImpl getItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean access$200(com.actionbarsherlock.internal.view.menu.MenuPopupHelper)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setActionView(android.view.View)>
<org.apache.http.message.BasicHttpRequest: org.apache.http.ProtocolVersion getProtocolVersion()> --> <org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setActionView(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemActionRequestChanged(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setShowAsAction(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemActionRequestChanged(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: void actionFormatChanged()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void onItemActionRequestChanged(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>
<org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>
<org.apache.http.impl.entity.StrictContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>
<org.apache.james.mime4j.field.address.Address: org.apache.james.mime4j.field.address.Address parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Address buildAddress(org.apache.james.mime4j.field.address.parser.ASTaddress)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.AddressList buildAddressList(org.apache.james.mime4j.field.address.parser.ASTaddress_list)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Address buildAddress(org.apache.james.mime4j.field.address.parser.ASTaddress)>
<com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()> --> <com.matburt.mobileorg.Synchronizers.SDCardSynchronizer: void <init>(android.content.Context)>
<com.dropbox.client2.jsonextract.JsonList$Extractor: java.lang.Object extract(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.jsonextract.JsonList$Extractor: java.util.List extract(com.dropbox.client2.jsonextract.JsonThing)>
<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)> --> <org.apache.http.HttpEntity: org.apache.http.Header getContentType()>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: org.apache.http.Header getContentType()>
<oauth.signpost.commonshttp.HttpRequestAdapter: java.lang.String getContentType()> --> <org.apache.http.HttpEntity: org.apache.http.Header getContentType()>
<org.apache.http.entity.HttpEntityWrapper: org.apache.http.Header getContentType()> --> <org.apache.http.HttpEntity: org.apache.http.Header getContentType()>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: org.apache.http.Header getContentType()>
<org.apache.james.mime4j.parser.MimeEntityConfig: java.lang.Object clone()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: org.apache.james.mime4j.parser.MimeEntityConfig clone()>
<org.apache.james.mime4j.parser.MimeStreamParser: void <init>(org.apache.james.mime4j.parser.MimeEntityConfig)> --> <org.apache.james.mime4j.parser.MimeEntityConfig: org.apache.james.mime4j.parser.MimeEntityConfig clone()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void getLocationOnScreen(int[])>
<com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> --> <com.jcraft.jsch.MAC: void doFinal(byte[],int)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.MAC: void doFinal(byte[],int)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> --> <com.jcraft.jsch.MAC: void doFinal(byte[],int)>
<com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.MAC: void doFinal(byte[],int)>
<com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> --> <com.jcraft.jsch.MAC: void doFinal(byte[],int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: int jj_ntk()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: org.apache.james.mime4j.field.structured.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: org.apache.james.mime4j.field.structured.parser.Token getToken(int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void addView(android.view.View)>
<com.matburt.mobileorg.Gui.SearchActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.SearchActivity: void handleIntent(android.content.Intent)>
<com.matburt.mobileorg.Gui.SearchActivity: void onNewIntent(android.content.Intent)> --> <com.matburt.mobileorg.Gui.SearchActivity: void handleIntent(android.content.Intent)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: boolean onTouch(android.view.View,android.view.MotionEvent)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void smoothScrollTo(int,int)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollRight()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void smoothScrollTo(int,int)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollLeft()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void smoothScrollTo(int,int)>
<org.apache.http.entity.StringEntity: void <init>(java.lang.String)> --> <org.apache.http.entity.StringEntity: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.entity.mime.FormBodyPart: void addField(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.message.Header: void addField(org.apache.james.mime4j.parser.Field)>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.james.mime4j.message.Header: void addField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Header: void <init>(org.apache.james.mime4j.message.Header)> --> <org.apache.james.mime4j.message.Header: void addField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Header$1: void field(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.message.Header: void addField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.message.Header: void addField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.MessageBuilder: void field(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.message.Header: void addField(org.apache.james.mime4j.parser.Field)>
<org.apache.james.mime4j.message.SimpleContentHandler: void field(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.message.Header: void addField(org.apache.james.mime4j.parser.Field)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pushCaptures()> --> <com.matburt.mobileorg.OrgData.OrgEdit: java.lang.String editsToString(android.content.ContentResolver)>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void copyStreamToOutput(java.io.OutputStream,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$DropboxInputStream: int read(byte[])>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuLogin()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard$1: void <init>(com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard)>
<com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void onFinishInflate()> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: android.view.View findViewById(int)>
<com.commonsware.cwac.sacklist.SackOfViewsAdapter: int getViewTypeCount()> --> <com.commonsware.cwac.sacklist.SackOfViewsAdapter: int getCount()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getPaddingBottom()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int measureHeightOfChildren(int,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: int getListPaddingBottom()>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_dss(byte[])> --> <com.jcraft.jsch.SignatureDSA: void setPrvKey(byte[],byte[],byte[],byte[])>
<com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int indexOf(byte)>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: boolean add(byte)> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: int size()>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: boolean isEmpty()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: int size()>
<org.apache.james.mime4j.codec.ByteQueue: int count()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: int size()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean isLastPart()>
<org.apache.http.message.BasicLineParser: void <clinit>()> --> <org.apache.http.message.BasicLineParser: void <init>()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStopStringLiteralDfa_2(int,long)>
<org.apache.http.impl.AbstractHttpClientConnection: void doFlush()> --> <org.apache.http.io.SessionOutputBuffer: void flush()>
<org.apache.http.impl.io.ContentLengthOutputStream: void flush()> --> <org.apache.http.io.SessionOutputBuffer: void flush()>
<org.apache.http.impl.io.IdentityOutputStream: void close()> --> <org.apache.http.io.SessionOutputBuffer: void flush()>
<org.apache.http.impl.io.ChunkedOutputStream: void flush()> --> <org.apache.http.io.SessionOutputBuffer: void flush()>
<org.apache.http.impl.io.ContentLengthOutputStream: void close()> --> <org.apache.http.io.SessionOutputBuffer: void flush()>
<org.apache.http.impl.AbstractHttpServerConnection: void doFlush()> --> <org.apache.http.io.SessionOutputBuffer: void flush()>
<org.apache.http.impl.io.IdentityOutputStream: void flush()> --> <org.apache.http.io.SessionOutputBuffer: void flush()>
<org.apache.http.impl.io.ChunkedOutputStream: void close()> --> <org.apache.http.io.SessionOutputBuffer: void flush()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void <init>()> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment$2: void <init>(com.matburt.mobileorg.Gui.Capture.PayloadFragment)>
<org.apache.http.impl.io.ContentLengthInputStream: void close()> --> <org.apache.http.impl.io.ContentLengthInputStream: int read(byte[])>
<com.actionbarsherlock.app.SherlockListActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void onPause()> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void setContentView(int)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: boolean onCreateOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void onPostResume()> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void setSupportProgressBarVisibility(boolean)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void setContentView(android.view.View)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void onPanelClosed(int,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void onStop()> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void setSupportSecondaryProgress(int)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void setSupportProgressBarIndeterminate(boolean)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void onPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void setSupportProgressBarIndeterminateVisibility(boolean)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void invalidateOptionsMenu()> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void requestWindowFeature(long)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void openOptionsMenu()> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void setSupportProgress(int)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void closeOptionsMenu()> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void onDestroy()> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: boolean onMenuOpened(int,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: void onTitleChanged(java.lang.CharSequence,int)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockListActivity: boolean onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.widget.ActivityChooserView: void setActivityChooserModel(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setDataModel(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initTitle()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setCustomView(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void addView(android.view.View)>
<org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader,org.json.simple.parser.ContainerFactory)> --> <org.json.simple.parser.JSONParser: java.util.List createArrayContainer(org.json.simple.parser.ContainerFactory)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.descriptor.MutableBodyDescriptor newBodyDescriptor(org.apache.james.mime4j.descriptor.BodyDescriptor)> --> <org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void <init>()> --> <org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor)>
<com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])> --> <com.jcraft.jsch.ChannelSftp: boolean isPattern(byte[])>
<com.commonsware.cwac.merge.MergeAdapter: void addViews(java.util.List,boolean)> --> <com.commonsware.cwac.merge.MergeAdapter$EnabledSackAdapter: void <init>(java.util.List)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemClick(android.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()>
<com.jcraft.jsch.ChannelDirectTCPIP: void init()> --> <com.jcraft.jsch.IO: void <init>()>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.IO: void <init>()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()> --> <com.jcraft.jsch.IO: void <init>()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.IO: void <init>()>
<com.jcraft.jsch.ChannelSession: void <init>()> --> <com.jcraft.jsch.IO: void <init>()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>
<com.actionbarsherlock.view.MenuInflater$MenuState: com.actionbarsherlock.view.SubMenu addSubMenuItem()> --> <com.actionbarsherlock.view.Menu: com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: boolean isUsed()>
<com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelX11: byte[] addCache(byte[],int,int)>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Wizard.WizardActivity: void setContentView(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void onConfigurationChanged(android.content.res.Configuration)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setup(com.matburt.mobileorg.OrgData.OrgNode,boolean,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.content.ContentResolver)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void setupTitle(java.lang.String,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.text.SpannableStringBuilder)>
<org.apache.http.impl.AbstractHttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)> --> <org.apache.http.impl.AbstractHttpServerConnection: void assertOpen()>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.HttpRequest receiveRequestHeader()> --> <org.apache.http.impl.AbstractHttpServerConnection: void assertOpen()>
<org.apache.http.impl.AbstractHttpServerConnection: void flush()> --> <org.apache.http.impl.AbstractHttpServerConnection: void assertOpen()>
<org.apache.http.impl.AbstractHttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)> --> <org.apache.http.impl.AbstractHttpServerConnection: void assertOpen()>
<com.matburt.mobileorg.Settings.SettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.SettingsActivity: void populateTodoKeywords()>
<com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.widget.ActivityChooserView$3: void <init>(com.actionbarsherlock.widget.ActivityChooserView)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.KeyPair: byte a2b(byte)>
<com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()> --> <com.matburt.mobileorg.Services.SyncService: android.content.Context getApplicationContext()>
<com.matburt.mobileorg.Services.SyncService: void onCreate()> --> <com.matburt.mobileorg.Services.SyncService: android.content.Context getApplicationContext()>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getPos()>
<org.apache.http.message.BasicLineParser: boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getPos()>
<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getPos()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getPos()>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getPos()>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getPos()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getPos()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> --> <org.apache.http.message.ParserCursor: int getPos()>
<org.apache.http.message.BasicRequestLine: java.lang.String toString()> --> <org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: int getIntValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: android.view.animation.Interpolator getInterpolator()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: android.view.animation.Interpolator getInterpolator()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void save()> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getLocationSelection()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getLocationSelection()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: com.matburt.mobileorg.OrgData.OrgNode getEditedNode()> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getLocationSelection()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setExclusiveItemChecked(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isCheckable()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isCheckable()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isCheckable()>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void clear()>
<com.jcraft.jsch.Channel: java.io.OutputStream getOutputStream()> --> <com.jcraft.jsch.Channel$1: void <init>(com.jcraft.jsch.Channel,com.jcraft.jsch.Channel)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void end()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet,com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet,com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader)> --> <com.matburt.mobileorg.OrgData.OrgFileParser: void combineBlockAgendas()>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: com.actionbarsherlock.internal.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup)>
<org.apache.james.mime4j.util.MimeUtil$1: java.text.DateFormat initialValue()> --> <org.apache.james.mime4j.util.MimeUtil$Rfc822DateFormat: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int getChildCount()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initTitle()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int getChildCount()>
<org.apache.http.util.ByteArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)> --> <org.apache.http.util.CharArrayBuffer: char[] buffer()>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.parser.MimeEntity: void clearMimeStream()>
<oauth.signpost.exception.OAuthCommunicationException: void <init>(java.lang.Exception)> --> <oauth.signpost.exception.OAuthException: void <init>(java.lang.String,java.lang.Throwable)>
<com.commonsware.cwac.merge.MergeAdapter: java.util.List getPieces()> --> <com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster: java.util.List getPieces()>
<org.apache.http.impl.AbstractHttpClientConnection: boolean isStale()> --> <org.apache.http.io.SessionInputBuffer: boolean isDataAvailable(int)>
<org.apache.http.impl.AbstractHttpClientConnection: boolean isResponseAvailable(int)> --> <org.apache.http.io.SessionInputBuffer: boolean isDataAvailable(int)>
<org.apache.http.impl.io.IdentityInputStream: int available()> --> <org.apache.http.io.SessionInputBuffer: boolean isDataAvailable(int)>
<org.apache.http.impl.AbstractHttpServerConnection: boolean isStale()> --> <org.apache.http.io.SessionInputBuffer: boolean isDataAvailable(int)>
<org.apache.http.impl.DefaultHttpResponseFactory: void <init>()> --> <org.apache.http.impl.DefaultHttpResponseFactory: void <init>(org.apache.http.ReasonPhraseCatalog)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry putFileOverwrite(java.lang.String,java.io.InputStream,long,com.dropbox.client2.ProgressListener)>
<com.actionbarsherlock.internal.ActionBarSherlockNative: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: void <init>(com.actionbarsherlock.internal.ActionBarSherlockNative,com.actionbarsherlock.view.ActionMode$Callback)>
<org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator()> --> <org.apache.http.message.BasicListHeaderIterator: void <init>(java.util.List,java.lang.String)>
<org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator(java.lang.String)> --> <org.apache.http.message.BasicListHeaderIterator: void <init>(java.util.List,java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onFinishInflate()> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void onFinishInflate()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onDestroy()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void unregisterReceiver(android.content.BroadcastReceiver)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.lang.String testConnection(java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.io.InputStream getUrlStream(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.io.InputStream getUrlStream(java.lang.String)>
<com.matburt.mobileorg.Gui.ViewFragment: void display(java.lang.String)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String toHTML(java.lang.String)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void setSubtitle(int)> --> <com.actionbarsherlock.internal.view.StandaloneActionMode: void setSubtitle(java.lang.CharSequence)>
<com.dropbox.client2.jsonextract.JsonMap: java.lang.String pathConcatField(java.lang.String,java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonMap: boolean isIdentLike(java.lang.String)>
<com.twofortyfouram.locale.MarketActivity: void onCreate(android.os.Bundle)> --> <com.twofortyfouram.locale.MarketActivity: void setContentView(android.view.View)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()> --> <org.apache.james.mime4j.codec.QuotedPrintableInputStream: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.parser.MimeTokenStream: java.io.InputStream getDecodedInputStream()> --> <org.apache.james.mime4j.codec.QuotedPrintableInputStream: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.message.SimpleContentHandler: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.codec.QuotedPrintableInputStream: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeBaseQuotedPrintable(java.lang.String)> --> <org.apache.james.mime4j.codec.QuotedPrintableInputStream: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.message.MessageBuilder: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.codec.QuotedPrintableInputStream: void <init>(java.io.InputStream)>
<com.dropbox.client2.RESTUtility: boolean isRequestRepeatable(org.apache.http.HttpRequest)> --> <org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)> --> <org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>
<oauth.signpost.commonshttp.HttpRequestAdapter: void <init>(org.apache.http.client.methods.HttpUriRequest)> --> <org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>
<org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleForItemView(com.actionbarsherlock.internal.view.menu.MenuView$ItemView)> --> <com.actionbarsherlock.internal.view.menu.MenuView$ItemView: boolean prefersCondensedTitle()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void recycleAllViews()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getChildCount()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setSelection(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getChildCount()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: int pointToPosition(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getChildCount()>
<com.jcraft.jsch.ChannelSftp: java.lang.String getCwd()> --> <com.jcraft.jsch.ChannelSftp: java.lang.String getHome()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.NullWizard: void setupFirstPage()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.NullWizard: void createNullConfig()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parameter()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: void browseTo(java.lang.String)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: boolean isCurrentDirectoryRoot()>
<org.apache.http.message.BasicTokenIterator: int findTokenSeparator(int)> --> <org.apache.http.message.BasicTokenIterator: boolean isWhitespace(char)>
<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)> --> <org.apache.http.message.BasicTokenIterator: boolean isWhitespace(char)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token jjFillToken()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$2: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void initActionMode(android.widget.ListView,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void initActionMode(android.widget.ListView,int,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void initActionMode(android.widget.ListView,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <clinit>()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void jj_la1_1()>
<com.actionbarsherlock.app.SherlockDialogFragment: void onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.app.SherlockDialogFragment: void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet)>
<com.dropbox.client2.session.AbstractSession$2: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()> --> <com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: void <init>(com.dropbox.client2.session.AbstractSession$1)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void removeTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void removeTabAt(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard$2: void start()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard$2: void run()>
<com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)> --> <com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)>
<com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseChecksumFile()> --> <com.matburt.mobileorg.OrgData.OrgFileParser: java.util.HashMap getChecksums(java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setChoiceMode(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxLogin()> --> <com.dropbox.client2.session.AppKeyPair: void <init>(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: com.dropbox.client2.android.AndroidAuthSession buildSession()> --> <com.dropbox.client2.session.AppKeyPair: void <init>(java.lang.String,java.lang.String)>
<org.apache.james.mime4j.message.Message: void createMessageId(java.lang.String)> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.message.Message: void setDate(java.util.Date,java.util.TimeZone)> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.message.Message: void setMailbox(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.message.Message: void setSubject(java.lang.String)> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,java.util.Collection)> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.message.Message: void setMailboxList(java.lang.String,java.util.Collection)> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.message.Header obtainHeader()>
<org.apache.james.mime4j.field.ContentTypeField: org.apache.james.mime4j.field.ParseException getParseException()> --> <org.apache.james.mime4j.field.ContentTypeField: org.apache.james.mime4j.field.contenttype.parser.ParseException getParseException()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$VisibilityAnimListener: void <init>(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runViewNodeActivity()>();     case 2131165357: goto $r3 = $r0.<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: com.matburt.mobileorg.OrgData.OrgNode node>
<org.json.simple.parser.JSONParser: java.lang.Object parse(java.lang.String)> --> <org.json.simple.parser.JSONParser: java.lang.Object parse(java.lang.String,org.json.simple.parser.ContainerFactory)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: int addBlockAgenda(android.content.Context,java.lang.String)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void <init>()>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: com.matburt.mobileorg.Gui.Agenda.BlockAgenda getBlockAgenda(int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void <init>()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void setEmptyView(android.view.View)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: java.lang.Object getSelectedItem()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void setFocusable(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver: void onInvalidated()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void rememberSyncState()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void fireOnSelected()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: java.lang.Object getItemAtPosition(int)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver: void onChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void checkFocus()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier: void run()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: long getItemIdAtPosition(int)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void setFocusableInTouchMode(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: int findSyncPosition()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isScrollableForAccessibility()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.widget.Adapter getAdapter()>
<com.dropbox.client2.session.Session$AccessType: void <clinit>()> --> <com.dropbox.client2.session.Session$AccessType: void <init>(java.lang.String,int,java.lang.String)>
<org.apache.http.entity.mime.HttpMultipart: java.lang.String getBoundary()> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getBoundary()>
<org.apache.james.mime4j.field.ContentTypeField: java.lang.String getMimeType(org.apache.james.mime4j.field.ContentTypeField,org.apache.james.mime4j.field.ContentTypeField)> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getBoundary()>
<org.apache.james.mime4j.message.Entity: boolean isMultipart()> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getBoundary()>
<org.apache.james.mime4j.message.MessageWriter: org.apache.james.mime4j.util.ByteSequence getBoundary(org.apache.james.mime4j.field.ContentTypeField)> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getBoundary()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onDatesModified()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onPayloadEndedEdit()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onPayloadStartedEdit()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onPayloadModified()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: com.matburt.mobileorg.OrgData.OrgNode getEditedNode()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenRSA: void init(int)>
<com.dropbox.client2.exception.DropboxUnlinkedException: void <init>()> --> <com.dropbox.client2.exception.DropboxException: void <init>()>
<com.dropbox.client2.exception.DropboxLocalStorageFullException: void <init>()> --> <com.dropbox.client2.exception.DropboxException: void <init>()>
<com.dropbox.client2.exception.DropboxPartialFileException: void <init>(long)> --> <com.dropbox.client2.exception.DropboxException: void <init>()>
<com.dropbox.client2.exception.DropboxServerException: void <init>(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxException: void <init>()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setSupportProgress(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgress(int)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setSupportProgress(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgress(int)>
<com.actionbarsherlock.app.SherlockActivity: void setSupportProgress(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgress(int)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setSupportProgress(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgress(int)>
<com.actionbarsherlock.app.SherlockListActivity: void setSupportProgress(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgress(int)>
<oauth.signpost.signature.SignatureBaseString: java.lang.String generate()> --> <oauth.signpost.signature.SignatureBaseString: java.lang.String normalizeRequestUrl()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: int getMeasuredWidth()>
<org.apache.james.mime4j.parser.AbstractEntity: boolean parseField()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: int indexOf(byte)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encode(byte)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void plain(byte)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void writePending()> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void plain(byte)>
<com.actionbarsherlock.internal.widget.IcsSpinner: java.lang.CharSequence getPrompt()> --> <com.actionbarsherlock.internal.widget.IcsSpinner$SpinnerPopup: java.lang.CharSequence getHintText()>
<com.matburt.mobileorg.Services.CalendarSyncService$1: void start()> --> <com.matburt.mobileorg.Services.CalendarSyncService: void access$200(com.matburt.mobileorg.Services.CalendarSyncService)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNodePayload getOrgNodePayload()> --> <com.matburt.mobileorg.OrgData.OrgNode: void preparePayload()>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getNodeId(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void preparePayload()>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getCleanedPayload()> --> <com.matburt.mobileorg.OrgData.OrgNode: void preparePayload()>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getPayload()> --> <com.matburt.mobileorg.OrgData.OrgNode: void preparePayload()>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.util.List getParamValues()>
<org.apache.http.impl.io.ChunkedOutputStream: void finish()> --> <org.apache.http.impl.io.ChunkedOutputStream: void writeClosingChunk()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()> --> <org.apache.james.mime4j.field.address.parser.ASTgroup_body: void <init>(int)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getTimestamp()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String stripDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getDeadline()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String stripDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getScheduled()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String stripDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestSftp: boolean waitForReply()>
<org.apache.james.mime4j.field.MailboxListField: void <clinit>()> --> <org.apache.james.mime4j.field.MailboxListField$1: void <init>()>
<com.jcraft.jsch.ChannelSession: void start()> --> <com.jcraft.jsch.ChannelSession: boolean isConnected()>
<com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> --> <com.jcraft.jsch.ChannelSession: boolean isConnected()>
<com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: java.lang.String stripTags(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgFileParser: java.util.HashSet access$000(com.matburt.mobileorg.OrgData.OrgFileParser)>
<org.apache.james.mime4j.message.Entity: void setText(org.apache.james.mime4j.message.TextBody,java.lang.String)> --> <org.apache.james.mime4j.message.TextBody: java.lang.String getMimeCharset()>
<com.matburt.mobileorg.Gui.ViewFragment$InternalWebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> --> <com.matburt.mobileorg.Gui.ViewFragment: void access$000(com.matburt.mobileorg.Gui.ViewFragment,java.lang.String)>
<org.apache.http.protocol.UriPatternMatcher: java.lang.Object lookup(java.lang.String)> --> <org.apache.http.protocol.UriPatternMatcher: boolean matchUriRequestPattern(java.lang.String,java.lang.String)>
<org.apache.http.protocol.HttpRequestHandlerRegistry: boolean matchUriRequestPattern(java.lang.String,java.lang.String)> --> <org.apache.http.protocol.UriPatternMatcher: boolean matchUriRequestPattern(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.view.View makeAndAddView(int)>
<com.actionbarsherlock.internal.widget.IcsSpinner: int getBaseline()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.view.View makeAndAddView(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: void setGroupEnabled(int,boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: int getGroupId()>
<com.actionbarsherlock.internal.view.menu.ActionMenu: void setGroupCheckable(int,boolean,boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: int getGroupId()>
<com.actionbarsherlock.internal.view.menu.ActionMenu: void removeGroup(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: int getGroupId()>
<com.actionbarsherlock.internal.view.menu.ActionMenu: void setGroupVisible(int,boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: int getGroupId()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.HashMap access$100(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder before(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.HashMap access$100(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.HashMap access$100(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder after(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.HashMap access$100(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet,com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.HashMap access$100(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.jcraft.jsch.Session: void disconnect()> --> <com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session)>
<org.apache.http.message.HeaderGroup: org.apache.http.message.HeaderGroup copy()> --> <org.apache.http.message.HeaderGroup: void <init>()>
<org.apache.http.message.AbstractHttpMessage: void <init>(org.apache.http.params.HttpParams)> --> <org.apache.http.message.HeaderGroup: void <init>()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void selectionChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isInTouchMode()>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp$2: void <init>(com.jcraft.jsch.ChannelSftp,long,com.jcraft.jsch.SftpProgressMonitor,byte[])> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp$1: void <init>(com.jcraft.jsch.ChannelSftp,byte[],long[],com.jcraft.jsch.SftpProgressMonitor)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp$Header: void <init>(com.jcraft.jsch.ChannelSftp)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token jjFillToken()>
<org.apache.http.message.BasicTokenIterator: int findNext(int)> --> <org.apache.http.message.BasicTokenIterator: int findTokenStart(int)>
<com.actionbarsherlock.internal.widget.CapitalizingButton: void setTextCompat(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.CapitalizingButton: void setText(java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void setLevelFormating(boolean)>
<com.google.gdata.util.common.base.Preconditions: void checkElementIndex(int,int)> --> <com.google.gdata.util.common.base.Preconditions: void checkElementIndex(int,int,java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$StartTimePickerDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$StartTimePickerDialogFragment: android.support.v4.app.FragmentActivity getActivity()>
<org.apache.james.mime4j.field.ContentDispositionField: void parse()> --> <org.apache.james.mime4j.field.contentdisposition.parser.TokenMgrError: java.lang.String getMessage()>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.ArrayList getDates(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodeDate: void setTitle(java.lang.String)>
<com.jcraft.jsch.Session: void receive_newkeys(com.jcraft.jsch.Buffer,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.ArrayList getDates(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getScheduled()>
<com.matburt.mobileorg.OrgData.OrgNodePayload: void cleanPayload()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getScheduled()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void setupDates()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getScheduled()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void performCollapse()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()> --> <org.apache.james.mime4j.field.address.parser.ASTangle_addr: void <init>(int)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendREADLINK(byte[])>
<org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()> --> <org.apache.http.FormattedHeader: int getValuePos()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void selectionChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean post(java.lang.Runnable)>
<com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier: void start()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean post(java.lang.Runnable)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int positionChild(android.view.View,int,int,int)>
<org.apache.http.impl.io.AbstractMessageWriter: void write(org.apache.http.HttpMessage)> --> <org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatHeader(org.apache.http.Header,org.apache.http.message.LineFormatter)> --> <org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>
<com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> --> <com.jcraft.jsch.KeyPair: byte b2a(byte)>
<com.dropbox.client2.session.AbstractSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType)> --> <com.dropbox.client2.session.AbstractSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType,com.dropbox.client2.session.AccessTokenPair)>
<com.dropbox.client2.android.AndroidAuthSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType,com.dropbox.client2.session.AccessTokenPair)> --> <com.dropbox.client2.session.AbstractSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType,com.dropbox.client2.session.AccessTokenPair)>
<com.dropbox.client2.session.WebAuthSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType,com.dropbox.client2.session.AccessTokenPair)> --> <com.dropbox.client2.session.AbstractSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType,com.dropbox.client2.session.AccessTokenPair)>
<com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)>
<com.dropbox.client2.DropboxAPI$Entry: void <clinit>()> --> <com.dropbox.client2.DropboxAPI$Entry$1: void <init>()>
<org.apache.http.protocol.RequestDate: void <clinit>()> --> <org.apache.http.protocol.HttpDateGenerator: void <init>()>
<org.apache.http.protocol.ResponseDate: void <clinit>()> --> <org.apache.http.protocol.HttpDateGenerator: void <init>()>
<com.actionbarsherlock.widget.ActivityChooserView$2: void onGlobalLayout()> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow access$100(com.actionbarsherlock.widget.ActivityChooserView)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: void <init>(org.apache.james.mime4j.io.BufferedLineReaderInputStream,java.lang.String)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int capacity()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void setClickable(boolean)>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestX11: boolean waitForReply()>
<org.apache.james.mime4j.message.MessageBuilder: void startMessage()> --> <org.apache.james.mime4j.message.Message: void <init>()>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.james.mime4j.message.Message: void <init>()>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey createHashedHostKey(java.lang.String,byte[])>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxField mailbox(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.field.Fields: void checkValidFieldName(java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField mailboxList(java.lang.String,java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: void checkValidFieldName(java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList(java.lang.String,java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: void checkValidFieldName(java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.DateTimeField date(java.lang.String,java.util.Date)> --> <org.apache.james.mime4j.field.Fields: void checkValidFieldName(java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.DateTimeField date(java.lang.String,java.util.Date,java.util.TimeZone)> --> <org.apache.james.mime4j.field.Fields: void checkValidFieldName(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void handleTrustRelationship(android.content.Context)> --> <javax.net.ssl.HttpsURLConnection: void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void hideKeyboard()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: android.os.IBinder getWindowToken()>
<com.dropbox.client2.session.WebAuthSession: com.dropbox.client2.session.WebAuthSession$WebAuthInfo getAuthInfo(java.lang.String)> --> <com.dropbox.client2.session.WebAuthSession: com.dropbox.client2.session.AccessTokenPair getAccessTokenPair()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)> --> <org.json.JSONArray: org.json.JSONObject getJSONObject(int)>
<com.matburt.mobileorg.Settings.SettingsActivity: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: void onCreate(android.os.Bundle)>
<com.matburt.mobileorg.OrgData.OrgNode: void addLogbook(long,long,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getFilename(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getOlpId(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getFilename(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: void generateApplyWriteEdits(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getFilename(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode findOriginalNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getFilename(android.content.ContentResolver)>
<org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void parseContentType(java.lang.String)> --> <org.apache.james.mime4j.util.MimeUtil: java.util.Map getHeaderParams(java.lang.String)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseContentDisposition(java.lang.String)> --> <org.apache.james.mime4j.util.MimeUtil: java.util.Map getHeaderParams(java.lang.String)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel: java.lang.String access$1200()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel: java.lang.String access$1200()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getChildCount()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasureExactFormat(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getChildCount()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getChildCount()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getChildCount()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean hasDividerBeforeChildAt(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getChildCount()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getChildCount()>
<com.dropbox.client2.DropboxAPI$Entry$1: java.lang.Object extract(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.DropboxAPI$Entry$1: com.dropbox.client2.DropboxAPI$Entry extract(com.dropbox.client2.jsonextract.JsonThing)>
<com.jcraft.jsch.KeyPairDSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenDSA: byte[] getY()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: int getCount()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.IcsLinearLayout access$200(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: java.lang.Object getItem(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.IcsLinearLayout access$200(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener: void onClick(android.view.View)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.IcsLinearLayout access$200(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)>
<com.jcraft.jsch.ChannelX11: void <init>()> --> <com.jcraft.jsch.ChannelX11: void setLocalWindowSizeMax(int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void refresh()> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList getAgendasTitles(android.content.Context)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void removeTabAt(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: int getPosition()>
<com.actionbarsherlock.internal.app.ActionBarImpl: int getSelectedNavigationIndex()> --> <com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: int getPosition()>
<com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>
<com.jcraft.jsch.KeyPair: java.lang.String getFingerPrint()> --> <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>
<com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> --> <com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: int capacity()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)> --> <org.apache.http.util.ByteArrayBuffer: int capacity()>
<org.apache.james.mime4j.message.Message: void setMailboxList(java.lang.String,java.util.Collection)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField mailboxList(java.lang.String,java.lang.Iterable)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.view.View_HasStateListenerSupport: void addOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersHorizontal(android.graphics.Canvas)>
<com.dropbox.client2.session.AbstractSession: void setRequestTimeout(org.apache.http.client.methods.HttpUriRequest)> --> <org.apache.http.client.methods.HttpUriRequest: org.apache.http.params.HttpParams getParams()>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <org.apache.http.client.methods.HttpUriRequest: org.apache.http.params.HttpParams getParams()>
<org.json.simple.parser.Yylex: void <clinit>()> --> <org.json.simple.parser.Yylex: int[] zzUnpackRowMap()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.view.View access$1100(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.view.View access$1100(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: android.app.Dialog access$000(com.matburt.mobileorg.Gui.Outline.OutlineItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: android.app.Dialog createTodoDialog()>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenRSA: byte[] getP()>
<com.matburt.mobileorg.Services.TimeclockService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.TimeclockService: void getEstimated()>
<com.jcraft.jsch.JSch: void removeIdentity(java.lang.String)> --> <com.jcraft.jsch.Identity: void clear()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getHeight()>
<com.actionbarsherlock.internal.app.ActionBarImpl: int getHeight()> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getHeight()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getHeight()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getHeight()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void route()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void name_addr()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void phrase()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void local_part()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeCloseNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void restoreInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToEdit(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToEdit()> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToEdit(java.lang.String)>
<oauth.signpost.AbstractOAuthConsumer: void <init>(java.lang.String,java.lang.String)> --> <oauth.signpost.AbstractOAuthConsumer: void setMessageSigner(oauth.signpost.signature.OAuthMessageSigner)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.util.List parse()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.util.List doParse()>
<com.matburt.mobileorg.Settings.SettingsActivity: void populateTodoKeywords()> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.preference.Preference findPreference(java.lang.CharSequence)>
<com.matburt.mobileorg.Settings.SettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.preference.Preference findPreference(java.lang.CharSequence)>
<com.matburt.mobileorg.Settings.SettingsActivity: void updatePreferenceSummary(java.lang.String)> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.preference.Preference findPreference(java.lang.CharSequence)>
<com.matburt.mobileorg.Settings.SettingsActivity: void populateSyncSources()> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.preference.Preference findPreference(java.lang.CharSequence)>
<com.matburt.mobileorg.Settings.SettingsActivity: void populateCalendarNames()> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.preference.Preference findPreference(java.lang.CharSequence)>
<com.matburt.mobileorg.OrgData.OrgEdit$1: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgEdit$TYPE: com.matburt.mobileorg.OrgData.OrgEdit$TYPE[] values()>
<org.apache.james.mime4j.field.DefaultFieldParser: void <init>()> --> <org.apache.james.mime4j.field.DelegatingFieldParser: void <init>()>
<org.apache.http.message.BasicLineFormatter: void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)> --> <org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicLineFormatter: void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)> --> <org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> --> <com.jcraft.jsch.Packet: void unshift(byte,int,int,int)>
<com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>
<com.jcraft.jsch.Util: java.lang.String byte2str(byte[])> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>
<com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int,java.lang.String)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: android.app.Activity access$400(com.actionbarsherlock.internal.ActionBarSherlockCompat)>
<com.matburt.mobileorg.Gui.SearchActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setActivity(com.actionbarsherlock.app.SherlockActivity)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void setupList()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setActivity(com.actionbarsherlock.app.SherlockActivity)>
<com.dropbox.client2.ProgressListener$Adjusted: long progressInterval()> --> <com.dropbox.client2.ProgressListener: long progressInterval()>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void copyStreamToOutput(java.io.OutputStream,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.ProgressListener: long progressInterval()>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream: void <init>(com.dropbox.client2.ProgressListener$ProgressHttpEntity,java.io.OutputStream)> --> <com.dropbox.client2.ProgressListener: long progressInterval()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode$4: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void access$300(com.matburt.mobileorg.Gui.Outline.OutlineActionMode,boolean)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: long getDrawingTime()>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: void truncate()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: void clear()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void openOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchOpenOptionsMenu()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void openOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchOpenOptionsMenu()>
<com.actionbarsherlock.app.SherlockListActivity: void openOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchOpenOptionsMenu()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void openOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchOpenOptionsMenu()>
<com.actionbarsherlock.app.SherlockActivity: void openOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchOpenOptionsMenu()>
<oauth.signpost.AbstractOAuthConsumer: java.lang.String sign(java.lang.String)> --> <oauth.signpost.signature.QueryStringSigningStrategy: void <init>()>
<com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState$1: com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState createFromParcel(android.os.Parcel)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState: void <init>(android.os.Parcel,com.actionbarsherlock.internal.widget.IcsProgressBar$1)>
<com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: android.preference.Preference findPreference(java.lang.CharSequence)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void setVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void setAnimation(android.view.animation.Animation)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void measureChildWithMargins(android.view.View,int,int,int,int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void measureChildWithMargins(android.view.View,int,int,int,int)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpServerConnection: void close()>
<com.matburt.mobileorg.OrgData.OrgFile: java.lang.String toString(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.lang.StringBuilder nodesToString(long,long,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.lang.StringBuilder nodesToString(long,long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.lang.StringBuilder nodesToString(long,long,android.content.ContentResolver)>
<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int)> --> <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)>
<org.apache.james.mime4j.message.Entity: void <init>(org.apache.james.mime4j.message.Entity)> --> <org.apache.james.mime4j.message.Header: void <init>(org.apache.james.mime4j.message.Header)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: java.lang.String getChangesString()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: android.content.ContentResolver getContentResolver()>
<com.actionbarsherlock.widget.ShareActionProvider: void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu)> --> <com.actionbarsherlock.view.SubMenu: void clear()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void MoreLexicalActions()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char BeginToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenRSA: byte[] getE()>
<com.actionbarsherlock.app.SherlockListFragment: void onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.app.SherlockListFragment: void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_0()>
<com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> --> <com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isHashed()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateDefaultLayoutParams()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateDefaultLayoutParams()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateDefaultLayoutParams()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateDefaultLayoutParams()>
<com.matburt.mobileorg.Services.TimeclockService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.TimeclockService: void showNotification(long)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_12()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_13()>
<com.twofortyfouram.locale.MarketActivity: android.app.Dialog onCreateDialog(int)> --> <com.twofortyfouram.locale.MarketActivity$3: void <init>(com.twofortyfouram.locale.MarketActivity)>
<com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelX11: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.ChannelX11: com.jcraft.jsch.Session getSession()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)>
<com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.ChannelSftp: void sendCLOSE(byte[])>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time time()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void ReInit(java.io.InputStream,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing: boolean expectBoolean()> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.Object expect(java.lang.Class)>
<com.dropbox.client2.jsonextract.JsonThing: java.lang.String expectString()> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.Object expect(java.lang.Class)>
<com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonMap expectMap()> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.Object expect(java.lang.Class)>
<com.dropbox.client2.jsonextract.JsonThing: java.lang.String expectStringOrNull()> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.Object expect(java.lang.Class)>
<com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonList expectList()> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.Object expect(java.lang.Class)>
<com.dropbox.client2.jsonextract.JsonThing: java.lang.Number expectNumber()> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.Object expect(java.lang.Class)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPostCreate(android.os.Bundle)>
<com.actionbarsherlock.app.SherlockActivity: void onPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPostCreate(android.os.Bundle)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPostCreate(android.os.Bundle)>
<com.actionbarsherlock.app.SherlockListActivity: void onPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPostCreate(android.os.Bundle)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPostCreate(android.os.Bundle)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>
<org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>
<org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int loadLogoFromManifest(android.app.Activity)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void browseTo(java.lang.String)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: java.lang.String getParentPath(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setUp(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setUp(boolean)>
<com.commonsware.cwac.merge.MergeAdapter: void addView(android.view.View,boolean)> --> <com.commonsware.cwac.merge.MergeAdapter: void addViews(java.util.List,boolean)>
<com.commonsware.cwac.merge.MergeAdapter: void addViews(java.util.List)> --> <com.commonsware.cwac.merge.MergeAdapter: void addViews(java.util.List,boolean)>
<org.apache.james.mime4j.message.MessageBuilder: void <init>(org.apache.james.mime4j.message.Entity)> --> <org.apache.james.mime4j.message.BodyFactory: void <init>()>
<com.matburt.mobileorg.OrgData.OrgProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> --> <com.matburt.mobileorg.util.SelectionBuilder: com.matburt.mobileorg.util.SelectionBuilder where(java.lang.String,java.lang.String[])>
<com.matburt.mobileorg.OrgData.OrgProvider: com.matburt.mobileorg.util.SelectionBuilder buildSelectionFromUri(android.net.Uri)> --> <com.matburt.mobileorg.util.SelectionBuilder: com.matburt.mobileorg.util.SelectionBuilder where(java.lang.String,java.lang.String[])>
<com.matburt.mobileorg.OrgData.OrgProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> --> <com.matburt.mobileorg.util.SelectionBuilder: com.matburt.mobileorg.util.SelectionBuilder where(java.lang.String,java.lang.String[])>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: com.matburt.mobileorg.util.SelectionBuilder getQuery(android.content.Context)> --> <com.matburt.mobileorg.util.SelectionBuilder: com.matburt.mobileorg.util.SelectionBuilder where(java.lang.String,java.lang.String[])>
<com.matburt.mobileorg.OrgData.OrgProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> --> <com.matburt.mobileorg.util.SelectionBuilder: com.matburt.mobileorg.util.SelectionBuilder where(java.lang.String,java.lang.String[])>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: void getFileSelection(com.matburt.mobileorg.util.SelectionBuilder,android.content.Context)> --> <com.matburt.mobileorg.util.SelectionBuilder: com.matburt.mobileorg.util.SelectionBuilder where(java.lang.String,java.lang.String[])>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String convertToHTML(java.lang.String)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String convertLinks(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void onAttach(android.app.Activity)> --> <com.matburt.mobileorg.Gui.ViewFragment: void onAttach(android.app.Activity)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.reflect.Method setupSetterOrGetter(java.lang.Class,java.util.HashMap,java.lang.String,java.lang.Class)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.reflect.Method getPropertyFunction(java.lang.Class,java.lang.String,java.lang.Class)>
<com.actionbarsherlock.widget.ActivityChooserModel$DefaultSorter: void <init>(com.actionbarsherlock.widget.ActivityChooserModel,com.actionbarsherlock.widget.ActivityChooserModel$1)> --> <com.actionbarsherlock.widget.ActivityChooserModel$DefaultSorter: void <init>(com.actionbarsherlock.widget.ActivityChooserModel)>
<org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)> --> <org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.StatusLine,org.apache.http.ReasonPhraseCatalog,java.util.Locale)>
<org.apache.http.impl.DefaultHttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)> --> <org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.StatusLine,org.apache.http.ReasonPhraseCatalog,java.util.Locale)>
<org.apache.http.impl.DefaultHttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext)> --> <org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.StatusLine,org.apache.http.ReasonPhraseCatalog,java.util.Locale)>
<org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.StatusLine)> --> <org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.StatusLine,org.apache.http.ReasonPhraseCatalog,java.util.Locale)>
<org.apache.james.mime4j.parser.MimeEntity: java.io.InputStream getLimitedContentStream()> --> <org.apache.james.mime4j.io.LimitedInputStream: void <init>(java.io.InputStream,long)>
<org.apache.http.entity.mime.FormBodyPart: void generateContentType(org.apache.james.mime4j.descriptor.ContentDescriptor)> --> <org.apache.james.mime4j.descriptor.ContentDescriptor: java.lang.String getMimeType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink share(java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.util.Date parseDate(java.lang.String)>
<com.dropbox.client2.DropboxAPI$DropboxLink: void <init>(java.util.Map,boolean)> --> <com.dropbox.client2.RESTUtility: java.util.Date parseDate(java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runViewNodeActivity()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setHasEmbeddedTabs(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setCollapsable(boolean)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setCollapsable(boolean)>
<com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void <init>()>
<com.matburt.mobileorg.OrgData.OrgEdit: void setOldValue(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgEdit$TYPE: int ordinal()>
<com.matburt.mobileorg.OrgData.OrgEdit$1: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgEdit$TYPE: int ordinal()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.Token: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.Token: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager)> --> <org.apache.james.mime4j.field.address.parser.Token: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.Token: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.Token: void <init>()>
<org.apache.james.mime4j.field.address.parser.Token: org.apache.james.mime4j.field.address.parser.Token newToken(int)> --> <org.apache.james.mime4j.field.address.parser.Token: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager)> --> <org.apache.james.mime4j.field.address.parser.Token: void <init>()>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()> --> <org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.parser.MimeTokenStream: java.io.InputStream getDecodedInputStream()> --> <org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.message.SimpleContentHandler: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.message.MessageBuilder: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeBase64(java.lang.String)> --> <org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream)>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxParseException: void <init>(java.io.BufferedReader)>
<com.matburt.mobileorg.Services.TimeclockService: void onCreate()> --> <com.matburt.mobileorg.Services.TimeclockService: android.app.Application getApplication()>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.field.FieldParser: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.field.DelegatingFieldParser: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.FieldParser: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void refresh()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void refresh()>
<com.matburt.mobileorg.Settings.SettingsActivity: void init()> --> <com.matburt.mobileorg.Settings.SettingsActivity: void initSettings()>
<oauth.signpost.AbstractOAuthConsumer: java.lang.String getTokenSecret()> --> <oauth.signpost.signature.OAuthMessageSigner: java.lang.String getTokenSecret()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onVisibilityChanged(android.view.View,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void startAnimation()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setIndeterminate(boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void startAnimation()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onAttachedToWindow()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void startAnimation()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setVisibility(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void startAnimation()>
<org.apache.james.mime4j.message.MessageWriter: void writeEntity(org.apache.james.mime4j.message.Entity,java.io.OutputStream)> --> <org.apache.james.mime4j.message.Entity: java.lang.String getContentTransferEncoding()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList runSynchronizer(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void showErrorNotification(java.lang.Exception)>
<com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> --> <com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void clearListSelection()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void requestLayout()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity$SynchServiceReceiver: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineActivity,com.matburt.mobileorg.Gui.Outline.OutlineActivity$1)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity$SynchServiceReceiver: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineActivity)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runViewNodeActivity()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runViewNodeActivity(long,android.content.Context)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runViewNodeActivity(long,android.content.Context)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStopAtPos(int,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: boolean hasVisibleItems()>
<com.actionbarsherlock.internal.view.StandaloneActionMode: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: boolean hasVisibleItems()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: boolean hasVisibleItems()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: boolean hasVisibleItems()>
<org.apache.http.params.HttpProtocolParams: void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.params.HttpProtocolParams: void setUserAgent(org.apache.http.params.HttpParams,java.lang.String)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.params.HttpProtocolParams: void setHttpElementCharset(org.apache.http.params.HttpParams,java.lang.String)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.params.HttpProtocolParams: void setContentCharset(org.apache.http.params.HttpParams,java.lang.String)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<com.dropbox.client2.RESTUtility: void updateClientProxy(org.apache.http.client.HttpClient,com.dropbox.client2.session.Session)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void connect()>
<com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> --> <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)>
<com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])> --> <com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)>
<com.jcraft.jsch.JSch: void removeAllIdentity()> --> <com.jcraft.jsch.JSch: java.util.Vector getIdentityNames()>
<com.jcraft.jsch.DHG1: void <init>()> --> <com.jcraft.jsch.KeyExchange: void <init>()>
<com.jcraft.jsch.DHG14: void <init>()> --> <com.jcraft.jsch.KeyExchange: void <init>()>
<com.jcraft.jsch.DHGEX: void <init>()> --> <com.jcraft.jsch.KeyExchange: void <init>()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void refreshDates()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String getDate()>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String toFormatedString()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String getDate()>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String toString()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String getDate()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$3: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment$OnPayloadModifiedListener: void onPayloadEndedEdit()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment$OnPayloadModifiedListener: void onPayloadEndedEdit()>
<com.matburt.mobileorg.Services.SyncService: void onCreate()> --> <com.matburt.mobileorg.Services.SyncService: java.lang.Object getSystemService(java.lang.String)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.MailboxList buildGroupBody(org.apache.james.mime4j.field.address.parser.ASTgroup_body)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: org.apache.james.mime4j.field.address.parser.Node next()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildMailbox(org.apache.james.mime4j.field.address.parser.ASTmailbox)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: org.apache.james.mime4j.field.address.parser.Node next()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAddrSpec(org.apache.james.mime4j.field.address.DomainList,org.apache.james.mime4j.field.address.parser.ASTaddr_spec)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: org.apache.james.mime4j.field.address.parser.Node next()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Address buildAddress(org.apache.james.mime4j.field.address.parser.ASTaddress)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: org.apache.james.mime4j.field.address.parser.Node next()>
<org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: java.lang.Object next()> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: org.apache.james.mime4j.field.address.parser.Node next()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildNameAddr(org.apache.james.mime4j.field.address.parser.ASTname_addr)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: org.apache.james.mime4j.field.address.parser.Node next()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAngleAddr(org.apache.james.mime4j.field.address.parser.ASTangle_addr)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: org.apache.james.mime4j.field.address.parser.Node next()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.DomainList buildRoute(org.apache.james.mime4j.field.address.parser.ASTroute)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: org.apache.james.mime4j.field.address.parser.Node next()>
<com.dropbox.client2.DropboxAPI$BasicUploadRequest: com.dropbox.client2.DropboxAPI$Entry upload()> --> <org.apache.http.client.methods.HttpUriRequest: boolean isAborted()>
<com.dropbox.client2.DropboxAPI$ChunkedUploadRequest: com.dropbox.client2.DropboxAPI$ChunkedUploadResponse upload()> --> <org.apache.http.client.methods.HttpUriRequest: boolean isAborted()>
<org.apache.james.mime4j.message.MessageBuilder: void preamble(java.io.InputStream)> --> <org.apache.james.mime4j.message.MessageBuilder: org.apache.james.mime4j.util.ByteSequence loadStream(java.io.InputStream)>
<org.apache.james.mime4j.message.MessageBuilder: void epilogue(java.io.InputStream)> --> <org.apache.james.mime4j.message.MessageBuilder: org.apache.james.mime4j.util.ByteSequence loadStream(java.io.InputStream)>
<com.jcraft.jsch.Session: void setServerAliveInterval(int)> --> <com.jcraft.jsch.Session: void setTimeout(int)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void refreshDates()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: void setToCurrentDate()>
<com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> --> <com.jcraft.jsch.SftpATTRS: int getATime()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: int getMaxAvailableHeight(android.view.View,int,boolean)>
<com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.SocketFactory: java.io.InputStream getInputStream(java.net.Socket)>
<com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.SocketFactory: java.io.InputStream getInputStream(java.net.Socket)>
<com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.SocketFactory: java.io.InputStream getInputStream(java.net.Socket)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.SocketFactory: java.io.InputStream getInputStream(java.net.Socket)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$TabListener getCallback()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void configureTab(com.actionbarsherlock.app.ActionBar$Tab,int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$TabListener getCallback()>
<com.jcraft.jsch.ChannelSftp: void quit()> --> <com.jcraft.jsch.ChannelSftp: void disconnect()>
<com.jcraft.jsch.ChannelSftp: void exit()> --> <com.jcraft.jsch.ChannelSftp: void disconnect()>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.Mailbox getMailbox(java.lang.String)> --> <org.apache.james.mime4j.field.MailboxField: org.apache.james.mime4j.field.address.Mailbox getMailbox()>
<org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)> --> <org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getVisibility()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getVisibility()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void hideProgressBars(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getVisibility()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void startAnimation()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getVisibility()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void showProgressBars(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getVisibility()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setVisibility(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getVisibility()>
<org.apache.james.mime4j.message.MessageWriter: void writeHeader(org.apache.james.mime4j.message.Header,java.io.OutputStream)> --> <org.apache.james.mime4j.parser.Field: org.apache.james.mime4j.util.ByteSequence getRaw()>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.james.mime4j.parser.Field: org.apache.james.mime4j.util.ByteSequence getRaw()>
<org.apache.james.mime4j.message.MessageBuilder: void field(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.parser.Field: org.apache.james.mime4j.util.ByteSequence getRaw()>
<org.apache.james.mime4j.message.SimpleContentHandler: void field(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.parser.Field: org.apache.james.mime4j.util.ByteSequence getRaw()>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupDataSetObserver: void onChanged()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>
<com.actionbarsherlock.widget.ActivityChooserView$2: void onGlobalLayout()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onGlobalLayout()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void start()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.Animator clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator clone()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runDeleteFileNode()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode$6: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineActionMode)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.json.JSONObject responseToJson(org.apache.http.HttpResponse)> --> <org.json.JSONObject: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setEmbeddedTabView(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: android.view.ViewGroup$LayoutParams getLayoutParams()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void setTabContainer(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: android.view.ViewGroup$LayoutParams getLayoutParams()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: android.view.ViewGroup$LayoutParams getLayoutParams()>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: com.dropbox.client2.DropboxAPI$Entry parseXDropboxMetadata(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.Header getFirstHeader(java.lang.String)>
<com.dropbox.client2.exception.DropboxServerException: java.lang.String getHeader(org.apache.http.HttpResponse,java.lang.String)> --> <org.apache.http.HttpResponse: org.apache.http.Header getFirstHeader(java.lang.String)>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.Header getFirstHeader(java.lang.String)>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: void <init>(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.Header getFirstHeader(java.lang.String)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.http.HttpParameters: void putAll(java.lang.String[],boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: android.view.View access$200(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runRecover()> --> <com.matburt.mobileorg.util.OrgFileNotFoundException: void printStackTrace()>
<com.jcraft.jsch.JSch: void setKnownHosts(java.io.InputStream)> --> <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)>
<com.jcraft.jsch.KnownHosts: void setKnownHosts(java.lang.String)> --> <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)>
<com.jcraft.jsch.ChannelSubsystem: void start()> --> <com.jcraft.jsch.ChannelSubsystem: void run()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void setFocusable(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: void <init>(android.content.Context,int,int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: void <init>(android.content.Context,int,int,int,int,java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.ViewFragment: void handleInternalOrgUrl(java.lang.String)> --> <com.matburt.mobileorg.util.OrgUtils: long getNodeFromPath(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.matburt.mobileorg.Gui.Wizard.DirectoryBrowser: boolean isCurrentDirectoryRoot()>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaFragment: com.commonsware.cwac.merge.MergeAdapter access$000(com.matburt.mobileorg.Gui.Agenda.AgendaFragment)>
<com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()> --> <com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void <init>(android.content.Context)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard$3: void run()> --> <com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void <init>(android.content.Context)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToTab(int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: boolean hasDividerBeforeChildAt(int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void updateTab(int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: java.lang.Object getItem(int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setTabSelected(int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersHorizontal(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener: void onClick(android.view.View)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersVertical(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: android.view.View getChildAt(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_0()>
<org.apache.http.message.BufferedHeader: org.apache.http.HeaderElement[] getElements()> --> <org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionInputBuffer createHttpDataReceiver(java.net.Socket,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void removeListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$DependencyListener: void startIfReady(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void removeListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void removeListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(byte[],boolean)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(byte[],int,boolean)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.impl.io.ChunkedInputStream: void <init>(org.apache.http.io.SessionInputBuffer)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerEdit: void <init>(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode findOriginalNode(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void setupTodoAndParentId(long)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode findOriginalNode(android.content.ContentResolver)>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String realpath(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.entity.BasicHttpEntity: void setContentLength(long)>
<org.apache.james.mime4j.field.address.Mailbox: void <clinit>()> --> <org.apache.james.mime4j.field.address.DomainList: void <init>(java.util.List,boolean)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.DomainList buildRoute(org.apache.james.mime4j.field.address.parser.ASTroute)> --> <org.apache.james.mime4j.field.address.DomainList: void <init>(java.util.List,boolean)>
<org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream,org.apache.james.mime4j.parser.MimeEntityConfig,org.apache.james.mime4j.storage.StorageProvider)> --> <org.apache.james.mime4j.parser.MimeStreamParser: void setContentHandler(org.apache.james.mime4j.parser.ContentHandler)>
<org.apache.james.mime4j.message.Header: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.parser.MimeStreamParser: void setContentHandler(org.apache.james.mime4j.parser.ContentHandler)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpClientConnection: void close()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void loginUbuntuOne()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()>
<com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.datetime.parser.Token: void <init>()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager)> --> <org.apache.james.mime4j.field.datetime.parser.Token: void <init>()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.Token: void <init>()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void ReInit(org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager)> --> <org.apache.james.mime4j.field.datetime.parser.Token: void <init>()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.datetime.parser.Token: void <init>()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.Token: void <init>()>
<org.apache.james.mime4j.field.datetime.parser.Token: org.apache.james.mime4j.field.datetime.parser.Token newToken(int)> --> <org.apache.james.mime4j.field.datetime.parser.Token: void <init>()>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.GSSContext: void dispose()>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: android.widget.FrameLayout access$900(com.actionbarsherlock.widget.ActivityChooserView)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parseLine(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: long getCurrentNodeId()>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parseHeading(java.lang.String,int)> --> <com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: long getCurrentNodeId()>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader)> --> <com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: long getCurrentNodeId()>
<org.apache.http.impl.io.SocketInputBuffer: boolean isDataAvailable(int)> --> <org.apache.http.impl.io.SocketInputBuffer: int fillBuffer()>
<com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.IO: void put(com.jcraft.jsch.Packet)>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String base64Encode(byte[])>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void ensureCheckedItemVisible()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: int getLastVisiblePosition()>
<org.apache.james.mime4j.util.CharsetUtil: java.lang.String toJavaCharset(java.lang.String)> --> <org.apache.james.mime4j.util.CharsetUtil$Charset: java.lang.String access$100(org.apache.james.mime4j.util.CharsetUtil$Charset)>
<org.apache.james.mime4j.util.CharsetUtil: void <clinit>()> --> <org.apache.james.mime4j.util.CharsetUtil$Charset: java.lang.String access$100(org.apache.james.mime4j.util.CharsetUtil$Charset)>
<com.actionbarsherlock.internal.app.ActionBarImpl: android.view.View getCustomView()> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.view.View getCustomNavigationView()>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void insert(java.lang.Object,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void insert(com.matburt.mobileorg.OrgData.OrgNode,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void insertAll(java.util.ArrayList,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void insert(com.matburt.mobileorg.OrgData.OrgNode,int)>
<com.dropbox.client2.DropboxAPI$DeltaPage: com.dropbox.client2.DropboxAPI$DeltaPage extractFromJson(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonThing: boolean expectBoolean()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void doRefreshProgress(int,int,boolean,boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void invalidate()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleForItemView(com.actionbarsherlock.internal.view.menu.MenuView$ItemView)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleForItemView(com.actionbarsherlock.internal.view.menu.MenuView$ItemView)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void onConfigurationChanged(android.content.res.Configuration)>
<com.actionbarsherlock.widget.ShareActionProvider: void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setOnMenuItemClickListener(com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setOnMenuItemClickListener(com.actionbarsherlock.view.MenuItem$OnMenuItemClickListener)>
<oauth.signpost.http.HttpParameters: void putAll(java.util.Map,boolean)> --> <oauth.signpost.http.HttpParameters: java.util.SortedSet put(java.lang.String,java.util.SortedSet,boolean)>
<com.jcraft.jsch.Channel: void sendSignal(java.lang.String)> --> <com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void insertIconView()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseLocation(java.lang.String)>
<com.matburt.mobileorg.Settings.SettingsActivity$1$1: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: void clearDB(android.content.ContentResolver)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_2(int,int)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendOPENDIR(byte[])>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendOPENDIR(byte[])>
<com.dropbox.client2.jsonextract.JsonThing: java.lang.Object optionalExtract(com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonThing: boolean isNull()>
<com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestPtyReq: boolean waitForReply()>
<com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <com.dropbox.client2.DropboxAPI$RequestAndResponse: void <init>(org.apache.http.client.methods.HttpUriRequest,org.apache.http.HttpResponse)>
<com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList generateApplyEditNodes(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void <init>(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgEdit$TYPE,java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: void addLogbook(long,long,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void <init>(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgEdit$TYPE,java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit createParentNewheading(android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void <init>(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgEdit$TYPE,java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,android.os.Bundle)> --> <com.actionbarsherlock.app.ActionBar$Tab: com.actionbarsherlock.app.ActionBar$Tab setTabListener(com.actionbarsherlock.app.ActionBar$TabListener)>
<com.jcraft.jsch.Util$1: void start()> --> <com.jcraft.jsch.Util$1: void run()>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpInetConnection: int getRemotePort()>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void showToast(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.DropboxSynchronizer$1: void <init>(com.matburt.mobileorg.Synchronizers.DropboxSynchronizer,java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putUrl(java.lang.String,java.lang.String)> --> <org.apache.http.client.methods.HttpPut: void <init>(java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <org.apache.http.client.methods.HttpPut: void <init>(java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploadRequest chunkedUploadRequest(java.io.InputStream,long,com.dropbox.client2.ProgressListener,long,java.lang.String)> --> <org.apache.http.client.methods.HttpPut: void <init>(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <org.apache.http.client.methods.HttpPut: void <init>(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void onPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void onPostCreate(android.os.Bundle)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropDownAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropDownAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void resetList()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setNextSelectedPositionInt(int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setSelection(int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setNextSelectedPositionInt(int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setSelectionInt(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setNextSelectedPositionInt(int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setAdapter(android.widget.SpinnerAdapter)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setNextSelectedPositionInt(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void ensureTabsExist()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: int getNavigationMode()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setHasEmbeddedTabs(boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: int getNavigationMode()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: int getNavigationMode()>
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine)> --> <org.apache.http.message.BasicHttpRequest: void <init>(org.apache.http.RequestLine)>
<org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)> --> <org.apache.http.message.BasicHttpRequest: void <init>(org.apache.http.RequestLine)>
<org.apache.http.message.BasicHttpEntityEnclosingRequest: void <init>(org.apache.http.RequestLine)> --> <org.apache.http.message.BasicHttpRequest: void <init>(org.apache.http.RequestLine)>
<com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> --> <com.jcraft.jsch.KeyPair: byte[] getKeyTypeName()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])> --> <org.apache.http.message.BasicHeaderElement: void <init>(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>
<org.apache.http.message.BasicHeaderElement: void <init>(java.lang.String,java.lang.String)> --> <org.apache.http.message.BasicHeaderElement: void <init>(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void <init>(com.actionbarsherlock.internal.widget.IcsSpinner,android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void setModal(boolean)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parseHeading(java.lang.String,int)> --> <com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: java.lang.String getCurrentTags()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView$1: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineListView)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity$SynchServiceReceiver: void onReceive(android.content.Context,android.content.Intent)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void setSupportProgressBarIndeterminate(boolean)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void addPage(android.view.View)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: android.view.View createSDcardFolderSelector()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void addPage(android.view.View)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.NullWizard: void createNullConfig()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void addPage(android.view.View)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxLogin()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void addPage(android.view.View)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuLogin()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void addPage(android.view.View)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: android.view.View createSSHConfig()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void addPage(android.view.View)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxList()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void addPage(android.view.View)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: android.view.View createWebDAVConfig()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void addPage(android.view.View)>
<org.apache.james.mime4j.field.UnstructuredField: java.lang.String getValue()> --> <org.apache.james.mime4j.field.UnstructuredField: void parse()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setVisible(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean setVisibleInt(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setGroupVisible(int,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean setVisibleInt(boolean)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.lang.String testConnection(java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.lang.String getRootUrl()>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.lang.String getRootUrl()>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.lang.String getRootUrl()>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onGlobalLayout()> --> <com.matburt.mobileorg.Gui.Wizard.WizardActivity: void selectPrevSource(android.content.Context)>
<com.actionbarsherlock.widget.ActivityChooserView$2: void onGlobalLayout()> --> <com.actionbarsherlock.view.ActionProvider: void subUiVisibilityChanged(boolean)>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.view.ActionProvider: void subUiVisibilityChanged(boolean)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onDismiss()> --> <com.actionbarsherlock.view.ActionProvider: void subUiVisibilityChanged(boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode$2: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: com.matburt.mobileorg.OrgData.OrgNode access$100(com.matburt.mobileorg.Gui.Outline.OutlineActionMode)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa1_0(long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa2_0(long,long)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void run()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean access$000(com.actionbarsherlock.internal.ActionBarSherlockCompat)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.ArrayList getDates(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodeDate: void <init>(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerCreate: void <init>(android.content.Intent,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: void <init>()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerEdit: void <init>(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: void <init>()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void <init>(long,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: void <init>()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig$EditActivityControllerCaptureWidget: void <init>(com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: void <init>()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerCreate: void <init>(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: void <init>()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void setupTodoAndParentId(long)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: java.lang.String getTodo(com.matburt.mobileorg.OrgData.OrgNode)>
<org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,org.apache.james.mime4j.field.address.DomainList,java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.field.address.Address: void <init>()>
<org.apache.james.mime4j.field.address.Group: void <init>(java.lang.String,org.apache.james.mime4j.field.address.MailboxList)> --> <org.apache.james.mime4j.field.address.Address: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: float getTranslationY()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: float getTranslationY()>
<com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: float getTranslationY()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: float getTranslationY()>
<com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> --> <com.jcraft.jsch.ChannelX11: void <init>()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void ReInit(java.io.InputStream,java.lang.String)>
<org.apache.james.mime4j.message.BodyCopier: org.apache.james.mime4j.message.Body copy(org.apache.james.mime4j.message.Body)> --> <org.apache.james.mime4j.message.Message: void <init>(org.apache.james.mime4j.message.Message)>
<com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> --> <com.jcraft.jsch.ChannelDirectTCPIP: void <init>()>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void <init>()>
<com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])>
<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)> --> <org.apache.http.ProtocolVersion: boolean isComparable(org.apache.http.ProtocolVersion)>
<org.apache.http.ProtocolVersion: boolean greaterEquals(org.apache.http.ProtocolVersion)> --> <org.apache.http.ProtocolVersion: boolean isComparable(org.apache.http.ProtocolVersion)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerCreate: boolean hasEdits(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: boolean equals(com.matburt.mobileorg.OrgData.OrgNode)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: boolean hasEdits(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: boolean equals(com.matburt.mobileorg.OrgData.OrgNode)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpExpectationVerifier: void verify(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.matburt.mobileorg.OrgData.OrgFile: long removeFile(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: long removeFileNode(android.content.ContentResolver)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void ping_u1_url(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing$OptionalExtractor: java.lang.Object extract(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.Object optionalExtract(com.dropbox.client2.jsonextract.JsonExtractor)>
<com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor: com.dropbox.client2.DropboxAPI$DeltaEntry extract(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.Object optionalExtract(com.dropbox.client2.jsonextract.JsonExtractor)>
<com.actionbarsherlock.app.SherlockListActivity: void setSupportSecondaryProgress(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setSecondaryProgress(int)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setSupportSecondaryProgress(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setSecondaryProgress(int)>
<com.actionbarsherlock.app.SherlockActivity: void setSupportSecondaryProgress(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setSecondaryProgress(int)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setSupportSecondaryProgress(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setSecondaryProgress(int)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setSupportSecondaryProgress(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setSecondaryProgress(int)>
<com.matburt.mobileorg.Plugin.SyncEditActivity$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Plugin.SyncEditActivity: void finish()>
<com.matburt.mobileorg.Plugin.SyncEditActivity$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Plugin.SyncEditActivity: void finish()>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <com.dropbox.client2.session.Session: void setRequestTimeout(org.apache.http.client.methods.HttpUriRequest)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void saveAgendaBlock()> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void replaceAgenda(com.matburt.mobileorg.Gui.Agenda.OrgAgenda,int,android.content.Context)>
<org.apache.james.mime4j.codec.EncoderUtil: void <clinit>()> --> <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void addMenuPresenter(com.actionbarsherlock.internal.view.menu.MenuPresenter)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter: void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.internal.widget.IcsProgressBar getCircularProgressBar(boolean)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void setContentView(int)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void initActionBar()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.internal.widget.IcsProgressBar getHorizontalProgressBar(boolean)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()>
<com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp$1: void close()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setSelectedNavigationItem(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setDropdownSelectedPosition(int)>
<org.apache.james.mime4j.field.address.AddressList: java.lang.Object get(int)> --> <org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.Address get(int)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.util.PreferenceUtils: java.lang.String getDefaultTodo()>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendSTAT(byte[])>
<com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendSTAT(byte[])>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void saveConfig()> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void save()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: boolean access$802(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator,boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setContentDescription(java.lang.CharSequence)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setContentDescription(java.lang.CharSequence)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setHomeButtonEnabled(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setContentDescription(java.lang.CharSequence)>
<oauth.signpost.AbstractOAuthConsumer: void collectHeaderParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.OAuth: oauth.signpost.http.HttpParameters oauthHeaderToParamsMap(java.lang.String)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void ReInit(java.io.InputStream,java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void setupDates()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onPayloadModified()> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void setupDates()>
<org.apache.james.mime4j.io.EOLConvertingInputStream: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.io.EOLConvertingInputStream: void <init>(java.io.InputStream,int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void setState(long[])> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void setState(long[])>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void addAgenda(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void setState(long[])>
<org.apache.http.protocol.BasicHttpProcessor: void clearInterceptors()> --> <org.apache.http.protocol.BasicHttpProcessor: void clearResponseInterceptors()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void performCollapse()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.IcsSpinner createSpinner()>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void setVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void clearAnimation()>
<com.commonsware.cwac.merge.MergeAdapter$CascadeDataSetObserver: void <init>(com.commonsware.cwac.merge.MergeAdapter,com.commonsware.cwac.merge.MergeAdapter$CascadeDataSetObserver)> --> <com.commonsware.cwac.merge.MergeAdapter$CascadeDataSetObserver: void <init>(com.commonsware.cwac.merge.MergeAdapter)>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void fillBuffer()> --> <org.apache.james.mime4j.codec.ByteQueue: int count()>
<org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)> --> <org.apache.james.mime4j.codec.ByteQueue: int count()>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void populatePushbackQueue()> --> <org.apache.james.mime4j.codec.ByteQueue: int count()>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: int read()> --> <org.apache.james.mime4j.codec.ByteQueue: int count()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char BeginToken()>
<com.matburt.mobileorg.Gui.TabsAdapter: void <init>(com.actionbarsherlock.app.SherlockFragmentActivity,android.support.v4.view.ViewPager)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()>
<org.apache.james.mime4j.message.Entity: void setMultipart(org.apache.james.mime4j.message.Multipart,java.util.Map)> --> <org.apache.james.mime4j.util.MimeUtil: java.lang.String createUniqueBoundary()>
<org.apache.james.mime4j.message.Entity: void setMultipart(org.apache.james.mime4j.message.Multipart)> --> <org.apache.james.mime4j.util.MimeUtil: java.lang.String createUniqueBoundary()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Session: void send_newkeys()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Session: void send_newkeys()>
<org.apache.http.protocol.SyncBasicHttpContext: java.lang.Object getAttribute(java.lang.String)> --> <org.apache.http.protocol.BasicHttpContext: java.lang.Object getAttribute(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: java.util.ArrayList readAgendas(android.content.Context)> --> <com.matburt.mobileorg.util.OrgUtils: java.lang.Object deserializeObject(byte[])>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList readAgendas(android.content.Context)> --> <com.matburt.mobileorg.util.OrgUtils: java.lang.Object deserializeObject(byte[])>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: byte get()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: boolean isEmpty()>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: byte remove()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: boolean isEmpty()>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendRMDIR(byte[])>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.lang.String value()> --> <org.apache.james.mime4j.field.contenttype.parser.ParseException: void <init>()>
<org.apache.james.mime4j.field.AddressListField: void parse()> --> <org.apache.commons.logging.Log: boolean isDebugEnabled()>
<org.apache.james.mime4j.field.ContentDispositionField: void parse()> --> <org.apache.commons.logging.Log: boolean isDebugEnabled()>
<org.apache.james.mime4j.util.CharsetUtil: void <clinit>()> --> <org.apache.commons.logging.Log: boolean isDebugEnabled()>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.commons.logging.Log: boolean isDebugEnabled()>
<org.apache.james.mime4j.field.DateTimeField: void parse()> --> <org.apache.commons.logging.Log: boolean isDebugEnabled()>
<org.apache.james.mime4j.field.MailboxField: void parse()> --> <org.apache.commons.logging.Log: boolean isDebugEnabled()>
<org.apache.james.mime4j.parser.AbstractEntity: void debug(org.apache.james.mime4j.parser.Event)> --> <org.apache.commons.logging.Log: boolean isDebugEnabled()>
<org.apache.james.mime4j.field.MailboxListField: void parse()> --> <org.apache.commons.logging.Log: boolean isDebugEnabled()>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Date parseDate(java.lang.String)> --> <org.apache.commons.logging.Log: boolean isDebugEnabled()>
<com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SftpATTRS: void <init>()>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.DirectoryBrowser: void browseTo(int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter: boolean flagActionItems()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void close()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void close()>
<com.jcraft.jsch.ChannelSftp: void access$600(com.jcraft.jsch.ChannelSftp,long)> --> <com.jcraft.jsch.ChannelSftp: void skip(long)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: void skip(long)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()> --> <org.apache.james.mime4j.util.MimeUtil: boolean isBase64Encoding(java.lang.String)>
<org.apache.james.mime4j.message.MessageWriter: java.io.OutputStream encodeStream(java.io.OutputStream,java.lang.String,boolean)> --> <org.apache.james.mime4j.util.MimeUtil: boolean isBase64Encoding(java.lang.String)>
<org.apache.james.mime4j.parser.MimeTokenStream: java.io.InputStream getDecodedInputStream()> --> <org.apache.james.mime4j.util.MimeUtil: boolean isBase64Encoding(java.lang.String)>
<org.apache.james.mime4j.message.SimpleContentHandler: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.util.MimeUtil: boolean isBase64Encoding(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setText(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setText(java.lang.CharSequence)>
<com.google.gdata.util.common.base.UnicodeEscaper: void <clinit>()> --> <com.google.gdata.util.common.base.UnicodeEscaper$2: void <init>()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void start()> --> <org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: void setPubKey(byte[],byte[])>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: void setPubKey(byte[],byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: void setPubKey(byte[],byte[])>
<com.dropbox.client2.session.AbstractSession$3: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>
<org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>
<org.apache.http.protocol.RequestConnControl: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>
<org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>
<com.dropbox.client2.session.AbstractSession: void sign(org.apache.http.HttpRequest)> --> <org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: java.lang.ThreadLocal access$500()>
<org.apache.http.impl.AbstractHttpServerConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageWriter createResponseWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>
<com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> --> <org.ietf.jgss.GSSManager: org.ietf.jgss.GSSContext createContext(org.ietf.jgss.GSSName,org.ietf.jgss.Oid,org.ietf.jgss.GSSCredential,int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int getPaddingLeft()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int getPaddingLeft()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int getPaddingRight()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int getPaddingRight()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()> --> <org.apache.james.mime4j.field.address.parser.ASTaddress_list: void <init>(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_1()>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void removeAgendaEntry(int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void removeAgenda(int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: int addAgenda(android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void writeAgendaEntry(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder,int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void replaceAgenda(com.matburt.mobileorg.Gui.Agenda.OrgAgenda,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: float getFloatValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: android.view.animation.Interpolator getInterpolator()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: android.view.animation.Interpolator getInterpolator()>
<org.apache.james.mime4j.field.address.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.address.parser.ParseException: java.lang.String add_escapes(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setActionViewExpanded(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setActionViewExpanded(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void onLayout(boolean,int,int,int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.message.MessageWriter: void <clinit>()> --> <org.apache.james.mime4j.message.MessageWriter: void <init>()>
<com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> --> <com.jcraft.jsch.KeyPair: byte[] getBegin()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState$1: java.lang.Object createFromParcel(android.os.Parcel)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState$1: com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState createFromParcel(android.os.Parcel)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean dispatchSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParentSafe(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateCaptureFile(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateFileFromAlias(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateCaptureFile(android.content.ContentResolver)>
<com.matburt.mobileorg.Services.CalendarSyncService: void assimilateCalendar()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateCaptureFile(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void setupTodoAndParentId(long)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateCaptureFile(android.content.ContentResolver)>
<org.apache.james.mime4j.field.ContentTypeField$1: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.ContentTypeField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<oauth.signpost.commonshttp.CommonsHttpOAuthProvider: oauth.signpost.http.HttpResponse sendRequest(oauth.signpost.http.HttpRequest)> --> <org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.ActionProvider getActionProvider()>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofFloat(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofKeyframe(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe[])>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.WizardView$PageSwipeDetector: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void access$300(com.matburt.mobileorg.Gui.Wizard.WizardView)>
<com.matburt.mobileorg.Gui.Wizard.WizardView$NextPageButtonListener: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void access$300(com.matburt.mobileorg.Gui.Wizard.WizardView)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setAlpha(float)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setAlpha(float)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>(3);     default: goto $r3_2 = $r0.<org.apache.james.mime4j.field.address.parser.AddressListParser: int[] jj_la1>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>(3);     default: goto $r3_2 = $r0.<org.apache.james.mime4j.field.address.parser.AddressListParser: int[] jj_la1>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void route()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>(3);     default: goto $r3_2 = $r0.<org.apache.james.mime4j.field.address.parser.AddressListParser: int[] jj_la1>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getBeginColumn()>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String getConsumerSecret()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: com.matburt.mobileorg.OrgData.OrgNode getEditedNode()> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: java.lang.String getPayload()>
<org.apache.james.mime4j.field.contenttype.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.contenttype.parser.ParseException: java.lang.String add_escapes(java.lang.String)>
<com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey createHashedHostKey(java.lang.String,byte[])> --> <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,byte[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void <clinit>()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.FloatEvaluator: void <init>()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseIndexFile()> --> <com.matburt.mobileorg.OrgData.OrgFileParser: java.util.ArrayList getTagsFromIndex(java.lang.String)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.AddressList buildAddressList(org.apache.james.mime4j.field.address.parser.ASTaddress_list)> --> <org.apache.james.mime4j.field.address.parser.ASTaddress_list: int jjtGetNumChildren()>
<com.matburt.mobileorg.OrgData.OrgEdit: java.lang.String editsToString(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void <init>(android.database.Cursor)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpServerConnection: void flush()>
<org.apache.james.mime4j.message.Header: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.parser.MimeStreamParser: void <init>()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer,int)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: void insertOrReplaceDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String formatDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE,java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String toFormatedString()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String formatDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE,java.lang.String)>
<com.matburt.mobileorg.OrgData.CalendarEntry: com.matburt.mobileorg.OrgData.OrgNode convertToOrgNode()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String formatDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE,java.lang.String)>
<org.apache.http.impl.AbstractHttpClientConnection: boolean isStale()> --> <org.apache.http.impl.AbstractHttpClientConnection: boolean isEof()>
<org.apache.james.mime4j.field.ContentDispositionField: void parse()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: java.lang.String getDispositionType()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_1()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void onFinishInflate()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setOnClickListener(android.view.View$OnClickListener)>
<com.matburt.mobileorg.Services.TimeclockService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.TimeclockService: void setUpdateAlarm()>
<com.commonsware.cwac.merge.MergeAdapter: void addView(android.view.View)> --> <com.commonsware.cwac.merge.MergeAdapter: void addView(android.view.View,boolean)>
<com.actionbarsherlock.internal.app.ActionBarImpl: java.lang.CharSequence getSubtitle()> --> <com.actionbarsherlock.internal.widget.ActionBarView: java.lang.CharSequence getSubtitle()>
<org.apache.james.mime4j.storage.TempFileStorageProvider$TempFileStorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()> --> <org.apache.james.mime4j.storage.TempFileStorageProvider$TempFileStorage: void <init>(java.io.File)>
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor)> --> <org.apache.http.protocol.BasicHttpProcessor: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void jjCheckNAddStates(int,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void jjCheckNAddTwoStates(int,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void jjCheckNAddStates(int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void jjCheckNAdd(int)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa0_2()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_3(int,int)>
<com.matburt.mobileorg.Services.CalendarComptabilityWrappers: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Services.CalendarComptabilityWrappers: void initCalendar()>
<com.actionbarsherlock.internal.widget.CapitalizingTextView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.CapitalizingTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.internal.widget.CapitalizingTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuInflater$InflatedOnMenuItemClickListener: void <init>(android.content.Context,java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofObject(java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofObject(float)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.message.HeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.james.mime4j.message.MessageBuilder: void epilogue(java.io.InputStream)> --> <org.apache.james.mime4j.message.Multipart: void setEpilogueRaw(org.apache.james.mime4j.util.ByteSequence)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getVisibility()>
<com.actionbarsherlock.internal.app.ActionBarImpl: boolean isShowing()> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getVisibility()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getVisibility()>
<com.matburt.mobileorg.OrgData.OrgProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> --> <com.matburt.mobileorg.OrgData.OrgProvider: com.matburt.mobileorg.util.SelectionBuilder buildSelectionFromUri(android.net.Uri)>
<com.matburt.mobileorg.OrgData.OrgProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgProvider: com.matburt.mobileorg.util.SelectionBuilder buildSelectionFromUri(android.net.Uri)>
<com.matburt.mobileorg.OrgData.OrgProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> --> <com.matburt.mobileorg.OrgData.OrgProvider: com.matburt.mobileorg.util.SelectionBuilder buildSelectionFromUri(android.net.Uri)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.ParseException generateParseException()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ParseException: void <init>(org.apache.james.mime4j.field.contentdisposition.parser.Token,int[][],java.lang.String[])>
<oauth.signpost.AbstractOAuthProvider: java.lang.String retrieveRequestToken(oauth.signpost.OAuthConsumer,java.lang.String)> --> <oauth.signpost.OAuthConsumer: java.lang.String getToken()>
<oauth.signpost.AbstractOAuthProvider: void retrieveAccessToken(oauth.signpost.OAuthConsumer,java.lang.String)> --> <oauth.signpost.OAuthConsumer: java.lang.String getToken()>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void setDefaultActivity(int)>
<org.apache.james.mime4j.field.MailboxListField: void parse()> --> <org.apache.james.mime4j.field.MailboxListField: java.lang.String getBody()>
<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo[] loadVersionInfo(java.lang.String[],java.lang.ClassLoader)> --> <org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader)>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,int)> --> <org.apache.james.mime4j.field.address.parser.Node: void jjtAddChild(org.apache.james.mime4j.field.address.parser.Node,int)>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)> --> <org.apache.james.mime4j.field.address.parser.Node: void jjtAddChild(org.apache.james.mime4j.field.address.parser.Node,int)>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncNode(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.util.MultiMap,java.lang.String)> --> <com.matburt.mobileorg.Services.CalendarSyncService: boolean shouldInsertEntry(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeDate)>
<org.apache.james.mime4j.codec.EncoderUtil: void <clinit>()> --> <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("=_?\"#$%&\'(),.:;<>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.ViewActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.view.MenuItem: boolean expandActionView()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.view.MenuItem: boolean expandActionView()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode access$502(com.actionbarsherlock.internal.ActionBarSherlockCompat,com.actionbarsherlock.view.ActionMode)>
<com.actionbarsherlock.internal.app.ActionBarImpl$2: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ActionBarContainer access$100(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ActionBarContainer access$100(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.jcraft.jsch.ChannelSftp$1: void close()> --> <com.jcraft.jsch.ChannelSftp: boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp$2: void close()> --> <com.jcraft.jsch.ChannelSftp: boolean access$400(com.jcraft.jsch.ChannelSftp,byte[],com.jcraft.jsch.ChannelSftp$Header)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setContentDescription(java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<org.json.simple.JSONObject: java.lang.String toJSONString(java.lang.String,java.lang.Object,java.lang.StringBuffer)> --> <org.json.simple.JSONValue: void escape(java.lang.String,java.lang.StringBuffer)>
<org.json.simple.JSONValue: java.lang.String escape(java.lang.String)> --> <org.json.simple.JSONValue: void escape(java.lang.String,java.lang.StringBuffer)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int measureHeightOfChildren(int,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: android.graphics.drawable.Drawable getDivider()>
<com.matburt.mobileorg.Gui.TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,android.os.Bundle)> --> <com.actionbarsherlock.app.ActionBar: void addTab(com.actionbarsherlock.app.ActionBar$Tab)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStopStringLiteralDfa_0(int,long)>
<org.apache.james.mime4j.message.Entity: boolean isMimeType(java.lang.String)> --> <org.apache.james.mime4j.message.Entity: java.lang.String getMimeType()>
<org.apache.james.mime4j.message.Entity: boolean isMultipart()> --> <org.apache.james.mime4j.message.Entity: java.lang.String getMimeType()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void <init>(android.app.Dialog)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$1: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void <init>(android.app.Activity,int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$1: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.MailboxList buildGroupBody(org.apache.james.mime4j.field.address.parser.ASTgroup_body)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: boolean hasNext()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.DomainList buildRoute(org.apache.james.mime4j.field.address.parser.ASTroute)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: boolean hasNext()>
<org.apache.http.impl.io.ContentLengthInputStream: int read()> --> <org.apache.http.io.SessionInputBuffer: int read()>
<org.apache.http.impl.io.ChunkedInputStream: int read()> --> <org.apache.http.io.SessionInputBuffer: int read()>
<org.apache.http.impl.io.ChunkedInputStream: int getChunkSize()> --> <org.apache.http.io.SessionInputBuffer: int read()>
<org.apache.http.impl.io.IdentityInputStream: int read()> --> <org.apache.http.io.SessionInputBuffer: int read()>
<org.apache.http.message.BufferedHeader: org.apache.http.HeaderElement[] getElements()> --> <org.apache.http.message.ParserCursor: void updatePos(int)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: void updatePos(int)>
<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: void updatePos(int)>
<org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()> --> <org.apache.http.message.ParserCursor: void updatePos(int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: void updatePos(int)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: void updatePos(int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> --> <org.apache.http.message.ParserCursor: void updatePos(int)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setVisible(boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity$SynchServiceReceiver: void onReceive(android.content.Context,android.content.Intent)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setVisible(boolean)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setVisible(boolean)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setVisible(boolean)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setVisible(boolean)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onMenuItemSelected(int,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.dropbox.client2.session.AbstractSession$4: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <com.dropbox.client2.session.AbstractSession$GzipDecompressingEntity: void <init>(org.apache.http.HttpEntity)>
<com.matburt.mobileorg.util.OrgUtils: boolean isNetworkOnline(android.content.Context)> --> <com.matburt.mobileorg.util.OrgUtils: boolean isMobileOnline(android.content.Context)>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.Session: java.lang.String getHost()>
<com.jcraft.jsch.ChannelExec: void start()> --> <com.jcraft.jsch.Session: java.lang.String getHost()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void finish()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void sendAccessibilityEvent(int)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: android.os.Handler access$1000(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor: boolean onTouch(android.view.View,android.view.MotionEvent)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: android.os.Handler access$1000(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: com.matburt.mobileorg.Gui.Capture.DateTableRow getDateTableRow(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: void <init>(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_3()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void refreshDates()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String getStartTime()>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String getStartTimeFormated()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String getStartTime()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getSubtitle()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: java.lang.CharSequence getSubtitle()>
<com.actionbarsherlock.internal.view.StandaloneActionMode: java.lang.CharSequence getSubtitle()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: java.lang.CharSequence getSubtitle()>
<com.matburt.mobileorg.OrgData.OrgFile: void <init>(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$Files: android.net.Uri buildIdUri(java.lang.Long)>
<com.matburt.mobileorg.OrgData.OrgFile: long removeFileNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$Files: android.net.Uri buildIdUri(java.lang.Long)>
<com.actionbarsherlock.view.MenuInflater$MenuState: java.lang.Object newInstance(java.lang.String,java.lang.Class[],java.lang.Object[])> --> <com.actionbarsherlock.view.MenuInflater: android.content.Context access$100(com.actionbarsherlock.view.MenuInflater)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void readGroup(android.util.AttributeSet)> --> <com.actionbarsherlock.view.MenuInflater: android.content.Context access$100(com.actionbarsherlock.view.MenuInflater)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void readItem(android.util.AttributeSet)> --> <com.actionbarsherlock.view.MenuInflater: android.content.Context access$100(com.actionbarsherlock.view.MenuInflater)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuInflater: android.content.Context access$100(com.actionbarsherlock.view.MenuInflater)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void removePagesAfter(int)> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: void removeViewAt(int)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeAddressDisplayName(java.lang.String)> --> <org.apache.james.mime4j.codec.EncoderUtil: boolean isAtomPhrase(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void setBulkRequests(int)> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: void <init>(com.jcraft.jsch.ChannelSftp,int)>
<com.jcraft.jsch.ChannelSftp: void <init>()> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: void <init>(com.jcraft.jsch.ChannelSftp,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: java.lang.String GetImage()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: java.lang.String GetImage()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: android.content.Context getThemedContext()>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setCustomView(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: android.content.Context getThemedContext()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: android.content.Context getThemedContext()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: android.content.Context getThemedContext()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl,com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: android.content.Context getThemedContext()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: com.actionbarsherlock.view.MenuInflater getMenuInflater()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: android.content.Context getThemedContext()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setCustomView(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: android.content.Context getThemedContext()>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.message.BasicHttpResponse: void setStatusCode(int)> --> <org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.message.BasicLineFormatter: void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)> --> <org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.message.BasicHttpResponse: org.apache.http.ProtocolVersion getProtocolVersion()> --> <org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.message.BasicHttpResponse: void setLocale(java.util.Locale)> --> <org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.message.BasicHttpResponse: void setReasonPhrase(java.lang.String)> --> <org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>
<com.dropbox.client2.RESTUtility: org.apache.http.client.HttpClient updatedHttpClient(com.dropbox.client2.session.Session)> --> <com.dropbox.client2.session.Session: org.apache.http.client.HttpClient getHttpClient()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerCreate: void <init>(android.content.Intent,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void addAutomaticTimestamp()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void <init>(long,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void addAutomaticTimestamp()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerCreate: void <init>(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void addAutomaticTimestamp()>
<com.dropbox.client2.android.AuthActivity: void onResume()> --> <com.dropbox.client2.android.AuthActivity: void startWebAuth()>
<org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader)> --> <org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader,org.json.simple.parser.ContainerFactory)>
<org.json.simple.parser.JSONParser: java.lang.Object parse(java.lang.String,org.json.simple.parser.ContainerFactory)> --> <org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader,org.json.simple.parser.ContainerFactory)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setEnabled(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setEnabled(boolean)>
<com.jcraft.jsch.Channel: void sendSignal(java.lang.String)> --> <com.jcraft.jsch.RequestSignal: void setSignal(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void setupEndValues()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void setupEndValues()>
<com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()> --> <com.matburt.mobileorg.Gui.SynchronizerNotification: void <init>(android.content.Context)>
<org.apache.http.message.BasicLineParser: void <init>()> --> <org.apache.http.message.BasicLineParser: void <init>(org.apache.http.ProtocolVersion)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void setupDoneButton(android.view.View)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: java.lang.String getScheduled()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void announceDateModified(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: java.lang.String getScheduled()>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<com.dropbox.client2.android.AuthActivity: void startWebAuth()> --> <com.dropbox.client2.android.AuthActivity: void startActivity(android.content.Intent)>
<com.dropbox.client2.android.AuthActivity: void onResume()> --> <com.dropbox.client2.android.AuthActivity: void startActivity(android.content.Intent)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$DependencyListener: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet,com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node,int)>
<com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setMeasuredDimension(int,int)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry putFileOverwrite(java.lang.String,java.io.InputStream,long,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$UploadRequest: com.dropbox.client2.DropboxAPI$Entry upload()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry putFile(java.lang.String,java.io.InputStream,long,java.lang.String,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$UploadRequest: com.dropbox.client2.DropboxAPI$Entry upload()>
<com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> --> <com.jcraft.jsch.SftpATTRS: void setACMODTIME(int,int)>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNode: void addLogbook(long,long,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.StringBuilder addLogbook(java.lang.StringBuilder,long,long,java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void start()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: int getChildCount()>
<com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> --> <com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])>
<com.actionbarsherlock.widget.ShareActionProvider: android.view.View onCreateActionView()> --> <com.actionbarsherlock.widget.ActivityChooserView: void setExpandActivityOverflowButtonDrawable(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet clone()>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void promptForNewFile()> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: android.content.Context getContext()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.language.parser.Token)>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxList()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void notifyDataSetChanged()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void notifyDataSetChanged()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: android.view.View createSDcardFolderSelector()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void notifyDataSetChanged()>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter$2: void onCheckedChanged(android.widget.CompoundButton,boolean)> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void notifyDataSetChanged()>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void notifyDataSetChanged()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getChildCount()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: android.os.Parcelable onSaveInstanceState()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState: void <init>()>
<com.jcraft.jsch.Session: java.lang.String[] getPortForwardingL()> --> <com.jcraft.jsch.PortWatcher: java.lang.String[] getPortForwarding(com.jcraft.jsch.Session)>
<org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.field.address.Mailbox: java.lang.String getDomain()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment$1: void onDateTableRowModified(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void access$000(com.matburt.mobileorg.Gui.Capture.DatesFragment,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void access$000(com.matburt.mobileorg.Gui.Agenda.AgendasFragment,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: android.content.Context getContext()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: android.content.Context getContext()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.IcsSpinner createSpinner()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: android.content.Context getContext()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.IcsLinearLayout createTabLayout()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: android.content.Context getContext()>
<org.apache.james.mime4j.storage.CipherStorageProvider: javax.crypto.spec.SecretKeySpec getSecretKeySpec()> --> <javax.crypto.SecretKey: byte[] getEncoded()>
<com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: void onPause()> --> <com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: void onResume()> --> <com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: void <init>()> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: void browseTo(java.lang.String)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: void browseTo(java.lang.String)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: void browseTo(java.lang.String)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper: com.actionbarsherlock.view.MenuInflater getMenuInflater()> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: com.actionbarsherlock.view.MenuInflater getMenuInflater()>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer$1: void start()> --> <com.matburt.mobileorg.Synchronizers.DropboxSynchronizer$1: void run()>
<org.apache.james.mime4j.message.StringTextBody: org.apache.james.mime4j.message.SingleBody copy()> --> <org.apache.james.mime4j.message.StringTextBody: org.apache.james.mime4j.message.StringTextBody copy()>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor)> --> <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter$2: void <init>(com.matburt.mobileorg.Gui.Wizard.FolderAdapter)>
<com.matburt.mobileorg.OrgData.CalendarEntry: boolean equals(java.lang.Object)> --> <com.matburt.mobileorg.OrgData.OrgNodeDate: java.lang.String getTitle()>
<com.matburt.mobileorg.Services.CalendarWrapper: java.lang.String insertEntry(com.matburt.mobileorg.OrgData.OrgNodeDate,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodeDate: java.lang.String getTitle()>
<oauth.signpost.commonshttp.HttpResponseAdapter: java.io.InputStream getContent()> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: long parseFileSize(org.apache.http.HttpResponse,com.dropbox.client2.DropboxAPI$Entry)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<com.dropbox.client2.RESTUtility: java.util.Map parseAsQueryString(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<org.apache.http.impl.AbstractHttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void <init>(org.apache.http.client.methods.HttpUriRequest,org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.InputStream getUrl(java.lang.String)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.json.JSONObject responseToJson(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<com.dropbox.client2.session.AbstractSession$4: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<oauth.signpost.commonshttp.CommonsHttpOAuthProvider: void closeConnection(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>
<org.apache.james.mime4j.message.MessageBuilder: org.apache.james.mime4j.util.ByteSequence loadStream(java.io.InputStream)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>
<org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: int doReadLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>
<org.apache.james.mime4j.message.Multipart: java.lang.String getPreamble()> --> <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParsedField parse(org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.message.Multipart: java.lang.String getEpilogue()> --> <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(org.apache.james.mime4j.util.ByteSequence)>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserInfo: boolean promptPassword(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState$1: java.lang.Object createFromParcel(android.os.Parcel)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState$1: com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState createFromParcel(android.os.Parcel)>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter$1: void <init>(com.matburt.mobileorg.Gui.Wizard.FolderAdapter)>
<org.apache.http.impl.AbstractHttpClientConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.io.SessionOutputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>
<org.apache.http.impl.AbstractHttpServerConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.io.SessionOutputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>
<com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> --> <org.ietf.jgss.GSSManager: org.ietf.jgss.GSSName createName(java.lang.String,org.ietf.jgss.Oid)>
<com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> --> <com.jcraft.jsch.JSchException: java.lang.String toString()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.JSchException: java.lang.String toString()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem getItem(int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem getItem(int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem getItem(int)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void setContentWidth(int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setEvaluator(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setEvaluator(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofObject(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator,java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setEvaluator(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion createProtocolVersion(int,int)>
<com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()> --> <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob_rsa()>
<com.matburt.mobileorg.OrgData.OrgEdit: void <init>(android.database.Cursor)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void set(android.database.Cursor)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: int getBeginColumn()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.Animator setDuration(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet setDuration(long)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getTags()>
<com.jcraft.jsch.ChannelSftp: void <init>()> --> <com.jcraft.jsch.ChannelSftp: void setLocalWindowSizeMax(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser$LookaheadSuccess: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser$1)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser$LookaheadSuccess: void <init>()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.OrgData.OrgNode getParentOrgNode()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: long[] getState()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: java.lang.Object getItem(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: int findParent(int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: java.lang.Object getItem(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: java.lang.Object getItem(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void expand(int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: java.lang.Object getItem(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void initActionMode(android.widget.ListView,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: java.lang.Object getItem(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void collapseCurrent()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: java.lang.Object getItem(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void collapseExpand(int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: java.lang.Object getItem(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: long getItemId(int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: java.lang.Object getItem(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void collapse(com.matburt.mobileorg.OrgData.OrgNode,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: java.lang.Object getItem(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: java.lang.Object getItem(int)>
<org.apache.james.mime4j.codec.EncoderUtil: boolean isAtomPhrase(java.lang.String)> --> <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>
<org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(java.lang.String)> --> <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>
<com.matburt.mobileorg.Gui.ViewFragment$InternalWebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> --> <com.matburt.mobileorg.Gui.ViewFragment: void startActivity(android.content.Intent)>
<com.matburt.mobileorg.Gui.ViewFragment: void handleInternalOrgUrl(java.lang.String)> --> <com.matburt.mobileorg.Gui.ViewFragment: void startActivity(android.content.Intent)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setupTodo(java.lang.String,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: boolean isTodoActive(java.lang.String,android.content.ContentResolver)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean hasExpandedActionView()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> --> <org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setVisibility(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setVisibility(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setVisibility(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setVisibility(int)>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendREMOVE(byte[])>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: android.widget.PopupWindow access$800(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void start()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: android.widget.PopupWindow access$800(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor: boolean onTouch(android.view.View,android.view.MotionEvent)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: android.widget.PopupWindow access$800(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<org.apache.james.mime4j.field.datetime.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: java.lang.String getPriority()>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: com.matburt.mobileorg.OrgData.OrgNode getEditedOrgNode()> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: java.lang.String getPriority()>
<com.dropbox.client2.DropboxAPI$ThumbSize: void <clinit>()> --> <com.dropbox.client2.DropboxAPI$ThumbSize: void <init>(java.lang.String,int,java.lang.String)>
<com.actionbarsherlock.widget.ActivityChooserView: void onDetachedFromWindow()> --> <com.actionbarsherlock.widget.ActivityChooserView: android.view.ViewTreeObserver getViewTreeObserver()>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.widget.ActivityChooserView: android.view.ViewTreeObserver getViewTreeObserver()>
<com.actionbarsherlock.widget.ActivityChooserView: boolean dismissPopup()> --> <com.actionbarsherlock.widget.ActivityChooserView: android.view.ViewTreeObserver getViewTreeObserver()>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem findItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getItemId()>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: java.lang.String getActionViewStatesKey()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getItemId()>
<com.actionbarsherlock.internal.widget.ActionBarView: android.os.Parcelable onSaveInstanceState()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getItemId()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getItemId()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getItemId()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: int findItemIndex(int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getItemId()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.actionbarsherlock.internal.app.ActionBarImpl$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: int access$300(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: int access$1100(com.jcraft.jsch.ChannelSftp,byte[],int,int)>
<com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void setVisibility(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void setVisibility(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void finish()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ActionBarView access$600(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: int size()>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: int size()>
<com.jcraft.jsch.ChannelSftp: int getBulkRequests()> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: int size()>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <org.xmlpull.v1.XmlPullParser: int next()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <org.xmlpull.v1.XmlPullParser: int next()>
<com.matburt.mobileorg.Services.SyncService: void runSynchronizer()> --> <com.matburt.mobileorg.Services.SyncService: void unsetAlarm()>
<com.matburt.mobileorg.Services.SyncService: void onDestroy()> --> <com.matburt.mobileorg.Services.SyncService: void unsetAlarm()>
<com.matburt.mobileorg.Services.SyncService: void resetAlarm()> --> <com.matburt.mobileorg.Services.SyncService: void unsetAlarm()>
<com.matburt.mobileorg.Services.SyncService: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Services.SyncService: void unsetAlarm()>
<com.matburt.mobileorg.Services.SyncService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.SyncService: void unsetAlarm()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseMimeVersion(java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: int getMajorVersion()>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ExpandBuff(boolean)>
<com.matburt.mobileorg.OrgData.OrgNode: void updateAllNodes(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: int updateNode(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: void write(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: int updateNode(android.content.ContentResolver)>
<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendREALPATH(byte[])>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntityEnclosingRequest: boolean expectContinue()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntityEnclosingRequest: boolean expectContinue()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>
<org.apache.james.mime4j.message.MessageWriter: void writeBytes(org.apache.james.mime4j.util.ByteSequence,java.io.OutputStream)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>
<org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.james.mime4j.util.ByteArrayBuffer,java.io.OutputStream)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>
<org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,org.apache.james.mime4j.util.ByteSequence,int,int)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>
<org.apache.james.mime4j.storage.MemoryStorageProvider$MemoryStorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void measureChildWithMargins(android.view.View,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getChildCount()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: boolean hasDividerBeforeChildAt(int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getChildCount()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: int getCount()> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getChildCount()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setTabSelected(int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getChildCount()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersHorizontal(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getChildCount()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener: void onClick(android.view.View)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getChildCount()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getChildCount()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersVertical(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getChildCount()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgress(int)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void incrementProgressBy(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgress(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateProgressBars(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgress(int)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgress(int)>
<org.json.simple.JSONObject: java.lang.String toString()> --> <org.json.simple.JSONObject: java.lang.String toJSONString()>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <init>(java.io.Reader)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void <init>()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void <init>()>
<org.apache.james.mime4j.parser.AbstractEntity: boolean parseField()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void setLength(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> --> <org.apache.http.io.HttpMessageWriter: void write(org.apache.http.HttpMessage)>
<org.apache.http.impl.AbstractHttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)> --> <org.apache.http.io.HttpMessageWriter: void write(org.apache.http.HttpMessage)>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void addItemView(android.view.View,int)>
<com.jcraft.jsch.IdentityFile: boolean setPassphrase(byte[])> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.KeyPairRSA: void dispose()> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.KeyPairDSA: void dispose()> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.KeyPair: boolean decrypt(byte[])> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.KeyPair: void dispose()> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.IdentityFile: void clear()> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Util: void bzero(byte[])>
<com.matburt.mobileorg.Services.TimeclockDialog: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Services.TimeclockDialog: boolean requestWindowFeature(int)>
<org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: void setStatusCode(int)>
<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: void setStatusCode(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()>
<org.apache.http.impl.SocketHttpClientConnection: void close()> --> <org.apache.http.impl.SocketHttpClientConnection: void doFlush()>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)>
<com.dropbox.client2.DropboxAPI$Entry$1: void <init>()> --> <com.dropbox.client2.jsonextract.JsonExtractor: void <init>()>
<com.dropbox.client2.jsonextract.JsonList$Extractor: void <init>(com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonExtractor: void <init>()>
<com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor: void <init>(com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonExtractor: void <init>()>
<com.dropbox.client2.jsonextract.JsonThing$OptionalExtractor: void <init>(com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonExtractor: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarView: void configPresenters(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void announceDateModified(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment$OnDatesModifiedListener: void onDatesModified()>
<com.actionbarsherlock.widget.ActivityChooserView$1: void onInvalidated()> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void notifyDataSetInvalidated()>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void setVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void setAnimation(android.view.animation.Animation)>
<org.apache.james.mime4j.codec.CodecUtil: java.io.OutputStream wrapQuotedPrintable(java.io.OutputStream,boolean)> --> <org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void <init>(java.io.OutputStream,boolean)>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void connect()> --> <com.jcraft.jsch.JSchException: java.lang.String getLocalizedMessage()>
<com.matburt.mobileorg.Services.TimeclockDialog$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Services.TimeclockDialog: int access$100(com.matburt.mobileorg.Services.TimeclockDialog)>
<com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> --> <com.matburt.mobileorg.Services.TimeclockDialog: int access$100(com.matburt.mobileorg.Services.TimeclockDialog)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void addRemoteWindowSize(int)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Channel: void addRemoteWindowSize(int)>
<org.apache.james.mime4j.message.Entity: java.lang.String getCharset()> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getCharset(org.apache.james.mime4j.field.ContentTypeField)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: long[] getState()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: long[] getState()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <clinit>()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$3: void <init>()>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.OAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofObject(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator,java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setObjectValues(java.lang.Object[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setObjectValues(java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setObjectValues(java.lang.Object[])>
<org.apache.james.mime4j.util.MimeUtil: java.lang.String unfold(java.lang.String)> --> <org.apache.james.mime4j.util.MimeUtil: java.lang.String unfold0(java.lang.String,int)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void connect()> --> <com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: com.dropbox.client2.android.AndroidAuthSession buildSession()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void ReInit(org.apache.james.mime4j.field.datetime.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void <init>(org.apache.james.mime4j.field.datetime.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void SwitchTo(int)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void setupFileList(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getFilenames(android.content.ContentResolver)>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncFiles()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getFilenames(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.SearchActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.SearchActivity: android.view.View findViewById(int)>
<org.apache.james.mime4j.util.StringArrayMap: java.util.Map getMap()> --> <org.apache.james.mime4j.util.StringArrayMap: java.util.Map asMap(java.util.Map)>
<org.apache.james.mime4j.codec.Base64OutputStream: void write(byte[],int,int)> --> <org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>
<org.apache.james.mime4j.codec.Base64OutputStream: void write(int)> --> <org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>
<org.apache.james.mime4j.codec.Base64OutputStream: void write(byte[])> --> <org.apache.james.mime4j.codec.Base64OutputStream: void write0(byte[],int,int)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean)> --> <org.apache.http.message.BasicHeaderValueFormatter: int estimateElementsLen(org.apache.http.HeaderElement[])>
<org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.HttpMessage: org.apache.http.params.HttpParams getParams()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateProgressBars(int)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void hideProgressBars(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar)>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserInfo: java.lang.String getPassword()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void updateTextButtonVisibility()> --> <com.actionbarsherlock.internal.widget.CapitalizingButton: void setVisibility(int)>
<com.matburt.mobileorg.Gui.CertificateConflictActivity: void <init>()> --> <com.matburt.mobileorg.Gui.CertificateConflictActivity$2: void <init>(com.matburt.mobileorg.Gui.CertificateConflictActivity)>
<org.json.simple.JSONValue: void writeJSONString(java.lang.Object,java.io.Writer)> --> <org.json.simple.JSONAware: java.lang.String toJSONString()>
<org.json.simple.JSONValue: java.lang.String toJSONString(java.lang.Object)> --> <org.json.simple.JSONAware: java.lang.String toJSONString()>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void fillBuffer()> --> <org.apache.james.mime4j.codec.ByteQueue: byte dequeue()>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: int read()> --> <org.apache.james.mime4j.codec.ByteQueue: byte dequeue()>
<org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)> --> <org.apache.james.mime4j.codec.ByteQueue: byte dequeue()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_0()>
<com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: void addPreferencesFromResource(int)>
<org.apache.james.mime4j.codec.Base64InputStream: int read(byte[])> --> <org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)>
<org.apache.james.mime4j.codec.Base64InputStream: int read()> --> <org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)>
<org.apache.james.mime4j.codec.Base64InputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)>
<org.apache.james.mime4j.field.address.MailboxList: void print()> --> <org.apache.james.mime4j.field.address.MailboxList: org.apache.james.mime4j.field.address.Mailbox get(int)>
<org.apache.james.mime4j.field.address.MailboxList: java.lang.Object get(int)> --> <org.apache.james.mime4j.field.address.MailboxList: org.apache.james.mime4j.field.address.Mailbox get(int)>
<org.apache.james.mime4j.field.MailboxField: void parse()> --> <org.apache.james.mime4j.field.address.MailboxList: org.apache.james.mime4j.field.address.Mailbox get(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: boolean access$000(com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void startBodyPart()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void registerForContextMenu(android.view.View)>
<com.jcraft.jsch.KeyPairDSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenDSA: byte[] getQ()>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard getWizard(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE,com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.NullWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel,java.lang.String,boolean)> --> <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)>
<org.apache.james.mime4j.field.address.Group: java.lang.String getEncodedString()> --> <org.apache.james.mime4j.field.address.Mailbox: java.lang.String getEncodedString()>
<com.actionbarsherlock.view.MenuInflater$MenuState: com.actionbarsherlock.view.SubMenu addSubMenuItem()> --> <com.actionbarsherlock.view.SubMenu: com.actionbarsherlock.view.MenuItem getItem()>
<com.matburt.mobileorg.Gui.ViewActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.SubMenu: com.actionbarsherlock.view.MenuItem getItem()>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.SubMenu addInternal(android.view.SubMenu)> --> <com.actionbarsherlock.view.SubMenu: com.actionbarsherlock.view.MenuItem getItem()>
<com.actionbarsherlock.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: boolean onChooseActivity(com.actionbarsherlock.widget.ActivityChooserModel,android.content.Intent)> --> <com.actionbarsherlock.widget.ShareActionProvider: com.actionbarsherlock.widget.ShareActionProvider$OnShareTargetSelectedListener access$400(com.actionbarsherlock.widget.ShareActionProvider)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void start()> --> <org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>
<com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestShell: boolean waitForReply()>
<com.matburt.mobileorg.Services.TimeclockService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.TimeclockService: android.content.ContentResolver getContentResolver()>
<com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> --> <com.jcraft.jsch.Session: void setHost(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void insertRadioButton()> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: android.view.LayoutInflater getInflater()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void insertIconView()> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: android.view.LayoutInflater getInflater()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void insertCheckBox()> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: android.view.LayoutInflater getInflater()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setSubtitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void initTitle()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void initTitle()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void onMeasure(int,int)> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: void setWidth(int)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void updateDisplay(java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.util.OrgUtils: void setupSpinnerWithEmpty(android.widget.Spinner,java.util.ArrayList,java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.TagTableRow: void setTags(java.lang.String,java.util.ArrayList)> --> <com.matburt.mobileorg.util.OrgUtils: void setupSpinnerWithEmpty(android.widget.Spinner,java.util.ArrayList,java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView$1: void <init>(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void init(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.Gui.Capture.LocationFragment,java.util.ArrayList,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void reopenMenu(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean hideOverflowMenu()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchPause()> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean hideOverflowMenu()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean hideOverflowMenu()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchCloseOptionsMenu()> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean hideOverflowMenu()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder clone()>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void refresh()> --> <com.matburt.mobileorg.Gui.Agenda.AgendaActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.IcsLinearLayout createTabLayout()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfa_4(int,long)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_4(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_4()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_4(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfaWithStates_4(int,int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_4(int,int)>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: void <init>(org.apache.http.HttpResponse)> --> <com.dropbox.client2.DropboxAPI$DropboxFileInfo: long parseFileSize(org.apache.http.HttpResponse,com.dropbox.client2.DropboxAPI$Entry)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void MoreLexicalActions()>
<org.apache.james.mime4j.parser.RawField: java.lang.String parseBody()> --> <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(org.apache.james.mime4j.util.ByteSequence,int,int)>
<org.apache.james.mime4j.parser.RawField: java.lang.String parseName()> --> <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(org.apache.james.mime4j.util.ByteSequence,int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void access$900(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator)>
<org.apache.james.mime4j.storage.DefaultStorageProvider: void reset()> --> <org.apache.james.mime4j.storage.DefaultStorageProvider: void initialize()>
<org.apache.james.mime4j.storage.DefaultStorageProvider: void <clinit>()> --> <org.apache.james.mime4j.storage.DefaultStorageProvider: void initialize()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int getPaddingBottom()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int getPaddingBottom()>
<oauth.signpost.AbstractOAuthConsumer: void completeOAuthParameters(oauth.signpost.http.HttpParameters)> --> <oauth.signpost.AbstractOAuthConsumer: java.lang.String generateTimestamp()>
<org.apache.james.mime4j.parser.MimeStreamParser: void stop()> --> <org.apache.james.mime4j.parser.MimeTokenStream: void stop()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void <init>(android.content.Context)> --> <com.matburt.mobileorg.util.PreferenceUtils: int getFontSize()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setupTitle(java.lang.String,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.text.SpannableStringBuilder)> --> <com.matburt.mobileorg.util.PreferenceUtils: int getFontSize()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setupAgendaBlock(android.text.SpannableStringBuilder,com.matburt.mobileorg.Gui.Theme.DefaultTheme)> --> <com.matburt.mobileorg.util.PreferenceUtils: int getFontSize()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void <init>(org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void ReInit(org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void SwitchTo(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void setupList()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void completeDeferredDestroyActionMode()> --> <com.actionbarsherlock.view.ActionMode$Callback: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: void onDestroyActionMode(android.view.ActionMode)> --> <com.actionbarsherlock.view.ActionMode$Callback: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.view.ActionMode$Callback: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void finish()> --> <com.actionbarsherlock.view.ActionMode$Callback: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void finish()> --> <com.actionbarsherlock.view.ActionMode$Callback: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void browseTo(java.lang.String)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: boolean isCurrentDirectoryRoot()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void reopenMenu(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getVisibility()>
<com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void execute(java.lang.Runnable)> --> <com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor$1: void <init>(com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor,java.lang.Runnable)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: boolean animationFrame(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationRepeat(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaActivity: android.content.Intent getIntent()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup access$102(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void start()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup access$102(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void end()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void sortNodes()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void sortNodes()>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parse()> --> <org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$1: void start()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void smoothScrollTo(int,int)>
<com.jcraft.jsch.KeyPair: int writeLength(byte[],int,int)> --> <com.jcraft.jsch.KeyPair: int countLength(int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: java.lang.Object getValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: int getIntValue(float)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: void calculateValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: int getIntValue(float)>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void fillBuffer()> --> <org.apache.james.mime4j.codec.QuotedPrintableInputStream: byte asciiCharToNumericValue(byte)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgNode getOrgNodeFromFileAlias(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void set(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgNode: void <init>(android.database.Cursor)> --> <com.matburt.mobileorg.OrgData.OrgNode: void set(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void set(android.database.Cursor)>
<com.matburt.mobileorg.Services.TimeclockService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.TimeclockService: void doTimeout()>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onPause()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void saveCurrentPage()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.http.entity.mime.MultipartEntity: boolean isRepeatable()> --> <org.apache.http.entity.mime.content.ContentBody: long getContentLength()>
<org.apache.http.entity.mime.HttpMultipart: long getTotalLength()> --> <org.apache.http.entity.mime.content.ContentBody: long getContentLength()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void start()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void start()>
<com.actionbarsherlock.internal.widget.IcsProgressBar$AccessibilityEventSender: void <init>(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar$1)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$AccessibilityEventSender: void <init>(com.actionbarsherlock.internal.widget.IcsProgressBar)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void announceProgressUpdate(int,java.lang.String)> --> <com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void updateNotification(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runArchiveNode(boolean)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: android.widget.ListView getListView()>
<org.apache.james.mime4j.util.StringArrayMap$2: java.lang.Object nextElement()> --> <org.apache.james.mime4j.util.StringArrayMap$2: java.lang.String nextElement()>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Session: void initInflater(java.lang.String)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Session: void initInflater(java.lang.String)>
<org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeB(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeBase64(java.lang.String)>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.AddressList getAddressList(java.lang.String)> --> <org.apache.james.mime4j.field.AddressListField: org.apache.james.mime4j.field.address.AddressList getAddressList()>
<com.jcraft.jsch.jce.HMACMD5: void update(int)> --> <com.jcraft.jsch.jce.HMACMD5: void update(byte[],int,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$2: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: com.actionbarsherlock.view.ActionMode access$002(com.matburt.mobileorg.Gui.Outline.OutlineListView,com.actionbarsherlock.view.ActionMode)>
<com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()> --> <com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void <init>(android.content.Context)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void ReInit(org.apache.james.mime4j.field.language.parser.SimpleCharStream)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void ReInitRounds()>
<com.jcraft.jsch.RequestX11: void <init>()> --> <com.jcraft.jsch.Request: void <init>()>
<com.jcraft.jsch.RequestExec: void <init>(byte[])> --> <com.jcraft.jsch.Request: void <init>()>
<com.jcraft.jsch.RequestEnv: void <init>()> --> <com.jcraft.jsch.Request: void <init>()>
<com.jcraft.jsch.RequestSubsystem: void <init>()> --> <com.jcraft.jsch.Request: void <init>()>
<com.jcraft.jsch.RequestAgentForwarding: void <init>()> --> <com.jcraft.jsch.Request: void <init>()>
<com.jcraft.jsch.RequestSignal: void <init>()> --> <com.jcraft.jsch.Request: void <init>()>
<com.jcraft.jsch.RequestWindowChange: void <init>()> --> <com.jcraft.jsch.Request: void <init>()>
<com.jcraft.jsch.RequestPtyReq: void <init>()> --> <com.jcraft.jsch.Request: void <init>()>
<com.jcraft.jsch.RequestShell: void <init>()> --> <com.jcraft.jsch.Request: void <init>()>
<com.jcraft.jsch.RequestSftp: void <init>()> --> <com.jcraft.jsch.Request: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayShowHomeEnabled(boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayOptions(int,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayShowCustomEnabled(boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayOptions(int,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayHomeAsUpEnabled(boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayOptions(int,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayUseLogoEnabled(boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayOptions(int,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayShowTitleEnabled(boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayOptions(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)>
<org.apache.james.mime4j.field.structured.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.structured.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView createTabView(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void init(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,com.actionbarsherlock.app.ActionBar$Tab,boolean)>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaActivity$SynchServiceReceiver: void <init>(com.matburt.mobileorg.Gui.Agenda.AgendaActivity,com.matburt.mobileorg.Gui.Agenda.AgendaActivity$1)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.ResourcesCompat: int getResources_getInteger(android.content.Context,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.ResourcesCompat: int getResources_getInteger(android.content.Context,int)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: int getAnimatedVisibility()> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: int getVisibility()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: int getVisibility()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: void setInterpolator(android.view.animation.Interpolator)>
<oauth.signpost.AbstractOAuthProvider: void handleUnexpectedResponse(int,oauth.signpost.http.HttpResponse)> --> <oauth.signpost.exception.OAuthNotAuthorizedException: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setFloatValues(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofFloat(float[])>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void dispatchSaveInstanceState(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter: android.os.Parcelable onSaveInstanceState()>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: long getContentLength()>
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)> --> <org.apache.http.HttpEntity: long getContentLength()>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: long parseFileSize(org.apache.http.HttpResponse,com.dropbox.client2.DropboxAPI$Entry)> --> <org.apache.http.HttpEntity: long getContentLength()>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: long getContentLength()>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: long getContentLength()>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: long getContentLength()>
<org.apache.http.entity.HttpEntityWrapper: long getContentLength()> --> <org.apache.http.HttpEntity: long getContentLength()>
<org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: long getContentLength()>
<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)> --> <org.apache.http.HttpEntity: long getContentLength()>
<org.apache.http.entity.BufferedHttpEntity: void <init>(org.apache.http.HttpEntity)> --> <org.apache.http.HttpEntity: long getContentLength()>
<org.apache.http.entity.BufferedHttpEntity: long getContentLength()> --> <org.apache.http.HttpEntity: long getContentLength()>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity: void <init>(org.apache.http.HttpEntity,com.dropbox.client2.ProgressListener)> --> <org.apache.http.HttpEntity: long getContentLength()>
<org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.SocketHttpClientConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>
<com.dropbox.client2.android.AuthActivity: void onResume()> --> <com.dropbox.client2.android.AuthActivity: java.lang.String getPackageName()>
<com.jcraft.jsch.ChannelSession: void sendRequests()> --> <com.jcraft.jsch.RequestPtyReq: void setTType(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void measureScrapChild(android.view.View,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: int getPaddingRight()>
<com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier: void <init>(com.actionbarsherlock.internal.widget.IcsAdapterView,com.actionbarsherlock.internal.widget.IcsAdapterView$1)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier: void <init>(com.actionbarsherlock.internal.widget.IcsAdapterView)>
<org.apache.http.message.BasicTokenIterator: java.lang.Object next()> --> <org.apache.http.message.BasicTokenIterator: java.lang.String nextToken()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void setPresenter(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder before(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder after(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node,int)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder getRootMenu()>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.IO: void close()>
<com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> --> <com.jcraft.jsch.IO: void close()>
<com.jcraft.jsch.Channel: void disconnect()> --> <com.jcraft.jsch.IO: void close()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: com.matburt.mobileorg.Gui.Capture.DateTableRow getDateTableRow(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment$1: void <init>(com.matburt.mobileorg.Gui.Capture.DatesFragment)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleCondensed()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleForItemView(com.actionbarsherlock.internal.view.menu.MenuView$ItemView)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleCondensed()>
<com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int)> --> <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>
<com.jcraft.jsch.Session: void setPortForwardingR(int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> --> <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>
<com.jcraft.jsch.Session: void setPortForwardingR(int,java.lang.String,int)> --> <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void applyTransformation(float,android.view.animation.Transformation)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void transformMatrix(android.graphics.Matrix,android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void computeRect(android.graphics.RectF,android.view.View)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void transformMatrix(android.graphics.Matrix,android.view.View)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void postInvalidateDelayed(long)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)> --> <com.actionbarsherlock.view.ActionProvider: boolean hasSubMenu()>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.ActionProvider: boolean hasSubMenu()>
<com.actionbarsherlock.internal.view.ActionProviderWrapper: boolean hasSubMenu()> --> <com.actionbarsherlock.view.ActionProvider: boolean hasSubMenu()>
<org.apache.james.mime4j.field.datetime.DateTime: java.lang.String toString()> --> <org.apache.james.mime4j.field.datetime.DateTime: int getDay()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void setupLocation()> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getTopLevelNode(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void initLocationView()> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getTopLevelNode(java.lang.String)>
<com.commonsware.cwac.merge.MergeAdapter: void addAdapter(android.widget.ListAdapter)> --> <com.commonsware.cwac.merge.MergeAdapter$CascadeDataSetObserver: void <init>(com.commonsware.cwac.merge.MergeAdapter,com.commonsware.cwac.merge.MergeAdapter$CascadeDataSetObserver)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char BeginToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.json.JSONObject responseToJson(org.apache.http.HttpResponse)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.json.JSONObject responseToJson(org.apache.http.HttpResponse)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.json.JSONObject responseToJson(org.apache.http.HttpResponse)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.json.JSONObject responseToJson(org.apache.http.HttpResponse)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.json.JSONObject responseToJson(org.apache.http.HttpResponse)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<com.matburt.mobileorg.Services.TimeclockDialog: void saveClock(int,int)> --> <com.matburt.mobileorg.OrgData.OrgNode: void addLogbook(long,long,java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()> --> <com.matburt.mobileorg.Synchronizers.NullSynchronizer: void <init>()>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.util.FileUtils: java.io.File getFile()>
<com.matburt.mobileorg.util.FileUtils: byte[] getRawFileData()> --> <com.matburt.mobileorg.util.FileUtils: java.io.File getFile()>
<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()> --> <com.jcraft.jsch.Channel$MyPipedInputStream: int read()>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParent(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(android.database.Cursor)>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncFile(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode findOriginalNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList orgDataCursorToArrayList(android.database.Cursor)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(android.database.Cursor)>
<com.matburt.mobileorg.util.SelectionBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.util.SelectionBuilder: void mapColumns(java.lang.String[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupGetter(java.lang.Class)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.reflect.Method setupSetterOrGetter(java.lang.Class,java.util.HashMap,java.lang.String,java.lang.Class)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupSetter(java.lang.Class)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.reflect.Method setupSetterOrGetter(java.lang.Class,java.util.HashMap,java.lang.String,java.lang.Class)>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void copyStreamToOutput(java.io.OutputStream,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$DropboxInputStream: void close()>
<com.matburt.mobileorg.Gui.CertificateConflictActivity$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.CertificateConflictActivity: void access$000(com.matburt.mobileorg.Gui.CertificateConflictActivity)>
<com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> --> <org.ietf.jgss.GSSManager: org.ietf.jgss.GSSManager getInstance()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getLocationEntry(com.matburt.mobileorg.OrgData.OrgNode,java.util.ArrayList,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: void <init>(android.content.Context)>
<com.matburt.mobileorg.Services.CalendarWrapper: int deleteFileEntries(java.lang.String)> --> <com.matburt.mobileorg.Services.CalendarWrapper: void refreshPreferences()>
<com.matburt.mobileorg.Services.CalendarSyncService: void refreshPreferences()> --> <com.matburt.mobileorg.Services.CalendarWrapper: void refreshPreferences()>
<com.matburt.mobileorg.Services.CalendarWrapper: int deleteEntries()> --> <com.matburt.mobileorg.Services.CalendarWrapper: void refreshPreferences()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void closeMode()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void start()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void start()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void start()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$DependencyListener: void startIfReady(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void start()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void start()>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void <init>(android.view.View)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setDuration(long)>
<com.jcraft.jsch.Channel: void write_ext(byte[],int,int)> --> <com.jcraft.jsch.IO: void put_ext(byte[],int,int)>
<com.dropbox.client2.jsonextract.JsonMap$WrappedEntry: java.lang.Object getKey()> --> <com.dropbox.client2.jsonextract.JsonMap$WrappedEntry: java.lang.String getKey()>
<oauth.signpost.signature.OAuthMessageSigner: byte[] decodeBase64(java.lang.String)> --> <org.apache.commons.codec.binary.Base64: byte[] decode(byte[])>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.parser.MimeEntity: void advanceToBoundary()>();     case -1: goto $i1_1 = $r0.<org.apache.james.mime4j.parser.MimeEntity: int state>;     case 0: goto $z0_1 = $r0.<org.apache.james.mime4j.parser.MimeEntity: boolean skipHeader>;     case 1: goto $i1_1 = $r0.<org.apache.james.mime4j.parser.MimeEntity: int state>;     case 2: goto $i1_1 = $r0.<org.apache.james.mime4j.parser.MimeEntity: int state>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingTop()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingTop()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void updateDrawableBounds(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingTop()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void invalidateDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingTop()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: android.view.View findViewById(int)>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()> --> <org.apache.james.mime4j.storage.StorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage()>
<org.apache.james.mime4j.storage.AbstractStorageProvider: org.apache.james.mime4j.storage.Storage store(java.io.InputStream)> --> <org.apache.james.mime4j.storage.StorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage()>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()> --> <org.apache.james.mime4j.storage.StorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void addView(android.view.View,int)>
<com.jcraft.jsch.IdentityFile: void finalize()> --> <com.jcraft.jsch.IdentityFile: void clear()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token jjFillToken()>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.parser.MimeEntity: void createMimeStream()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setTitle(int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setTitle(java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: float getFloatValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: int getIntValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: java.lang.Object getValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: com.actionbarsherlock.internal.widget.ActionBarView$HomeView access$700(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: com.actionbarsherlock.internal.widget.ActionBarView$HomeView access$700(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void resetList()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setSelectedPositionInt(int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setAdapter(android.widget.SpinnerAdapter)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setSelectedPositionInt(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)> --> <org.apache.james.mime4j.field.contentdisposition.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean hasFeature(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void initActionBar()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean hasFeature(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: android.view.ViewGroup generateLayout()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean hasFeature(int)>
<com.google.gdata.util.common.base.Preconditions: java.lang.Iterable checkContentsNotNull(java.lang.Iterable,java.lang.Object)> --> <com.google.gdata.util.common.base.Preconditions: boolean containsOrIsNull(java.lang.Iterable)>
<com.google.gdata.util.common.base.Preconditions: java.lang.Iterable checkContentsNotNull(java.lang.Iterable)> --> <com.google.gdata.util.common.base.Preconditions: boolean containsOrIsNull(java.lang.Iterable)>
<com.google.gdata.util.common.base.Preconditions: java.lang.Iterable checkContentsNotNull(java.lang.Iterable,java.lang.String,java.lang.Object[])> --> <com.google.gdata.util.common.base.Preconditions: boolean containsOrIsNull(java.lang.Iterable)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void selectionChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier: void <init>(com.actionbarsherlock.internal.widget.IcsAdapterView,com.actionbarsherlock.internal.widget.IcsAdapterView$1)>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer$1: java.lang.Byte next()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: int access$000(org.apache.james.mime4j.codec.UnboundedFifoByteBuffer,int)>
<org.apache.http.entity.mime.MultipartEntity: void addPart(java.lang.String,org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.http.entity.mime.HttpMultipart: void addBodyPart(org.apache.james.mime4j.message.BodyPart)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void <clinit>()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void jj_la1_0()>
<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionOutputBuffer createHttpDataTransmitter(java.net.Socket,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.MailboxList buildGroupBody(org.apache.james.mime4j.field.address.parser.ASTgroup_body)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: void <init>(org.apache.james.mime4j.field.address.parser.SimpleNode)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildMailbox(org.apache.james.mime4j.field.address.parser.ASTmailbox)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: void <init>(org.apache.james.mime4j.field.address.parser.SimpleNode)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAddrSpec(org.apache.james.mime4j.field.address.DomainList,org.apache.james.mime4j.field.address.parser.ASTaddr_spec)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: void <init>(org.apache.james.mime4j.field.address.parser.SimpleNode)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Address buildAddress(org.apache.james.mime4j.field.address.parser.ASTaddress)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: void <init>(org.apache.james.mime4j.field.address.parser.SimpleNode)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildNameAddr(org.apache.james.mime4j.field.address.parser.ASTname_addr)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: void <init>(org.apache.james.mime4j.field.address.parser.SimpleNode)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAngleAddr(org.apache.james.mime4j.field.address.parser.ASTangle_addr)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: void <init>(org.apache.james.mime4j.field.address.parser.SimpleNode)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.DomainList buildRoute(org.apache.james.mime4j.field.address.parser.ASTroute)> --> <org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: void <init>(org.apache.james.mime4j.field.address.parser.SimpleNode)>
<com.matburt.mobileorg.Services.CalendarSyncService: void access$200(com.matburt.mobileorg.Services.CalendarSyncService)> --> <com.matburt.mobileorg.Services.CalendarSyncService: void syncFiles()>
<com.matburt.mobileorg.Services.CalendarSyncService: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Services.CalendarSyncService: void syncFiles()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseIndexFile()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: void setPriorities(java.util.ArrayList,android.content.ContentResolver)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: void calculateBoundaryLen()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: byte charAt(int)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: void skipBoundary()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: byte charAt(int)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: byte charAt(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void clearNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void clearNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void route()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void clearNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void name_addr()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void clearNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void clearNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void clearNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void clearNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void clearNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<com.matburt.mobileorg.Gui.Wizard.WizardView$1: void start()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int access$200(com.matburt.mobileorg.Gui.Wizard.WizardView)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void restoreInstanceState(android.os.Bundle)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: int locateLF()>
<com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: void <init>(com.actionbarsherlock.widget.ShareActionProvider,com.actionbarsherlock.widget.ShareActionProvider$1)> --> <com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: void <init>(com.actionbarsherlock.widget.ShareActionProvider)>
<com.matburt.mobileorg.Gui.ViewActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.jcraft.jsch.Channel: void disconnect()> --> <com.jcraft.jsch.Channel: void close()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: boolean access$302(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet,boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasureExactFormat(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getPaddingRight()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getPaddingRight()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayOptions(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void updateLocations(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: void addChild(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.lang.String testConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void connect()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void connect()>
<com.jcraft.jsch.ChannelSession: void sendRequests()> --> <com.jcraft.jsch.RequestPtyReq: void setTerminalMode(byte[])>
<org.apache.james.mime4j.field.address.parser.SimpleNode: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.SimpleNode,java.lang.Object)>
<org.apache.james.mime4j.message.SimpleContentHandler: void endHeader()> --> <org.apache.james.mime4j.message.SimpleContentHandler: void headers(org.apache.james.mime4j.message.Header)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: int getEndColumn()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: int getEndColumn()>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.HostKey: void <init>(java.lang.String,byte[])>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void handleDataChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int findSyncPosition()>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void handleTrustRelationship(android.content.Context)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void access$100(com.actionbarsherlock.internal.widget.IcsAbsSpinner,android.view.View,boolean)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void removeDetachedView(android.view.View,boolean)>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.signature.SigningStrategy: java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: android.content.Intent getIntent()>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer$1: void remove()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: int access$100(org.apache.james.mime4j.codec.UnboundedFifoByteBuffer,int)>
<org.apache.james.mime4j.field.datetime.DateTime: void <init>(java.lang.String,int,int,int,int,int,int)> --> <org.apache.james.mime4j.field.datetime.DateTime: int convertToYear(java.lang.String)>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()> --> <org.apache.http.impl.entity.EntitySerializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()> --> <org.apache.http.impl.entity.EntitySerializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: java.lang.String day_of_week()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contenttype.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.contenttype.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <init>(org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager)> --> <org.apache.james.mime4j.field.contenttype.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.contenttype.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void ReInit(org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager)> --> <org.apache.james.mime4j.field.contenttype.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contenttype.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contenttype.parser.Token: org.apache.james.mime4j.field.contenttype.parser.Token newToken(int)> --> <org.apache.james.mime4j.field.contenttype.parser.Token: void <init>()>
<com.jcraft.jsch.IdentityFile: boolean setPassphrase(byte[])> --> <com.jcraft.jsch.HASH: byte[] digest()>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.HASH: byte[] digest()>
<com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> --> <com.jcraft.jsch.HASH: byte[] digest()>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.HASH: byte[] digest()>
<com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> --> <com.jcraft.jsch.HASH: byte[] digest()>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.HASH: byte[] digest()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.HASH: byte[] digest()>
<com.dropbox.client2.DropboxAPI$ChunkedUploader: void upload(com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$ChunkedUploadRequest: com.dropbox.client2.DropboxAPI$ChunkedUploadResponse upload()>
<com.actionbarsherlock.app.SherlockFragment: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: android.widget.Adapter getAdapter()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: android.widget.SpinnerAdapter getAdapter()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void insertIconView()> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void addView(android.view.View,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.internal.widget.CapitalizingTextView: void setTextCompat(java.lang.CharSequence)>
<com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestShell: void write(com.jcraft.jsch.Packet)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isNodeRefilable()>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxField mailbox(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxField mailbox0(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxField sender(org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxField mailbox0(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)>
<org.apache.james.mime4j.field.ContentDispositionField: void parse()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: java.util.List getParamValues()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void name_addr()> --> <org.apache.james.mime4j.field.address.parser.ASTname_addr: void <init>(int)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: boolean access$000(com.matburt.mobileorg.Gui.Capture.LocationEntry)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry putFileOverwrite(java.lang.String,java.io.InputStream,long,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileOverwriteRequest(java.lang.String,java.io.InputStream,long,com.dropbox.client2.ProgressListener)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: void calculateBoundaryLen()>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: android.view.animation.Interpolator getInterpolator()>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: java.lang.Object getValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: android.view.animation.Interpolator getInterpolator()>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void showToast(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.DropboxSynchronizer$2: void start()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void SwitchTo(int)> --> <org.apache.james.mime4j.field.language.parser.TokenMgrError: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.language.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.language.parser.TokenMgrError: void <init>(java.lang.String,int)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setAdapter(android.widget.ListAdapter)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupDataSetObserver: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: void onMeasure(int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void start()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable access$402(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable)>
<org.json.simple.JSONValue: void writeJSONString(java.lang.Object,java.io.Writer)> --> <org.json.simple.JSONValue: java.lang.String escape(java.lang.String)>
<org.json.simple.JSONValue: java.lang.String toJSONString(java.lang.Object)> --> <org.json.simple.JSONValue: java.lang.String escape(java.lang.String)>
<org.json.simple.JSONObject: java.lang.String escape(java.lang.String)> --> <org.json.simple.JSONValue: java.lang.String escape(java.lang.String)>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.Mailbox getSender()> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.Mailbox getMailbox(java.lang.String)>
<org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream,org.apache.james.mime4j.parser.MimeEntityConfig,org.apache.james.mime4j.storage.StorageProvider)> --> <org.apache.james.mime4j.parser.MimeStreamParser: void <init>(org.apache.james.mime4j.parser.MimeEntityConfig)>
<org.apache.james.mime4j.parser.MimeStreamParser: void <init>()> --> <org.apache.james.mime4j.parser.MimeStreamParser: void <init>(org.apache.james.mime4j.parser.MimeEntityConfig)>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: void access$900(com.jcraft.jsch.ChannelSftp,byte[],long,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: int getBeginLine()>
<org.apache.http.entity.mime.FormBodyPart: void generateTransferEncoding(org.apache.james.mime4j.descriptor.ContentDescriptor)> --> <org.apache.james.mime4j.descriptor.ContentDescriptor: java.lang.String getTransferEncoding()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setIntValues(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setIntValues(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void <init>(org.apache.james.mime4j.field.structured.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void <init>(org.apache.james.mime4j.field.structured.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void <init>(org.apache.james.mime4j.field.structured.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void <init>(org.apache.james.mime4j.field.structured.parser.SimpleCharStream)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.ActionMenu: android.content.Context getContext()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()> --> <org.json.JSONObject: long getLong(java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_2(int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean shouldIncludeItem(int,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isActionButton()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isActionButton()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isActionButton()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isActionButton()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setVisibility(int)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void setContentView(int)>
<org.apache.james.mime4j.message.MessageWriter: void writeHeader(org.apache.james.mime4j.message.Header,java.io.OutputStream)> --> <org.apache.james.mime4j.message.Header: java.util.Iterator iterator()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void clearAll()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void clearHeader()>
<com.matburt.mobileorg.Services.CalendarWrapper: java.lang.String insertEntry(com.matburt.mobileorg.OrgData.OrgNodeDate,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Services.CalendarWrapper: void addReminder(java.lang.String,long,long)>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <com.dropbox.client2.RESTUtility: org.apache.http.client.HttpClient updatedHttpClient(com.dropbox.client2.session.Session)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int hour()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int parseDigits(org.apache.james.mime4j.field.datetime.parser.Token)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int zone()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int parseDigits(org.apache.james.mime4j.field.datetime.parser.Token)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int second()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int parseDigits(org.apache.james.mime4j.field.datetime.parser.Token)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int minute()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int parseDigits(org.apache.james.mime4j.field.datetime.parser.Token)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int day()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int parseDigits(org.apache.james.mime4j.field.datetime.parser.Token)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void scheduleAccessibilityEventSender()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$AccessibilityEventSender: void <init>(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar$1)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.MaxLineLimitException: void <init>(java.lang.String)>
<org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: int doReadLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.MaxLineLimitException: void <init>(java.lang.String)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()> --> <org.apache.james.mime4j.io.MaxLineLimitException: void <init>(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,int)> --> <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor)> --> <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void access$100(com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Session: void receive_newkeys(com.jcraft.jsch.Buffer,com.jcraft.jsch.KeyExchange)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Session: void receive_newkeys(com.jcraft.jsch.Buffer,com.jcraft.jsch.KeyExchange)>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void setLocalPacketSize(int)>
<org.json.simple.parser.JSONParser: java.util.Map createObjectContainer(org.json.simple.parser.ContainerFactory)> --> <org.json.simple.parser.ContainerFactory: java.util.Map createObjectContainer()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$4: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: com.actionbarsherlock.app.SherlockFragmentActivity getSherlockActivity()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$3: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: com.actionbarsherlock.app.SherlockFragmentActivity getSherlockActivity()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: com.actionbarsherlock.app.SherlockFragmentActivity getSherlockActivity()>
<org.apache.james.mime4j.field.mimeversion.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.ParseException: java.lang.String getMessage()>
<org.apache.james.mime4j.field.ContentDispositionField: void parse()> --> <org.apache.james.mime4j.field.ParseException: java.lang.String getMessage()>
<org.apache.james.mime4j.field.contentdisposition.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.ParseException: java.lang.String getMessage()>
<org.apache.james.mime4j.field.structured.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.ParseException: java.lang.String getMessage()>
<org.apache.james.mime4j.field.datetime.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.ParseException: java.lang.String getMessage()>
<org.apache.james.mime4j.field.language.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.ParseException: java.lang.String getMessage()>
<org.apache.james.mime4j.field.contenttype.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.ParseException: java.lang.String getMessage()>
<org.apache.james.mime4j.field.address.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.ParseException: java.lang.String getMessage()>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Date parseDate(java.lang.String)> --> <org.apache.james.mime4j.field.ParseException: java.lang.String getMessage()>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.conn.scheme.Scheme: void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.Menu getParentMenu()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>
<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)> --> <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>
<org.apache.http.message.BasicLineParser: boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>
<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> --> <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void collapseExpand(int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void collapse(com.matburt.mobileorg.OrgData.OrgNode,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void collapse(com.matburt.mobileorg.OrgData.OrgNode,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void collapse(com.matburt.mobileorg.OrgData.OrgNode,int)>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.HASH: void init()>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.HASH: void init()>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()> --> <com.jcraft.jsch.HASH: void init()>
<com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> --> <com.jcraft.jsch.HASH: void init()>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.HASH: void init()>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.HASH: void init()>
<com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.internal.view.menu.ActionMenuItem findItemWithShortcut(int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: char getAlphabeticShortcut()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void browseTo(java.lang.String)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry metadata(java.lang.String,int,java.lang.String,boolean,java.lang.String)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void browseTo(java.lang.String)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry metadata(java.lang.String,int,java.lang.String,boolean,java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime parseLine()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>(1);     default: goto $r2 = $r0.<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int[] jj_la1>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: int getEndColumn()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: int getEndColumn()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void parseAll()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: org.apache.james.mime4j.field.mimeversion.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void parse()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: org.apache.james.mime4j.field.mimeversion.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void parseLine()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: org.apache.james.mime4j.field.mimeversion.parser.Token jj_consume_token(int)>
<com.actionbarsherlock.internal.widget.IcsSpinner: android.view.View makeAndAddView(int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setUpChild(android.view.View)>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void setOutputStream(java.io.OutputStream)>
<org.apache.james.mime4j.message.Header: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.message.Header$1: void <init>(org.apache.james.mime4j.message.Header,org.apache.james.mime4j.parser.MimeStreamParser)>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void connect()>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(byte[])>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.DH: void init()>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.DH: void init()>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.DH: void init()>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.HttpRequest receiveRequestHeader()> --> <org.apache.http.io.HttpMessageParser: org.apache.http.HttpMessage parse()>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()> --> <org.apache.http.io.HttpMessageParser: org.apache.http.HttpMessage parse()>
<org.apache.http.impl.io.SocketInputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: void <init>()>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void endHeader()>
<com.matburt.mobileorg.Gui.FileDecryptionActivity: void onActivityResult(int,int,android.content.Intent)> --> <com.matburt.mobileorg.Gui.FileDecryptionActivity: void finish()>
<com.actionbarsherlock.internal.widget.ActionBarView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> --> <com.actionbarsherlock.app.ActionBar$LayoutParams: void <init>(int)>
<com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.MenuInflater getMenuInflater()> --> <com.actionbarsherlock.ActionBarSherlock: android.content.Context getThemedContext()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.HeaderElement: java.lang.String getValue()>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateHeaderElementLen(org.apache.http.HeaderElement)> --> <org.apache.http.HeaderElement: java.lang.String getValue()>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)> --> <org.apache.http.HeaderElement: java.lang.String getValue()>
<org.apache.http.message.BasicHeaderElementIterator: void parseNextElement()> --> <org.apache.http.HeaderElement: java.lang.String getValue()>
<com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy: long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HeaderElement: java.lang.String getValue()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void <init>()> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings$2: void <init>(com.matburt.mobileorg.Gui.Agenda.AgendaSettings)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void finish()>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void openNodeScope(org.apache.james.mime4j.field.address.parser.Node)> --> <org.apache.james.mime4j.field.address.parser.Node: void jjtOpen()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: android.view.ViewParent getParent()>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)> --> <org.apache.http.message.BasicLineFormatter: void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Services.SyncService: void stopAlarm(android.content.Context)>
<org.apache.james.mime4j.message.Message: java.util.Date getDate()> --> <org.apache.james.mime4j.field.DateTimeField: java.util.Date getDate()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token getToken(int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: int jj_ntk()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_scan_token(int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: boolean atEnd()>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: boolean atEnd()>
<org.apache.http.message.BasicHeaderElementIterator: void parseNextElement()> --> <org.apache.http.message.ParserCursor: boolean atEnd()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: boolean atEnd()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: boolean atEnd()>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.ContentHandler: boolean endObject()>
<com.jcraft.jsch.ChannelDirectTCPIP: void <init>()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void setLocalWindowSizeMax(int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getChildWidth(android.view.View)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)>
<com.actionbarsherlock.app.ActionBar$LayoutParams: void <init>(int)> --> <com.actionbarsherlock.app.ActionBar$LayoutParams: void <init>(int,int,int)>
<com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> --> <org.ietf.jgss.GSSContext: void requestConf(boolean)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)>
<com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> --> <com.jcraft.jsch.KeyPair: byte[] getEnd()>
<com.matburt.mobileorg.Gui.ViewActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.ViewActivity: void setContentView(int)>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: void update(byte[])>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: void update(byte[])>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_rsa(byte[])> --> <com.jcraft.jsch.SignatureRSA: void update(byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: void update(byte[])>
<org.apache.james.mime4j.storage.CipherStorageProvider: org.apache.james.mime4j.storage.StorageOutputStream createStorageOutputStream()> --> <org.apache.james.mime4j.storage.StorageProvider: org.apache.james.mime4j.storage.StorageOutputStream createStorageOutputStream()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: void write0(byte[],int,int)> --> <org.apache.james.mime4j.storage.StorageProvider: org.apache.james.mime4j.storage.StorageOutputStream createStorageOutputStream()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchPanelClosed(int,android.view.Menu)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void dispatchMenuVisibilityChanged(boolean)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchMenuOpened(int,android.view.Menu)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void dispatchMenuVisibilityChanged(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: int getLeftOffset()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: int getLeftOffset()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.lang.String testConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void postSynchronize()>
<com.dropbox.client2.session.WebAuthSession: java.util.Map setUpToken(java.lang.String)> --> <com.dropbox.client2.exception.DropboxParseException: void <init>(java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$CreatedCopyRef createCopyRef(java.lang.String)> --> <com.dropbox.client2.exception.DropboxParseException: void <init>(java.lang.String)>
<com.dropbox.client2.RESTUtility: java.util.Map parseAsQueryString(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxParseException: void <init>(java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DeltaPage delta(java.lang.String)> --> <com.dropbox.client2.exception.DropboxParseException: void <init>(java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink share(java.lang.String)> --> <com.dropbox.client2.exception.DropboxParseException: void <init>(java.lang.String)>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: void <init>(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxParseException: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int resolveSize(int,int)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean access$602(com.actionbarsherlock.widget.ActivityChooserView,boolean)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean access$602(com.actionbarsherlock.widget.ActivityChooserView,boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getActionItems()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void start()> --> <org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>
<org.json.simple.parser.JSONParser: void reset(java.io.Reader)> --> <org.json.simple.parser.Yylex: void yyreset(java.io.Reader)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList getFilesThatChangedRemotely(java.util.HashMap)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.HashMap getFileChecksums(android.content.ContentResolver)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void removeView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setEmbeddedTabView(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void removeView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void removeView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setCustomNavigationView(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void removeView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void removeView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void removeView(android.view.View)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void setSelected(boolean)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void setSelected(boolean)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date date()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int month()>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.internal.app.ActionBarWrapper: android.support.v4.app.FragmentTransaction access$102(com.actionbarsherlock.internal.app.ActionBarWrapper,android.support.v4.app.FragmentTransaction)>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.internal.app.ActionBarWrapper: android.support.v4.app.FragmentTransaction access$102(com.actionbarsherlock.internal.app.ActionBarWrapper,android.support.v4.app.FragmentTransaction)>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams getParams()> --> <org.apache.http.params.BasicHttpParams: void <init>()>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.params.BasicHttpParams: void <init>()>
<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()> --> <org.apache.http.params.BasicHttpParams: void <init>()>
<com.dropbox.client2.DropboxAPI$ChunkedUploadRequest: void abort()> --> <org.apache.http.client.methods.HttpUriRequest: void abort()>
<com.dropbox.client2.DropboxAPI$BasicUploadRequest: void abort()> --> <org.apache.http.client.methods.HttpUriRequest: void abort()>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void close()> --> <org.apache.http.client.methods.HttpUriRequest: void abort()>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String nodeToHTMLRecursive(com.matburt.mobileorg.OrgData.OrgNode,int)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String nodeToHTML(com.matburt.mobileorg.OrgData.OrgNode,int)>
<com.matburt.mobileorg.Services.TimeclockDialog: void saveClock(int,int)> --> <com.matburt.mobileorg.Services.TimeclockService: long getStartTime()>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.HostKeyRepository: void remove(java.lang.String,java.lang.String,byte[])>
<org.apache.http.impl.io.HttpRequestParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.ConnectionClosedException: void <init>(java.lang.String)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean)> --> <org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: void restoreFromBundle(android.os.Bundle)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setCheckable(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isChecked()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isChecked()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void collapseCurrent()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void ensureCheckedItemVisible()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_2_1(int)>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateContentType(java.lang.String,java.nio.charset.Charset)>
<org.apache.james.mime4j.util.StringArrayMap: java.util.Enumeration asStringEnum(java.lang.Object)> --> <org.apache.james.mime4j.util.StringArrayMap$2: void <init>(java.lang.String[])>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateNameValuePairLen(org.apache.http.NameValuePair)> --> <org.apache.http.NameValuePair: java.lang.String getName()>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)> --> <org.apache.http.NameValuePair: java.lang.String getName()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.NameValuePair: java.lang.String getName()>
<org.apache.http.message.BasicHeaderElement: org.apache.http.NameValuePair getParameterByName(java.lang.String)> --> <org.apache.http.NameValuePair: java.lang.String getName()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setChecked(boolean)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void insertCheckBox()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setCheckable(boolean)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void insertCheckBox()>
<com.jcraft.jsch.IdentityFile: byte[] getSignature(byte[])> --> <com.jcraft.jsch.IdentityFile: byte[] getSignature_rsa(byte[])>
<com.matburt.mobileorg.Gui.ViewFragment: void display(com.matburt.mobileorg.OrgData.OrgNode,int,android.content.ContentResolver)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String toHTML(com.matburt.mobileorg.OrgData.OrgNode,int)>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String toHTML(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String toHTML(com.matburt.mobileorg.OrgData.OrgNode,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ParseException: void <init>()> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.ContentDispositionField: void parse()> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.ParseException: void <init>()> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.ParseException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.mimeversion.parser.ParseException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.structured.parser.ParseException: void <init>()> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.contentdisposition.parser.ParseException: void <init>(org.apache.james.mime4j.field.contentdisposition.parser.Token,int[][],java.lang.String[])> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.contenttype.parser.ParseException: void <init>()> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.ParseException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.language.parser.ParseException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.contentdisposition.parser.ParseException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.structured.parser.ParseException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.contenttype.parser.ParseException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.structured.parser.ParseException: void <init>(org.apache.james.mime4j.field.structured.parser.Token,int[][],java.lang.String[])> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.ParseException: void <init>()> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.mimeversion.parser.ParseException: void <init>(org.apache.james.mime4j.field.mimeversion.parser.Token,int[][],java.lang.String[])> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.ParseException: void <init>(org.apache.james.mime4j.field.datetime.parser.Token,int[][],java.lang.String[])> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.language.parser.ParseException: void <init>()> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.language.parser.ParseException: void <init>(org.apache.james.mime4j.field.language.parser.Token,int[][],java.lang.String[])> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.ParseException: void <init>(org.apache.james.mime4j.field.address.parser.Token,int[][],java.lang.String[])> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.contenttype.parser.ParseException: void <init>(org.apache.james.mime4j.field.contenttype.parser.Token,int[][],java.lang.String[])> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.mimeversion.parser.ParseException: void <init>()> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.contentdisposition.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String readLine()> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)>
<org.apache.http.impl.AbstractHttpServerConnection: void flush()> --> <org.apache.http.impl.AbstractHttpServerConnection: void doFlush()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_1()>
<org.apache.james.mime4j.field.ContentTransferEncodingField$1: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.ContentTransferEncodingField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Buffer: void putByte(byte[])>
<com.jcraft.jsch.Buffer: void putMPInt(byte[])> --> <com.jcraft.jsch.Buffer: void putByte(byte[])>
<com.matburt.mobileorg.Services.TimeclockDialog: void onStart()> --> <com.matburt.mobileorg.Services.TimeclockService: long getNodeID()>
<com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList generateApplyEditNodes(com.matburt.mobileorg.OrgData.OrgNode,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList generateApplyEditNodes(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: void generateApplyWriteEdits(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList generateApplyEditNodes(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void <clinit>()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void jj_la1_0()>
<com.matburt.mobileorg.Services.SyncService$1: void run()> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList runSynchronizer(com.matburt.mobileorg.OrgData.OrgFileParser)>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserInfo: boolean promptPassphrase(java.lang.String)>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.UserInfo: boolean promptPassphrase(java.lang.String)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setSupportSecondaryProgress(int)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void openOptionsMenu()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setContentView(int)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void invalidateOptionsMenu()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void closeOptionsMenu()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setSupportProgressBarIndeterminate(boolean)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onTitleChanged(java.lang.CharSequence,int)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void requestWindowFeature(long)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setSupportProgress(int)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onPostResume()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onPanelClosed(int,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setSupportProgressBarVisibility(boolean)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onDestroy()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onStop()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setContentView(android.view.View)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: boolean onCreatePanelMenu(int,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setSupportProgressBarIndeterminateVisibility(boolean)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onPause()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: boolean onMenuOpened(int,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.jcraft.jsch.ChannelExec: void setErrStream(java.io.OutputStream)> --> <com.jcraft.jsch.ChannelExec: void setExtOutputStream(java.io.OutputStream)>
<org.apache.http.ProtocolException: void <init>()> --> <org.apache.http.HttpException: void <init>()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.parser.Field: java.lang.String getBody()>
<org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.parser.Field: java.lang.String getBody()>
<org.apache.james.mime4j.message.Message: java.lang.String getMessageId()> --> <org.apache.james.mime4j.parser.Field: java.lang.String getBody()>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.james.mime4j.parser.Field: java.lang.String getBody()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: int read(byte[],int,int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int findInsertIndex(java.util.ArrayList,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: long access$300(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator)>
<org.json.simple.parser.Yylex: void <clinit>()> --> <org.json.simple.parser.Yylex: char[] zzUnpackCMap(java.lang.String)>
<org.apache.http.protocol.BasicHttpProcessor: void setInterceptors(java.util.List)> --> <org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getId()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.ArrayList stripProperties()>
<com.matburt.mobileorg.OrgData.OrgNodePayload: void cleanPayload()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.ArrayList stripProperties()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback: boolean onOpenSubMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.MenuItem getItem()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.MenuItem getItem()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.MenuItem getItem()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getEndColumn()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getEndColumn()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.String getShortcutLabel()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: char getShortcut()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: char getShortcut()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean shouldShowShortcut()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: char getShortcut()>
<com.actionbarsherlock.internal.ActionBarSherlockNative: boolean dispatchOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem findItem(android.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem findItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem findItem(android.view.MenuItem)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem findItem(android.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem getItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem findItem(android.view.MenuItem)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pull(com.matburt.mobileorg.OrgData.OrgFileParser,java.util.ArrayList,java.util.HashMap,java.util.HashMap)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void getAndParseFile(com.matburt.mobileorg.OrgData.OrgFile,com.matburt.mobileorg.OrgData.OrgFileParser)>
<com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> --> <com.jcraft.jsch.RequestWindowChange: void setSize(int,int,int,int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.matburt.mobileorg.Services.CalendarSyncService: void access$100(com.matburt.mobileorg.Services.CalendarSyncService,java.lang.String[])> --> <com.matburt.mobileorg.Services.CalendarSyncService: void syncFiles(java.lang.String[])>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader)> --> <com.matburt.mobileorg.OrgData.OrgFileParser: void init(com.matburt.mobileorg.OrgData.OrgFile)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void setForceShowIcon(boolean)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> --> <org.apache.http.impl.HttpConnectionMetricsImpl: void incrementRequestCount()>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.HttpRequest receiveRequestHeader()> --> <org.apache.http.impl.HttpConnectionMetricsImpl: void incrementRequestCount()>
<org.apache.http.params.AbstractHttpParams: int getIntParameter(java.lang.String,int)> --> <org.apache.http.params.AbstractHttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.AbstractHttpParams: double getDoubleParameter(java.lang.String,double)> --> <org.apache.http.params.AbstractHttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.AbstractHttpParams: boolean getBooleanParameter(java.lang.String,boolean)> --> <org.apache.http.params.AbstractHttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.AbstractHttpParams: long getLongParameter(java.lang.String,long)> --> <org.apache.http.params.AbstractHttpParams: java.lang.Object getParameter(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: void setInterpolator(android.view.animation.Interpolator)>
<com.jcraft.jsch.ChannelSftp: java.lang.String getHome()> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String realpath(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],java.lang.String)>
<org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream,org.apache.james.mime4j.parser.MimeEntityConfig,org.apache.james.mime4j.storage.StorageProvider)>
<org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream,org.apache.james.mime4j.parser.MimeEntityConfig)> --> <org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream,org.apache.james.mime4j.parser.MimeEntityConfig,org.apache.james.mime4j.storage.StorageProvider)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.app.ActionBar$Tab: android.graphics.drawable.Drawable getIcon()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char BeginToken()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void collapseCurrent()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setItemChecked(int,boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void setParentChecked(int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setItemChecked(int,boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onRestoreInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setItemChecked(int,boolean)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setFillViewport(boolean)>
<com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestPtyReq: void write(com.jcraft.jsch.Packet)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper: void <init>(com.actionbarsherlock.internal.ActionBarSherlockNative,android.view.ActionMode)> --> <com.actionbarsherlock.view.ActionMode: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl,com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.view.ActionMode: void <init>()>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void <init>(android.content.Context,com.actionbarsherlock.internal.widget.ActionBarContextView,com.actionbarsherlock.view.ActionMode$Callback,boolean)> --> <com.actionbarsherlock.view.ActionMode: void <init>()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void access$100(com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pushCaptures()> --> <com.matburt.mobileorg.Synchronizers.SynchronizerInterface: void putRemoteFile(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.SubMenu setHeaderTitle(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderTitleInt(int)>
<com.google.gdata.util.common.base.UnicodeEscaper: java.lang.String escapeSlow(java.lang.String,int)> --> <com.google.gdata.util.common.base.UnicodeEscaper: char[] growBuffer(char[],int,int)>
<com.matburt.mobileorg.OrgData.OrgFile: long removeFile(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: long removeFileOrgDataNodes(android.content.ContentResolver)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setNavigationMode(int)>
<org.apache.james.mime4j.message.Header$1: void endHeader()> --> <org.apache.james.mime4j.parser.MimeStreamParser: void stop()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.Buffer: byte[] getString()>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: com.matburt.mobileorg.Gui.Wizard.DirectoryBrowser access$000(com.matburt.mobileorg.Gui.Wizard.FolderAdapter)>
<com.matburt.mobileorg.util.SelectionBuilder: int update(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)> --> <com.matburt.mobileorg.util.SelectionBuilder: java.lang.String getSelection()>
<com.matburt.mobileorg.util.SelectionBuilder: int delete(android.database.sqlite.SQLiteDatabase)> --> <com.matburt.mobileorg.util.SelectionBuilder: java.lang.String getSelection()>
<com.matburt.mobileorg.util.SelectionBuilder: java.lang.String toString()> --> <com.matburt.mobileorg.util.SelectionBuilder: java.lang.String getSelection()>
<com.matburt.mobileorg.util.SelectionBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.util.SelectionBuilder: java.lang.String getSelection()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: boolean isEnabled()>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: void addHeader(org.apache.http.Header)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void writeAgendaEntry(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder,int,int,android.content.Context)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void supportInvalidateOptionsMenu()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void invalidateOptionsMenu()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getEndLine()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getEndLine()>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,byte[])> --> <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])>
<com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> --> <com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: boolean onContextItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockFragment: boolean onContextItemSelected(android.view.MenuItem)>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isPayloadEditable()> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.OrgData.OrgNode getOrgNode()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.OrgData.OrgNode getOrgNode()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getLocationEntry(com.matburt.mobileorg.OrgData.OrgNode,java.util.ArrayList,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.OrgData.OrgNode getOrgNode()>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isNodeEditable()> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.OrgData.OrgNode getOrgNode()>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isNodeRefilable()> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.OrgData.OrgNode getOrgNode()>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.OrgData.OrgNode getOrgNode()>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.GSSContext: byte[] init(byte[],int,int)>
<org.apache.http.message.BasicHttpEntityEnclosingRequest: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)> --> <org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicNameValuePair: boolean equals(java.lang.Object)> --> <org.apache.http.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>
<org.apache.http.util.LangUtils: boolean equals(java.lang.Object[],java.lang.Object[])> --> <org.apache.http.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>
<org.apache.http.message.BasicHeaderElement: boolean equals(java.lang.Object)> --> <org.apache.http.util.LangUtils: boolean equals(java.lang.Object,java.lang.Object)>
<org.apache.james.mime4j.storage.CipherStorageProvider: org.apache.james.mime4j.storage.StorageOutputStream createStorageOutputStream()> --> <org.apache.james.mime4j.storage.CipherStorageProvider: javax.crypto.spec.SecretKeySpec getSecretKeySpec()>
<com.matburt.mobileorg.OrgData.OrgEdit: java.lang.String editsToString(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: java.lang.String toString()>
<com.jcraft.jsch.IdentityFile: boolean decrypt_rsa()> --> <com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.IdentityFile: boolean decrypt_dss()> --> <com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> --> <com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> --> <com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.Cipher: void update(byte[],int,int,byte[],int)>
<org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.StatusLine,org.apache.http.ReasonPhraseCatalog,java.util.Locale)> --> <org.apache.http.message.AbstractHttpMessage: void <init>()>
<org.apache.http.message.BasicHttpRequest: void <init>(org.apache.http.RequestLine)> --> <org.apache.http.message.AbstractHttpMessage: void <init>()>
<org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String)> --> <org.apache.http.message.AbstractHttpMessage: void <init>()>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncNode(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.util.MultiMap,java.lang.String)> --> <com.matburt.mobileorg.Services.CalendarSyncService: void tryToInsertNode(com.matburt.mobileorg.util.MultiMap,com.matburt.mobileorg.OrgData.OrgNodeDate,java.lang.String,com.matburt.mobileorg.OrgData.OrgNode)>
<com.dropbox.client2.DropboxAPI$ChunkedUploader: com.dropbox.client2.DropboxAPI$Entry finish(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry access$100(com.dropbox.client2.DropboxAPI,java.lang.String,java.lang.String,boolean,java.lang.String)>
<oauth.signpost.OAuth: oauth.signpost.http.HttpParameters decodeForm(java.lang.String)> --> <oauth.signpost.http.HttpParameters: void <init>()>
<oauth.signpost.OAuth: oauth.signpost.http.HttpParameters oauthHeaderToParamsMap(java.lang.String)> --> <oauth.signpost.http.HttpParameters: void <init>()>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.http.HttpParameters: void <init>()>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.http.HttpParameters: void <init>()>
<oauth.signpost.AbstractOAuthProvider: void <init>(java.lang.String,java.lang.String,java.lang.String)> --> <oauth.signpost.http.HttpParameters: void <init>()>
<org.apache.james.mime4j.util.ByteArrayBuffer: java.lang.String toString()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: byte[] toByteArray()>
<com.dropbox.client2.DropboxAPI$Account: void <init>(java.util.Map)> --> <com.dropbox.client2.DropboxAPI: long getFromMapAsLong(java.util.Map,java.lang.String)>
<com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)> --> <com.dropbox.client2.DropboxAPI: long getFromMapAsLong(java.util.Map,java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getMeasuredHeight()>
<com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void finish()>
<org.apache.james.mime4j.field.ContentTypeField: boolean isMultipart()> --> <org.apache.james.mime4j.field.ContentTypeField: void parse()>
<org.apache.james.mime4j.field.ContentTypeField: java.util.Map getParameters()> --> <org.apache.james.mime4j.field.ContentTypeField: void parse()>
<org.apache.james.mime4j.field.ContentTypeField: boolean isMimeType(java.lang.String)> --> <org.apache.james.mime4j.field.ContentTypeField: void parse()>
<org.apache.james.mime4j.field.ContentTypeField: java.lang.String getMimeType()> --> <org.apache.james.mime4j.field.ContentTypeField: void parse()>
<org.apache.james.mime4j.field.ContentTypeField: org.apache.james.mime4j.field.contenttype.parser.ParseException getParseException()> --> <org.apache.james.mime4j.field.ContentTypeField: void parse()>
<org.apache.james.mime4j.field.ContentTypeField: java.lang.String getParameter(java.lang.String)> --> <org.apache.james.mime4j.field.ContentTypeField: void parse()>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback: boolean onOpenSubMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback: boolean onOpenSubMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void combineBlockAgendas()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgNode getOrgNodeFromFilename(java.lang.String,android.content.ContentResolver)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void setAnchorView(android.view.View)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void setAnchorView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setHomeButtonEnabled(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setEnabled(boolean)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void start(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setCurrentPlayTime(long)>
<org.apache.james.mime4j.message.Message: void createMessageId(java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field messageId(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void doRefreshProgress(int,int,boolean,boolean)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void refreshProgress(int,int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void doRefreshProgress(int,int,boolean,boolean)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void access$000(com.actionbarsherlock.internal.widget.IcsProgressBar,int,int,boolean,boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void doRefreshProgress(int,int,boolean,boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$2: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: com.actionbarsherlock.app.SherlockActivity access$400(com.matburt.mobileorg.Gui.Outline.OutlineListView)>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)>
<org.apache.james.mime4j.message.Entity: void setFilename(java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)>
<org.apache.james.mime4j.message.Entity: void setContentDisposition(java.lang.String,java.lang.String,long)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.lang.String,long)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)>
<com.matburt.mobileorg.Services.CalendarSyncService: com.matburt.mobileorg.util.MultiMap getCalendarEntries(java.lang.String)> --> <com.matburt.mobileorg.OrgData.CalendarEntriesParser: com.matburt.mobileorg.OrgData.CalendarEntry getEntryFromCursor(android.database.Cursor)>
<com.matburt.mobileorg.Services.CalendarSyncService: void assimilateCalendar()> --> <com.matburt.mobileorg.OrgData.CalendarEntriesParser: com.matburt.mobileorg.OrgData.CalendarEntry getEntryFromCursor(android.database.Cursor)>
<com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> --> <javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>
<com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> --> <javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void changeMenuMode()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback: void onMenuModeChange(com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams copy()> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams copy()>
<com.google.gdata.util.common.base.Preconditions: void checkPositionIndexes(int,int,int)> --> <com.google.gdata.util.common.base.Preconditions: void checkPositionIndex(int,int,java.lang.String)>
<com.google.gdata.util.common.base.Preconditions: void checkPositionIndex(int,int)> --> <com.google.gdata.util.common.base.Preconditions: void checkPositionIndex(int,int,java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setFloatValues(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setFloatValues(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int zone()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int obs_zone()>
<com.matburt.mobileorg.Gui.TabsAdapter: void <init>(com.actionbarsherlock.app.SherlockFragmentActivity,android.support.v4.view.ViewPager)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$2: void onClick(android.view.View)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$4: void onClick(android.view.View)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$3: void onClick(android.view.View)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.ProtocolException: void <init>(java.lang.String)>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolException: void <init>(java.lang.String)>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolException: void <init>(java.lang.String)>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)> --> <org.apache.http.ProtocolException: void <init>(java.lang.String)>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ProtocolException: void <init>(java.lang.String)>
<org.apache.http.impl.entity.StrictContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.ProtocolException: void <init>(java.lang.String)>
<org.apache.http.UnsupportedHttpVersionException: void <init>(java.lang.String)> --> <org.apache.http.ProtocolException: void <init>(java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity$SynchServiceReceiver: void onReceive(android.content.Context,android.content.Intent)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void setSupportProgressBarIndeterminateVisibility(boolean)>
<org.apache.james.mime4j.util.CharsetUtil: void <clinit>()> --> <org.apache.james.mime4j.util.CharsetUtil$Charset: java.lang.String access$200(org.apache.james.mime4j.util.CharsetUtil$Charset)>
<org.apache.james.mime4j.util.CharsetUtil: java.lang.String toMimeCharset(java.lang.String)> --> <org.apache.james.mime4j.util.CharsetUtil$Charset: java.lang.String access$200(org.apache.james.mime4j.util.CharsetUtil$Charset)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int measureHeightOfChildren(int,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void measureScrapChild(android.view.View,int,int)>
<org.apache.james.mime4j.message.MessageBuilder: void <init>(org.apache.james.mime4j.message.Entity,org.apache.james.mime4j.storage.StorageProvider)> --> <org.apache.james.mime4j.message.BodyFactory: void <init>(org.apache.james.mime4j.storage.StorageProvider)>
<com.matburt.mobileorg.util.PreferenceUtils: boolean useAdvancedCapturing()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getContext()>
<com.matburt.mobileorg.util.PreferenceUtils: int getFontSize()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getContext()>
<com.matburt.mobileorg.util.PreferenceUtils: java.lang.String getThemeName()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getContext()>
<com.matburt.mobileorg.util.PreferenceUtils: java.util.HashSet getExcludedTags()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getContext()>
<com.matburt.mobileorg.util.PreferenceUtils: int getLevelOfRecursion()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getContext()>
<com.matburt.mobileorg.util.PreferenceUtils: boolean isUpgradedVersion()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getContext()>
<com.matburt.mobileorg.util.PreferenceUtils: boolean isSyncConfigured()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getContext()>
<com.matburt.mobileorg.OrgData.OrgNode: void addAutomaticTimestamp()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getContext()>
<com.matburt.mobileorg.util.PreferenceUtils: java.util.ArrayList getSelectedTodos()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getContext()>
<com.matburt.mobileorg.util.PreferenceUtils: java.lang.String getDefaultTodo()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getContext()>
<com.matburt.mobileorg.util.PreferenceUtils: boolean getCombineBlockAgendas()> --> <com.matburt.mobileorg.OrgData.MobileOrgApplication: android.content.Context getContext()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runEditNodeActivity(long,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runEditNodeActivity(long,android.content.Context)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runEditNodeActivity(long,android.content.Context)>
<com.dropbox.client2.session.WebAuthSession: java.util.Map setUpToken(java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.util.Map parseAsQueryString(org.apache.http.HttpResponse)>
<com.jcraft.jsch.jce.HMACSHA196: void update(int)> --> <com.jcraft.jsch.jce.HMACSHA196: void update(byte[],int,int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void setLocalWindowSize(int)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder getQueryFromSettings()> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: java.util.ArrayList splitToArrayList(java.lang.String)>
<org.json.simple.parser.JSONParser: void parse(java.lang.String,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler)> --> <org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)>
<com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> --> <com.jcraft.jsch.Session: boolean checkKex(com.jcraft.jsch.Session,java.lang.String)>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel,java.lang.String,boolean)> --> <com.jcraft.jsch.RequestSubsystem: void setReply(boolean)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void save()> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: void writeConfig(int,android.content.Context,java.lang.String,java.lang.String)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void notifyOnDismissListener()> --> <com.actionbarsherlock.widget.ActivityChooserView: android.widget.PopupWindow$OnDismissListener access$1100(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()> --> <com.actionbarsherlock.widget.ActivityChooserView: android.content.Context getContext()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.widget.ActivityChooserView: android.content.Context getContext()>
<com.actionbarsherlock.internal.view.menu.MenuItemWrapper$1: boolean onMenuItemActionCollapse(android.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionCollapse(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean collapseActionView()> --> <com.actionbarsherlock.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionCollapse(com.actionbarsherlock.view.MenuItem)>
<org.apache.http.impl.entity.EntitySerializer: java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.impl.io.ContentLengthOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer,long)>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatNameValuePair(org.apache.http.NameValuePair,boolean,org.apache.http.message.HeaderValueFormatter)> --> <org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)>
<org.apache.james.mime4j.message.StorageBinaryBody: void dispose()> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: void delete()>
<org.apache.james.mime4j.message.StorageTextBody: void dispose()> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: void delete()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void measureChildWithMargins(android.view.View,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int indexOfChild(android.view.View)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.internal.widget.ActionBarContextView access$300(com.actionbarsherlock.internal.ActionBarSherlockCompat)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getChild(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.util.OrgNodeNotFoundException: void <init>(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNode: void <init>(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.util.OrgNodeNotFoundException: void <init>(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNode: void set(android.database.Cursor)> --> <com.matburt.mobileorg.util.OrgNodeNotFoundException: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void configPresenters(com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: android.view.View findViewById(int)>
<org.apache.james.mime4j.field.DateTimeField: void parse()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime parseAll()>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Date parseDate(java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime parseAll()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.KeyExchange: boolean next(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.KeyExchange: boolean next(com.jcraft.jsch.Buffer)>
<com.dropbox.client2.session.AbstractSession$3: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>
<org.apache.http.protocol.RequestDate: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>
<org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>
<org.apache.http.protocol.RequestConnControl: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void setTranslationY(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setTranslationY(float)>
<com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void setTranslationY(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setTranslationY(float)>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: void write0(byte[],int,int)> --> <org.apache.james.mime4j.storage.StorageOutputStream: void write(byte[],int,int)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void setupTagEntries(java.util.ArrayList)> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: void addTagEntry(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: void addTagEntry(java.lang.String)>
<com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> --> <com.jcraft.jsch.RequestWindowChange: void <init>()>
<org.apache.http.message.BasicTokenIterator: int findTokenEnd(int)> --> <org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>
<org.apache.http.message.BasicTokenIterator: int findTokenSeparator(int)> --> <org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>
<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)> --> <org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>
<org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: void <init>(org.apache.james.mime4j.field.address.parser.SimpleNode)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: int jjtGetNumChildren()>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Cipher: int getIVSize()>
<com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> --> <com.jcraft.jsch.Cipher: int getIVSize()>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Cipher: int getIVSize()>
<com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> --> <com.jcraft.jsch.Cipher: int getIVSize()>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Cipher: int getIVSize()>
<com.matburt.mobileorg.Settings.SettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.SettingsActivity: void populateSyncSources()>
<oauth.signpost.http.HttpParameters: java.lang.Object remove(java.lang.Object)> --> <oauth.signpost.http.HttpParameters: java.util.SortedSet remove(java.lang.Object)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.http.HttpParameters: java.util.SortedSet remove(java.lang.Object)>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.http.HttpParameters: java.util.SortedSet remove(java.lang.Object)>
<oauth.signpost.AbstractOAuthProvider: java.lang.String retrieveRequestToken(oauth.signpost.OAuthConsumer,java.lang.String)> --> <oauth.signpost.http.HttpParameters: java.util.SortedSet remove(java.lang.Object)>
<oauth.signpost.http.HttpParameters: java.util.SortedSet put(java.lang.String,java.util.SortedSet,boolean)> --> <oauth.signpost.http.HttpParameters: java.util.SortedSet remove(java.lang.Object)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void refreshDisplay()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void refresh()>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset getCharset()>
<com.actionbarsherlock.internal.view.menu.ActionMenu: void setGroupVisible(int,boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.view.MenuItem setVisible(boolean)>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: java.lang.Object getValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: float getFraction()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseIndexFile()> --> <com.matburt.mobileorg.OrgData.OrgFileParser: java.util.ArrayList getTodosFromIndex(java.lang.String)>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: void <init>(org.apache.james.mime4j.storage.ThresholdStorageProvider)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>
<org.apache.james.mime4j.message.MessageBuilder: org.apache.james.mime4j.util.ByteSequence loadStream(java.io.InputStream)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>
<org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.nio.charset.Charset,java.lang.String)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>
<org.apache.james.mime4j.storage.MemoryStorageProvider$MemoryStorageOutputStream: void <init>()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>
<org.apache.james.mime4j.parser.AbstractEntity: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor,int,int,org.apache.james.mime4j.parser.MimeEntityConfig)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>
<org.apache.http.entity.mime.HttpMultipart: org.apache.james.mime4j.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>
<com.actionbarsherlock.internal.view.menu.MenuItemWrapper$1: boolean onMenuItemActionExpand(android.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem$OnActionExpandListener access$000(com.actionbarsherlock.internal.view.menu.MenuItemWrapper)>
<com.actionbarsherlock.internal.view.menu.MenuItemWrapper$1: boolean onMenuItemActionCollapse(android.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem$OnActionExpandListener access$000(com.actionbarsherlock.internal.view.menu.MenuItemWrapper)>
<org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: boolean containsHeader(java.lang.String)>
<org.apache.http.protocol.ResponseDate: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: boolean containsHeader(java.lang.String)>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: boolean containsHeader(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3_1()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_8()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3_2()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_8()>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String)>
<org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset getCharset()> --> <org.apache.james.mime4j.message.Header: org.apache.james.mime4j.parser.Field getField(java.lang.String)>
<org.apache.james.mime4j.message.Entity: java.lang.String getMimeType()> --> <org.apache.james.mime4j.message.Header: org.apache.james.mime4j.parser.Field getField(java.lang.String)>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.james.mime4j.message.Header: org.apache.james.mime4j.parser.Field getField(java.lang.String)>
<org.apache.james.mime4j.message.Entity: java.lang.String getContentTransferEncoding()> --> <org.apache.james.mime4j.message.Header: org.apache.james.mime4j.parser.Field getField(java.lang.String)>
<org.apache.james.mime4j.message.Entity: void setFilename(java.lang.String)> --> <org.apache.james.mime4j.message.Header: org.apache.james.mime4j.parser.Field getField(java.lang.String)>
<org.apache.james.mime4j.message.Entity: java.lang.String getCharset()> --> <org.apache.james.mime4j.message.Header: org.apache.james.mime4j.parser.Field getField(java.lang.String)>
<org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.parser.Field obtainField(java.lang.String)> --> <org.apache.james.mime4j.message.Header: org.apache.james.mime4j.parser.Field getField(java.lang.String)>
<org.apache.http.entity.mime.HttpMultipart: java.lang.String getBoundary()> --> <org.apache.james.mime4j.message.Header: org.apache.james.mime4j.parser.Field getField(java.lang.String)>
<org.apache.james.mime4j.message.MessageWriter: org.apache.james.mime4j.field.ContentTypeField getContentType(org.apache.james.mime4j.message.Multipart)> --> <org.apache.james.mime4j.message.Header: org.apache.james.mime4j.parser.Field getField(java.lang.String)>
<org.apache.james.mime4j.message.Entity: boolean isMultipart()> --> <org.apache.james.mime4j.message.Header: org.apache.james.mime4j.parser.Field getField(java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.widget.ActionBarContainer access$200(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxList()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void setupDoneButton(android.view.View)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.apache.http.auth.UsernamePasswordCredentials: void <init>(java.lang.String,java.lang.String)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setChecked(boolean)>
<org.apache.http.impl.AbstractHttpClientConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeAddressDisplayName(java.lang.String)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage)>
<com.jcraft.jsch.jce.DH: void setP(byte[])> --> <com.jcraft.jsch.jce.DH: void setP(java.math.BigInteger)>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity: void writeTo(java.io.OutputStream)> --> <org.apache.http.HttpEntity: void writeTo(java.io.OutputStream)>
<org.apache.http.entity.BufferedHttpEntity: void writeTo(java.io.OutputStream)> --> <org.apache.http.HttpEntity: void writeTo(java.io.OutputStream)>
<org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)> --> <org.apache.http.HttpEntity: void writeTo(java.io.OutputStream)>
<org.apache.http.entity.HttpEntityWrapper: void writeTo(java.io.OutputStream)> --> <org.apache.http.HttpEntity: void writeTo(java.io.OutputStream)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()>
<com.jcraft.jsch.ChannelExec: void start()> --> <com.jcraft.jsch.RequestExec: void <init>(byte[])>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void access$300(com.matburt.mobileorg.Gui.Wizard.WizardView)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollRight()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.ArrayList access$200(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.jcraft.jsch.ChannelExec: void start()> --> <com.jcraft.jsch.ChannelExec: void sendRequests()>
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.CharArrayBuffer: void append(char[],int,int)>
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)> --> <org.apache.http.util.CharArrayBuffer: void append(char[],int,int)>
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)> --> <org.apache.http.util.CharArrayBuffer: void append(char[],int,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.parser.AbstractEntity: java.lang.String toString()> --> <org.apache.james.mime4j.descriptor.MutableBodyDescriptor: java.lang.String getBoundary()>
<org.apache.james.mime4j.parser.MimeEntity: void createMimeStream()> --> <org.apache.james.mime4j.descriptor.MutableBodyDescriptor: java.lang.String getBoundary()>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper: com.actionbarsherlock.view.Menu getMenu()> --> <com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper: com.actionbarsherlock.internal.view.menu.MenuWrapper getMenu()>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper: com.actionbarsherlock.internal.view.menu.MenuWrapper getMenu()>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper: com.actionbarsherlock.internal.view.menu.MenuWrapper getMenu()>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper: com.actionbarsherlock.internal.view.menu.MenuWrapper getMenu()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getLocationSelection()> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedNodeId(int)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedNodeId(int)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedNodeId(int)>
<com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: boolean isLocalAbsolutePath(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void refresh()> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList getAgendaQueryTitles(int,android.content.Context)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void <init>(android.content.Context,int,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasureExactFormat(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void setMeasuredDimension(int,int)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: int access$1000(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: int access$1000(com.actionbarsherlock.widget.ActivityChooserView)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void addAgenda(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)> --> <com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: long[] getNodes(android.database.sqlite.SQLiteDatabase,android.content.Context)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getBottom()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getBottom()>
<org.apache.http.impl.io.AbstractMessageWriter: void write(org.apache.http.HttpMessage)> --> <org.apache.http.HttpMessage: org.apache.http.HeaderIterator headerIterator()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void handleDropboxResume()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxList()>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.SubMenu setIcon(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.widget.ActivityChooserView: void updateAppearance()> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getActivityCount()>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getActivityCount()>
<com.jcraft.jsch.Channel$1: void close()> --> <com.jcraft.jsch.Channel: void eof()>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: com.matburt.mobileorg.Gui.Agenda.OrgAgenda getAgenda(int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void <init>()>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: int addAgenda(android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void <init>()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean performExpand()>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateNameValuePairLen(org.apache.http.NameValuePair)> --> <org.apache.http.NameValuePair: java.lang.String getValue()>
<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)> --> <org.apache.http.NameValuePair: java.lang.String getValue()>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)> --> <org.apache.http.NameValuePair: java.lang.String getValue()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.NameValuePair: java.lang.String getValue()>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet clone()>
<org.apache.james.mime4j.field.UnstructuredField$1: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.UnstructuredField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)> --> <org.apache.james.mime4j.util.MimeUtil: java.lang.String formatDate(java.util.Date,java.util.TimeZone)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.DateTimeField date0(java.lang.String,java.util.Date,java.util.TimeZone)> --> <org.apache.james.mime4j.util.MimeUtil: java.lang.String formatDate(java.util.Date,java.util.TimeZone)>
<com.dropbox.client2.session.WebAuthSession: com.dropbox.client2.session.WebAuthSession$WebAuthInfo getAuthInfo(java.lang.String)> --> <com.dropbox.client2.session.WebAuthSession: java.lang.String getWebServer()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerEdit: com.matburt.mobileorg.OrgData.OrgNode getParentOrgNode()> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParent(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void setupLocation()> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParent(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getSibling(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParent(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit archiveNodeToSibling(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParent(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getSiblingsStringArray(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParent(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parseHeading(java.lang.String,int)> --> <com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: int getCurrentLevel()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: android.view.ViewGroup$LayoutParams getLayoutParams()>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenRSA: byte[] getQ()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: boolean isEmpty()>
<com.jcraft.jsch.Session: void disconnect()> --> <com.jcraft.jsch.Proxy: void close()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.util.List doParse()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.lang.String language()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean hasData()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean hasData()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read()> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean hasData()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean hasData()>
<org.apache.http.impl.AbstractHttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)> --> <org.apache.http.HttpEntityEnclosingRequest: void setEntity(org.apache.http.HttpEntity)>
<com.actionbarsherlock.internal.app.ActionBarImpl$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setTransitioning(boolean)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setTransitioning(boolean)>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.Session$GlobalRequestReply: void setThread(java.lang.Thread)>
<com.matburt.mobileorg.Settings.SettingsActivity: void populateCalendarNames()> --> <com.matburt.mobileorg.Services.CalendarWrapper: java.lang.CharSequence[] getCalendars(android.content.Context)>
<org.apache.james.mime4j.util.CharsetUtil: boolean isASCII(java.lang.String)> --> <org.apache.james.mime4j.util.CharsetUtil: boolean isASCII(char)>
<org.apache.http.impl.io.ChunkedInputStream: void nextChunk()> --> <org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>
<org.apache.http.impl.io.ChunkedInputStream: int read(byte[],int,int)> --> <org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>
<org.apache.http.impl.io.ChunkedInputStream: int getChunkSize()> --> <org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>
<org.apache.http.impl.io.ChunkedInputStream: void parseTrailerHeaders()> --> <org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: void <init>(com.actionbarsherlock.view.MenuInflater,com.actionbarsherlock.view.Menu)>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: com.dropbox.client2.android.AndroidAuthSession buildSession()> --> <com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: java.lang.String[] getKeys()>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.conn.params.ConnManagerParams: void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams,org.apache.http.conn.params.ConnPerRoute)>
<org.apache.http.impl.DefaultHttpServerConnection: void <init>()> --> <org.apache.http.impl.SocketHttpServerConnection: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void <init>(android.app.Dialog)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$2: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void <init>(android.app.Activity,int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$2: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl)>
<org.apache.http.protocol.BasicHttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponseInterceptor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: java.lang.String getTodo()>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: com.matburt.mobileorg.OrgData.OrgNode getEditedOrgNode()> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: java.lang.String getTodo()>
<com.jcraft.jsch.jce.HMACSHA196: void doFinal(byte[],int)> --> <javax.crypto.Mac: void doFinal(byte[],int)>
<com.jcraft.jsch.jce.HMACSHA1: void doFinal(byte[],int)> --> <javax.crypto.Mac: void doFinal(byte[],int)>
<com.jcraft.jsch.jce.HMACMD5: void doFinal(byte[],int)> --> <javax.crypto.Mac: void doFinal(byte[],int)>
<com.jcraft.jsch.jce.HMACMD596: void doFinal(byte[],int)> --> <javax.crypto.Mac: void doFinal(byte[],int)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onDestroy()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchDestroy()>
<com.actionbarsherlock.app.SherlockActivity: void onDestroy()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchDestroy()>
<com.actionbarsherlock.app.SherlockListActivity: void onDestroy()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchDestroy()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onDestroy()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchDestroy()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onDestroy()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchDestroy()>
<com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> --> <com.jcraft.jsch.MAC: void update(byte[],int,int)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.MAC: void update(byte[],int,int)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> --> <com.jcraft.jsch.MAC: void update(byte[],int,int)>
<com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.MAC: void update(byte[],int,int)>
<com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> --> <com.jcraft.jsch.MAC: void update(byte[],int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.IntEvaluator: java.lang.Integer evaluate(float,java.lang.Integer,java.lang.Integer)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void showErrorNotification(java.lang.Exception)> --> <com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void finalizeNotification()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void announceSyncDone()> --> <com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void finalizeNotification()>
<com.matburt.mobileorg.OrgData.OrgProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> --> <com.matburt.mobileorg.util.SelectionBuilder: int update(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: int findGroupIndex(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int findGroupIndex(int,int)>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.KeyExchange: byte[] getH()>
<oauth.signpost.signature.AuthorizationHeaderSigningStrategy: java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpRequest: void setHeader(java.lang.String,java.lang.String)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.http.HttpRequest: void setHeader(java.lang.String,java.lang.String)>
<org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset getCharset()> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header getHeader()>
<org.apache.james.mime4j.message.Entity: java.lang.String getMimeType()> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header getHeader()>
<org.apache.james.mime4j.message.Entity: java.lang.String getContentTransferEncoding()> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header getHeader()>
<org.apache.james.mime4j.message.Entity: java.lang.String getCharset()> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header getHeader()>
<org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.parser.Field obtainField(java.lang.String)> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header getHeader()>
<org.apache.http.entity.mime.HttpMultipart: java.lang.String getBoundary()> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header getHeader()>
<org.apache.james.mime4j.message.MessageWriter: org.apache.james.mime4j.field.ContentTypeField getContentType(org.apache.james.mime4j.message.Multipart)> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header getHeader()>
<org.apache.james.mime4j.message.MessageWriter: void writeEntity(org.apache.james.mime4j.message.Entity,java.io.OutputStream)> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header getHeader()>
<org.apache.james.mime4j.message.Entity: boolean isMultipart()> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header getHeader()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void access$700(com.matburt.mobileorg.Gui.Capture.DateTableRow,int,int)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void setEndTimeCallback(int,int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setOnItemSelectedListener(com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemSelectedListener)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.IcsSpinner createSpinner()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setOnItemSelectedListener(com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemSelectedListener)>
<com.matburt.mobileorg.Gui.ViewFragment: void access$000(com.matburt.mobileorg.Gui.ViewFragment,java.lang.String)> --> <com.matburt.mobileorg.Gui.ViewFragment: void handleInternalOrgUrl(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void addTagEntry(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getCount()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onDestroy()> --> <com.matburt.mobileorg.Services.SyncService: void startAlarm(android.content.Context)>
<com.matburt.mobileorg.OrgData.MobileOrgApplication: void onCreate()> --> <com.matburt.mobileorg.Services.SyncService: void startAlarm(android.content.Context)>
<com.matburt.mobileorg.Services.MobileOrgStartupIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> --> <com.matburt.mobileorg.Services.SyncService: void startAlarm(android.content.Context)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList runSynchronizer(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList pull(com.matburt.mobileorg.OrgData.OrgFileParser)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getCount()> --> <com.actionbarsherlock.widget.ActivityChooserModel: int getActivityCount()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getActivityCount()> --> <com.actionbarsherlock.widget.ActivityChooserModel: int getActivityCount()>
<com.actionbarsherlock.widget.ShareActionProvider: void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu)> --> <com.actionbarsherlock.widget.ActivityChooserModel: int getActivityCount()>
<org.apache.http.message.BasicLineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.impl.DefaultHttpClientConnection: java.lang.String toString()> --> <org.apache.http.impl.DefaultHttpClientConnection: int getRemotePort()>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateHeaderElementLen(org.apache.http.HeaderElement)> --> <org.apache.http.HeaderElement: int getParameterCount()>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)> --> <org.apache.http.HeaderElement: int getParameterCount()>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateHeaderElementLen(org.apache.http.HeaderElement)> --> <org.apache.http.message.BasicHeaderValueFormatter: int estimateNameValuePairLen(org.apache.http.NameValuePair)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)> --> <org.apache.http.message.BasicHeaderValueFormatter: int estimateNameValuePairLen(org.apache.http.NameValuePair)>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateParametersLen(org.apache.http.NameValuePair[])> --> <org.apache.http.message.BasicHeaderValueFormatter: int estimateNameValuePairLen(org.apache.http.NameValuePair)>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestExec: boolean waitForReply()>
<org.apache.http.message.AbstractHttpMessage: void removeHeader(org.apache.http.Header)> --> <org.apache.http.message.HeaderGroup: void removeHeader(org.apache.http.Header)>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void setHost(java.lang.String)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.message.BodyFactory: java.nio.charset.Charset toJavaCharset(java.lang.String,boolean)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(org.apache.james.mime4j.storage.Storage,java.lang.String)> --> <org.apache.james.mime4j.message.BodyFactory: java.nio.charset.Charset toJavaCharset(java.lang.String,boolean)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.message.BodyFactory: java.nio.charset.Charset toJavaCharset(java.lang.String,boolean)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.lang.String getType()>
<com.google.gdata.util.common.base.PercentEscaper: void <init>(java.lang.String,boolean)> --> <com.google.gdata.util.common.base.UnicodeEscaper: void <init>()>
<org.apache.james.mime4j.util.StringArrayMap: void addValue(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.util.StringArrayMap: java.lang.String convertName(java.lang.String)>
<org.apache.james.mime4j.util.StringArrayMap: java.lang.String[] getValues(java.lang.String)> --> <org.apache.james.mime4j.util.StringArrayMap: java.lang.String convertName(java.lang.String)>
<org.apache.james.mime4j.util.StringArrayMap: java.util.Enumeration getValueEnum(java.lang.String)> --> <org.apache.james.mime4j.util.StringArrayMap: java.lang.String convertName(java.lang.String)>
<org.apache.james.mime4j.util.StringArrayMap: java.lang.String getValue(java.lang.String)> --> <org.apache.james.mime4j.util.StringArrayMap: java.lang.String convertName(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing: boolean isInt64()> --> <com.dropbox.client2.jsonextract.JsonThing: long expectInt64()>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestSubsystem: void write(com.jcraft.jsch.Packet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void start(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$1)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int measureHeightOfChildren(int,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: int getListPaddingTop()>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: com.matburt.mobileorg.util.SelectionBuilder getQuery(android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: java.lang.String getLikeSelection(java.util.ArrayList,java.lang.String)>
<org.apache.http.impl.io.HttpRequestParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.HttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void <init>(com.actionbarsherlock.internal.widget.IcsSpinner,android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void setAnchorView(android.view.View)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: android.view.View createSDcardFolderSelector()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.NullWizard: void createNullConfig()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxLogin()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuLogin()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: android.view.View createSSHConfig()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxList()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: android.view.View createWebDAVConfig()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void completeEncoding()> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void writePending()>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encode(byte)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void writePending()>
<com.dropbox.client2.DropboxAPI: java.util.List revisions(java.lang.String,int)> --> <org.json.simple.JSONArray: java.util.Iterator iterator()>
<com.dropbox.client2.DropboxAPI: java.util.List search(java.lang.String,java.lang.String,int,boolean)> --> <org.json.simple.JSONArray: java.util.Iterator iterator()>
<com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)> --> <org.json.simple.JSONArray: java.util.Iterator iterator()>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.MAC: int getBlockSize()>
<com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> --> <com.jcraft.jsch.MAC: int getBlockSize()>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> --> <com.jcraft.jsch.MAC: int getBlockSize()>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> --> <com.jcraft.jsch.MAC: int getBlockSize()>
<com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.MAC: int getBlockSize()>
<com.matburt.mobileorg.Gui.Wizard.WizardView$PageSwipeDetector: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void access$400(com.matburt.mobileorg.Gui.Wizard.WizardView)>
<com.matburt.mobileorg.Gui.Wizard.WizardView$PreviousPageButtonListener: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void access$400(com.matburt.mobileorg.Gui.Wizard.WizardView)>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: boolean dispatchMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean dispatchMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean dispatchMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void onConfigurationChanged(android.content.res.Configuration)>
<com.dropbox.client2.jsonextract.JsonMap: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonBase: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonList: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonBase: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonBase: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit createParentNewheading(android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void <init>()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getBeginLine()>
<com.dropbox.client2.jsonextract.JsonMap$WrappedEntry: java.lang.Object setValue(java.lang.Object)> --> <com.dropbox.client2.jsonextract.JsonMap$WrappedEntry: com.dropbox.client2.jsonextract.JsonThing setValue(com.dropbox.client2.jsonextract.JsonThing)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getPaddingLeft()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getPaddingLeft()>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: void setVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: void clearAnimation()>
<org.apache.james.mime4j.storage.CipherStorageProvider: void <init>(org.apache.james.mime4j.storage.StorageProvider)> --> <org.apache.james.mime4j.storage.CipherStorageProvider: void <init>(org.apache.james.mime4j.storage.StorageProvider,java.lang.String)>
<org.apache.james.mime4j.message.StorageTextBody: java.lang.String getMimeCharset()> --> <org.apache.james.mime4j.util.CharsetUtil: java.lang.String toMimeCharset(java.lang.String)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)> --> <org.apache.james.mime4j.util.CharsetUtil: java.lang.String toMimeCharset(java.lang.String)>
<org.apache.james.mime4j.message.StringTextBody: java.lang.String getMimeCharset()> --> <org.apache.james.mime4j.util.CharsetUtil: java.lang.String toMimeCharset(java.lang.String)>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.AddressList getAddressList(java.lang.String)> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.parser.Field obtainField(java.lang.String)>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.Mailbox getMailbox(java.lang.String)> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.parser.Field obtainField(java.lang.String)>
<org.apache.james.mime4j.message.Message: java.util.Date getDate()> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.parser.Field obtainField(java.lang.String)>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.MailboxList getMailboxList(java.lang.String)> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.parser.Field obtainField(java.lang.String)>
<org.apache.james.mime4j.message.Message: java.lang.String getMessageId()> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.parser.Field obtainField(java.lang.String)>
<org.apache.james.mime4j.message.Message: java.lang.String getSubject()> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.parser.Field obtainField(java.lang.String)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.message.LineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void run()>
<org.apache.james.mime4j.parser.AbstractEntity: boolean parseField()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: int getMaxHeaderCount()>
<org.apache.james.mime4j.message.Multipart: void dispose()> --> <org.apache.james.mime4j.message.BodyPart: void dispose()>
<com.dropbox.client2.DropboxAPI$BasicUploadRequest: com.dropbox.client2.DropboxAPI$Entry upload()> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI: java.util.List search(java.lang.String,java.lang.String,int,boolean)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry addFromCopyRef(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry createFolder(java.lang.String)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry restore(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI$Entry$1: com.dropbox.client2.DropboxAPI$Entry extract(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry move(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI: java.util.List revisions(java.lang.String,int)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: com.dropbox.client2.DropboxAPI$Entry parseXDropboxMetadata(org.apache.http.HttpResponse)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry metadata(java.lang.String,int,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry copy(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry commitChunkedUpload(java.lang.String,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry$1: void <init>(com.matburt.mobileorg.Gui.Capture.LocationEntry)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry$1: void <init>(com.matburt.mobileorg.Gui.Capture.LocationEntry)>
<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Packet: com.jcraft.jsch.Buffer getBuffer()>
<org.apache.james.mime4j.message.StorageTextBody: org.apache.james.mime4j.message.StorageTextBody copy()> --> <org.apache.james.mime4j.message.StorageTextBody: void <init>(org.apache.james.mime4j.storage.MultiReferenceStorage,java.nio.charset.Charset)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(java.io.InputStream)> --> <org.apache.james.mime4j.message.StorageTextBody: void <init>(org.apache.james.mime4j.storage.MultiReferenceStorage,java.nio.charset.Charset)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(org.apache.james.mime4j.storage.Storage)> --> <org.apache.james.mime4j.message.StorageTextBody: void <init>(org.apache.james.mime4j.storage.MultiReferenceStorage,java.nio.charset.Charset)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(org.apache.james.mime4j.storage.Storage,java.lang.String)> --> <org.apache.james.mime4j.message.StorageTextBody: void <init>(org.apache.james.mime4j.storage.MultiReferenceStorage,java.nio.charset.Charset)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.message.StorageTextBody: void <init>(org.apache.james.mime4j.storage.MultiReferenceStorage,java.nio.charset.Charset)>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: float getFloatValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: java.lang.Object getValue()>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: java.lang.String toString()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: java.lang.Object getValue()>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: int getIntValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: java.lang.Object getValue()>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: java.lang.Object getValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: java.lang.Object getValue()>
<com.matburt.mobileorg.Gui.Theme.DefaultTheme: com.matburt.mobileorg.Gui.Theme.DefaultTheme getTheme(android.content.Context)> --> <com.matburt.mobileorg.util.PreferenceUtils: java.lang.String getThemeName()>
<com.matburt.mobileorg.util.OrgUtils: void setTheme(android.app.Activity)> --> <com.matburt.mobileorg.util.PreferenceUtils: java.lang.String getThemeName()>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encode(byte)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void clearPending()>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void writePending()> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void clearPending()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: com.actionbarsherlock.view.ActionMode access$000(com.matburt.mobileorg.Gui.Outline.OutlineListView)>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponseFactory createHttpResponseFactory()> --> <org.apache.http.impl.DefaultHttpResponseFactory: void <init>()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void selectionChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void fireOnSelected()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void access$200(com.actionbarsherlock.internal.widget.IcsAdapterView)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void fireOnSelected()>
<com.dropbox.client2.android.AuthActivity: void onResume()> --> <com.dropbox.client2.android.AuthActivity: boolean hasDropboxApp(android.content.Intent)>
<com.actionbarsherlock.app.SherlockListActivity: void supportInvalidateOptionsMenu()> --> <com.actionbarsherlock.app.SherlockListActivity: void invalidateOptionsMenu()>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setCustomView(android.view.View)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void updateTab(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setText(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void updateTab(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setContentDescription(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void updateTab(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void updateTab(int)>
<org.apache.james.mime4j.field.ContentDispositionField: void parse()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <init>(java.io.Reader)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void cleanupTabs()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeAllTabs()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator setDuration(long)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator setDuration(long)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator setDuration(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator setDuration(long)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator setDuration(long)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.Animator setDuration(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator setDuration(long)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator setDuration(long)>
<com.actionbarsherlock.widget.ActivityChooserModel: void <init>(android.content.Context,java.lang.String)> --> <com.actionbarsherlock.widget.ActivityChooserModel$DefaultSorter: void <init>(com.actionbarsherlock.widget.ActivityChooserModel,com.actionbarsherlock.widget.ActivityChooserModel$1)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getLocationEntry(com.matburt.mobileorg.OrgData.OrgNode,java.util.ArrayList,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: void init(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.Gui.Capture.LocationFragment,java.util.ArrayList,java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void route()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void name_addr()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void phrase()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void local_part()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jjtreeOpenNodeScope(org.apache.james.mime4j.field.address.parser.Node)>
<org.json.simple.parser.JSONParser: void reset(java.io.Reader)> --> <org.json.simple.parser.JSONParser: void reset()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder after(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofFloat(float[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofFloat(float[])>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void <clinit>()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void jj_la1_0()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onPostResume()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPostResume()>
<com.actionbarsherlock.app.SherlockActivity: void onPostResume()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPostResume()>
<com.actionbarsherlock.app.SherlockListActivity: void onPostResume()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPostResume()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onPostResume()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPostResume()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onPostResume()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPostResume()>
<com.dropbox.client2.jsonextract.JsonList: java.lang.String pathConcatIndex(java.lang.String,int)> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.String pathConcat(java.lang.String,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonMap: java.lang.String pathConcatField(java.lang.String,java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.String pathConcat(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView$SavedState$1: java.lang.Object[] newArray(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$SavedState$1: com.actionbarsherlock.internal.widget.ActionBarView$SavedState[] newArray(int)>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: void <init>()> --> <org.apache.http.impl.DefaultConnectionReuseStrategy: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void <init>(android.content.Context)>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: long getContentLength()> --> <com.dropbox.client2.DropboxAPI$DropboxFileInfo: long getFileSize()>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void copyStreamToOutput(java.io.OutputStream,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$DropboxFileInfo: long getFileSize()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void access$000(com.matburt.mobileorg.Gui.Agenda.AgendaSettings)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void createAgendaBlockEntry()>
<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)> --> <com.jcraft.jsch.Buffer: int getLength()>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getLength()>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: int getLength()>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getLength()>
<com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getLength()>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Buffer: int getLength()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: int getLength()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getLength()>
<org.apache.james.mime4j.message.MessageWriter: void writeBytes(org.apache.james.mime4j.util.ByteSequence,java.io.OutputStream)> --> <org.apache.james.mime4j.util.ByteSequence: byte[] toByteArray()>
<org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.james.mime4j.util.ByteSequence,java.io.OutputStream)> --> <org.apache.james.mime4j.util.ByteSequence: byte[] toByteArray()>
<org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,org.apache.james.mime4j.util.ByteSequence,int,int)> --> <org.apache.james.mime4j.util.ByteSequence: byte[] toByteArray()>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendSYMLINK(byte[],byte[])>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void setPayload(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment$OnPayloadModifiedListener: void onPayloadModified()>
<org.apache.james.mime4j.storage.MemoryStorageProvider$MemoryStorageOutputStream: void <init>(org.apache.james.mime4j.storage.MemoryStorageProvider$1)> --> <org.apache.james.mime4j.storage.MemoryStorageProvider$MemoryStorageOutputStream: void <init>()>
<com.matburt.mobileorg.Gui.ViewFragment: void displayPayload(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.Gui.ViewFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.ViewFragment: void display(com.matburt.mobileorg.OrgData.OrgNode,int,android.content.ContentResolver)> --> <com.matburt.mobileorg.Gui.ViewFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.ViewFragment: void display(java.lang.String)> --> <com.matburt.mobileorg.Gui.ViewFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.ViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.ViewFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.ViewFragment: void handleInternalOrgUrl(java.lang.String)> --> <com.matburt.mobileorg.Gui.ViewFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.ViewFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.ViewFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.ViewFragment: void displayError()> --> <com.matburt.mobileorg.Gui.ViewFragment: android.support.v4.app.FragmentActivity getActivity()>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])> --> <org.apache.james.mime4j.codec.EncoderUtil: int qEncodedLength(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>
<org.apache.http.message.BasicHttpEntityEnclosingRequest: void <init>(java.lang.String,java.lang.String)> --> <org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String)> --> <org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String)>
<com.google.gdata.util.common.base.PercentEscaper: java.lang.String escape(java.lang.String)> --> <com.google.gdata.util.common.base.PercentEscaper: java.lang.String escapeSlow(java.lang.String,int)>
<org.apache.james.mime4j.io.LimitedInputStream: int read()> --> <org.apache.james.mime4j.io.LimitedInputStream: void enforceLimit()>
<org.apache.james.mime4j.io.LimitedInputStream: long skip(long)> --> <org.apache.james.mime4j.io.LimitedInputStream: void enforceLimit()>
<org.apache.james.mime4j.io.LimitedInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.LimitedInputStream: void enforceLimit()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void collapseCurrent()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: boolean getExpanded(int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setMeasuredDimension(int,int)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putUrl(java.lang.String,java.lang.String)> --> <org.apache.http.entity.StringEntity: void <init>(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <org.apache.http.entity.StringEntity: void <init>(java.lang.String)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader$1: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader$1: void run()>
<org.json.simple.parser.Yylex: org.json.simple.parser.Yytoken yylex()> --> <org.json.simple.parser.Yylex: void yybegin(int)>
<org.apache.james.mime4j.message.MessageBuilder: void startMultipart(org.apache.james.mime4j.descriptor.BodyDescriptor)> --> <org.apache.james.mime4j.descriptor.BodyDescriptor: java.lang.String getSubType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DeltaPage delta(java.lang.String)> --> <com.dropbox.client2.DropboxAPI$DeltaPage: com.dropbox.client2.DropboxAPI$DeltaPage extractFromJson(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)>
<com.matburt.mobileorg.Gui.ViewActivity: void onStart()> --> <com.matburt.mobileorg.Gui.ViewFragment: void displayError()>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)>
<org.apache.james.mime4j.io.LimitedInputStream: void <init>(java.io.InputStream,long)> --> <org.apache.james.mime4j.io.PositionInputStream: void <init>(java.io.InputStream)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void refresh()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void handleDropboxResume()>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer$1: java.lang.Byte next()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer$1: boolean hasNext()>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: com.actionbarsherlock.view.SubMenu addSubMenuItem()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void <init>(com.actionbarsherlock.internal.widget.ActionBarView,com.actionbarsherlock.internal.widget.ActionBarView$1)>
<org.apache.http.entity.StringEntity: void <init>(java.lang.String,java.lang.String)> --> <org.apache.http.entity.StringEntity: void setContentType(java.lang.String)>
<com.actionbarsherlock.app.SherlockDialogFragment: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockDialogFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: android.view.View createSSHConfig()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void loadSettings()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard$1: void onClick(android.view.View)> --> <com.dropbox.client2.android.AndroidAuthSession: void unlink()>
<com.matburt.mobileorg.Services.MobileOrgStartupIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> --> <com.matburt.mobileorg.Services.MobileOrgStartupIntentReceiver: boolean shouldStartService(android.content.Context)>
<org.apache.james.mime4j.message.MessageWriter: void writeMultipart(org.apache.james.mime4j.message.Multipart,java.io.OutputStream)> --> <org.apache.james.mime4j.message.Multipart: java.util.List getBodyParts()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setSubtitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setSubtitle(java.lang.CharSequence)>
<com.jcraft.jsch.IdentityFile: boolean equals(java.lang.Object)> --> <com.jcraft.jsch.IdentityFile: java.lang.String getName()>
<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(java.lang.String)> --> <org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(org.apache.http.Header)>
<org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWord(java.lang.String,int,int)> --> <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeB(java.lang.String,java.lang.String)>
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor)> --> <org.apache.http.protocol.BasicHttpProcessor: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)>
<com.jcraft.jsch.Channel$1: void flush()> --> <com.jcraft.jsch.Channel$1: void close()>
<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: java.lang.String getUserName()>
<com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <org.apache.http.client.methods.HttpPost: void setEntity(org.apache.http.HttpEntity)>
<org.apache.james.mime4j.parser.MimeTokenStream: java.io.Reader getReader()> --> <org.apache.james.mime4j.descriptor.BodyDescriptor: java.lang.String getCharset()>
<org.apache.james.mime4j.message.MessageBuilder: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.descriptor.BodyDescriptor: java.lang.String getCharset()>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.graphics.Rect access$000(com.actionbarsherlock.internal.widget.IcsSpinner)>
<org.apache.james.mime4j.parser.MimeEntity: void <init>(org.apache.james.mime4j.io.LineNumberSource,org.apache.james.mime4j.io.BufferedLineReaderInputStream,org.apache.james.mime4j.descriptor.BodyDescriptor,int,int,org.apache.james.mime4j.parser.MimeEntityConfig)> --> <org.apache.james.mime4j.parser.AbstractEntity: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor,int,int,org.apache.james.mime4j.parser.MimeEntityConfig)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollRight()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void hideKeyboard()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollLeft()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void hideKeyboard()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void refreshDisplay()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void refreshTitle()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onResume()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void refreshTitle()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.ParseException generateParseException()> --> <org.apache.james.mime4j.field.contenttype.parser.ParseException: void <init>(org.apache.james.mime4j.field.contenttype.parser.Token,int[][],java.lang.String[])>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)>
<com.dropbox.client2.jsonextract.JsonMap$WrapperIterator: java.lang.Object next()> --> <com.dropbox.client2.jsonextract.JsonMap$WrapperIterator: java.util.Map$Entry next()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void init(com.matburt.mobileorg.Gui.Capture.DatesFragment,android.widget.TableLayout,com.matburt.mobileorg.OrgData.OrgNodeTimeDate)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void refreshDates()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void notifyListenerOfChange()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void refreshDates()>
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String)> --> <org.apache.http.message.BasicHttpEntityEnclosingRequest: void <init>(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void eof()>
<com.twofortyfouram.locale.MarketActivity: void onCreate(android.os.Bundle)> --> <com.twofortyfouram.locale.MarketActivity: void showDialog(int)>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.james.mime4j.message.Message: void setHeader(org.apache.james.mime4j.message.Header)>
<com.actionbarsherlock.internal.widget.ActionBarView$1: void onItemSelected(com.actionbarsherlock.internal.widget.IcsAdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.app.ActionBar$OnNavigationListener: boolean onNavigationItemSelected(int,long)>
<com.actionbarsherlock.internal.app.ActionBarWrapper: boolean onNavigationItemSelected(int,long)> --> <com.actionbarsherlock.app.ActionBar$OnNavigationListener: boolean onNavigationItemSelected(int,long)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: int measureHeightOfChildren(int,int,int,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_0(int,int)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: void setVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: void setAnimation(android.view.animation.Animation)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$4: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: android.app.TimePickerDialog$OnTimeSetListener access$400(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setHasEmbeddedTabs(boolean)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void init(android.view.View)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setHasEmbeddedTabs(boolean)>
<org.apache.james.mime4j.field.ContentTypeField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.AbstractField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.field.MailboxField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.AbstractField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.field.AddressListField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.AbstractField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.field.DateTimeField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.AbstractField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.field.MailboxListField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.AbstractField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.field.UnstructuredField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.AbstractField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.field.ContentDispositionField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.AbstractField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.field.ContentTransferEncodingField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.AbstractField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.parser.MimeTokenStream createMaximalDescriptorStream()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: void <init>()>
<org.apache.james.mime4j.parser.MimeEntity: void <init>(org.apache.james.mime4j.io.LineNumberSource,org.apache.james.mime4j.io.BufferedLineReaderInputStream,org.apache.james.mime4j.descriptor.BodyDescriptor,int,int)> --> <org.apache.james.mime4j.parser.MimeEntityConfig: void <init>()>
<org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.parser.MimeTokenStream createStrictValidationStream()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: void <init>()>
<org.apache.james.mime4j.parser.MimeStreamParser: void <init>(org.apache.james.mime4j.parser.MimeEntityConfig)> --> <org.apache.james.mime4j.parser.MimeEntityConfig: void <init>()>
<org.apache.james.mime4j.parser.MimeTokenStream: void <init>()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: void <init>()>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.Header getFirstHeader(java.lang.String)>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.TokenIterator: boolean hasNext()>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.TokenIterator: boolean hasNext()>
<org.apache.http.impl.AbstractHttpServerConnection: void <init>()> --> <org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseLocation(java.lang.String)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void <init>(java.io.Reader)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int findItemIndex(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void setFeatureInt(int,int)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateInt(int,int,boolean)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawVerticalDivider(android.graphics.Canvas,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getHeight()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersVertical(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getHeight()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_13()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_scan_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_12()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_scan_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_9()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_scan_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_10()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_scan_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_11()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_scan_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_8()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_scan_token(int)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.util.MimeUtil: boolean isMessage(java.lang.String)>
<com.matburt.mobileorg.Gui.Theme.DefaultTheme: com.matburt.mobileorg.Gui.Theme.DefaultTheme getTheme(android.content.Context)> --> <com.matburt.mobileorg.Gui.Theme.WhiteTheme: void <init>()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getThumbnailStream(java.lang.String,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat)> --> <com.dropbox.client2.DropboxAPI$ThumbFormat: java.lang.String toString()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void parseMailbox0()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void route()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void parseAddressList0()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void phrase()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void parseAddress0()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void parseLine()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void local_part()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void endBodyPart()>
<com.matburt.mobileorg.Gui.SynchronizerNotification: void updateNotification(int)> --> <com.matburt.mobileorg.Gui.SynchronizerNotification: void updateNotification(int,java.lang.String)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void initActionBar()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void <init>(android.app.Activity,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.ParseException: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.ParseException: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()> --> <org.apache.james.mime4j.field.address.parser.ParseException: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void phrase()> --> <org.apache.james.mime4j.field.address.parser.ParseException: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void local_part()> --> <org.apache.james.mime4j.field.address.parser.ParseException: void <init>()>
<org.apache.http.impl.AbstractHttpClientConnection: void <init>()> --> <org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void onFinishInflate()> --> <com.actionbarsherlock.internal.widget.CapitalizingButton: void setOnClickListener(android.view.View$OnClickListener)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.view.CollapsibleActionView: void onActionViewCollapsed()>
<org.apache.james.mime4j.field.datetime.DateTime: void <init>(java.lang.String,int,int,int,int,int,int)> --> <org.apache.james.mime4j.field.datetime.DateTime: java.util.Date convertToDate(int,int,int,int,int,int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicLineParser: org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState: android.os.Parcelable getSuperState()>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.ChannelX11: void run()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: long access$1000()>
<org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader,org.json.simple.parser.ContainerFactory)> --> <org.json.simple.parser.JSONParser: void reset(java.io.Reader)>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.JSONParser: void reset(java.io.Reader)>
<com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context)> --> <com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[])> --> <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])>
<com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[],byte[],byte[])> --> <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])>
<com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String,byte[])> --> <com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])>
<com.matburt.mobileorg.Services.CalendarSyncService$1: void start()> --> <com.matburt.mobileorg.Services.CalendarWrapper: void deleteFileEntries(java.lang.String[])>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void onDraw(android.graphics.Canvas)>
<org.apache.james.mime4j.field.datetime.DateTime: void print()> --> <org.apache.james.mime4j.field.datetime.DateTime: java.lang.String toString()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$4: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: com.matburt.mobileorg.Gui.Capture.DatesFragment access$100(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$3: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: com.matburt.mobileorg.Gui.Capture.DatesFragment access$100(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: com.matburt.mobileorg.Gui.Capture.DatesFragment access$100(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<org.apache.http.entity.mime.FormBodyPart: void generateContentDisp(org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.http.entity.mime.content.ContentBody: java.lang.String getFilename()>
<com.jcraft.jsch.JSch: void addIdentity(java.lang.String)> --> <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[])>
<com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[])>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: void browseTo(java.lang.String)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: java.lang.String getParentPath(java.lang.String)>
<org.apache.james.mime4j.field.datetime.DateTime: java.lang.String toString()> --> <org.apache.james.mime4j.field.datetime.DateTime: int getMinute()>
<org.json.simple.parser.JSONParser: void parse(java.lang.String,org.json.simple.parser.ContentHandler)> --> <org.json.simple.parser.JSONParser: void parse(java.lang.String,org.json.simple.parser.ContentHandler,boolean)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void requestLayout()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setSelection(int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void requestLayout()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setAdapter(android.widget.SpinnerAdapter)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void requestLayout()>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setActionProvider(com.actionbarsherlock.view.ActionProvider)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: void <init>(android.content.Context)>
<com.dropbox.client2.jsonextract.JsonThing: boolean isFloat64()> --> <com.dropbox.client2.jsonextract.JsonThing: double expectFloat64()>
<com.matburt.mobileorg.Plugin.SyncEditActivity: void finish()> --> <com.matburt.mobileorg.Plugin.SyncEditActivity: android.content.res.Resources getResources()>
<org.apache.http.impl.entity.EntitySerializer: java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.impl.io.IdentityOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: void setParams(org.apache.http.params.HttpParams)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void <init>()> --> <com.actionbarsherlock.app.SherlockFragment: void <init>()>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void <init>()> --> <com.actionbarsherlock.app.SherlockFragment: void <init>()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void <init>()> --> <com.actionbarsherlock.app.SherlockFragment: void <init>()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void <init>()> --> <com.actionbarsherlock.app.SherlockFragment: void <init>()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void <init>()> --> <com.actionbarsherlock.app.SherlockFragment: void <init>()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void <init>()> --> <com.actionbarsherlock.app.SherlockFragment: void <init>()>
<com.matburt.mobileorg.Gui.ViewFragment: void <init>()> --> <com.actionbarsherlock.app.SherlockFragment: void <init>()>
<org.apache.http.entity.mime.HttpMultipart: void <init>(java.lang.String)> --> <org.apache.james.mime4j.message.Multipart: void <init>(java.lang.String)>
<org.apache.james.mime4j.message.MessageBuilder: void startMultipart(org.apache.james.mime4j.descriptor.BodyDescriptor)> --> <org.apache.james.mime4j.message.Multipart: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void <init>(com.actionbarsherlock.internal.widget.IcsSpinner,android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<com.matburt.mobileorg.Gui.FileDecryptionActivity: void onActivityResult(int,int,android.content.Intent)> --> <com.matburt.mobileorg.Gui.FileDecryptionActivity: android.content.ContentResolver getContentResolver()>
<org.apache.james.mime4j.message.Message: void setMailboxList(java.lang.String,org.apache.james.mime4j.field.address.Mailbox[])> --> <org.apache.james.mime4j.message.Message: void setMailboxList(java.lang.String,java.util.Collection)>
<org.apache.james.mime4j.message.Message: void setFrom(java.util.Collection)> --> <org.apache.james.mime4j.message.Message: void setMailboxList(java.lang.String,java.util.Collection)>
<org.apache.james.mime4j.message.Message: void setMailboxList(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.message.Message: void setMailboxList(java.lang.String,java.util.Collection)>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()> --> <org.apache.james.mime4j.storage.MemoryStorageProvider$MemoryStorage: void <init>(byte[],int)>
<org.apache.james.mime4j.storage.MemoryStorageProvider$MemoryStorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()> --> <org.apache.james.mime4j.storage.MemoryStorageProvider$MemoryStorage: void <init>(byte[],int)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView$PageSwipeDetector: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,com.matburt.mobileorg.Gui.Wizard.WizardView$1)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: void setupFirstPage()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: android.view.View createSDcardFolderSelector()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getSuggestedMinimumHeight()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void access$900(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void endAnimation()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void end()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void endAnimation()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void cancel()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void endAnimation()>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> --> <com.jcraft.jsch.MAC: void init(byte[])>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.MAC: void init(byte[])>
<com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> --> <com.jcraft.jsch.MAC: void init(byte[])>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp$2: void close()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxList()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void <init>(android.content.Context,com.dropbox.client2.DropboxAPI)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedNodeId(int)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: com.matburt.mobileorg.OrgData.OrgNode getOrgNode()>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void backup(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void backup(int)>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: void <init>(java.lang.String,int)>
<org.apache.http.impl.DefaultHttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ReasonPhraseCatalog: java.lang.String getReason(int,java.util.Locale)>
<org.apache.http.message.BasicHttpResponse: java.lang.String getReason(int)> --> <org.apache.http.ReasonPhraseCatalog: java.lang.String getReason(int,java.util.Locale)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersHorizontal(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawVerticalDivider(android.graphics.Canvas,int)>
<org.apache.http.impl.io.ChunkedInputStream: int read()> --> <org.apache.http.impl.io.ChunkedInputStream: void nextChunk()>
<org.apache.http.impl.io.ChunkedInputStream: int read(byte[],int,int)> --> <org.apache.http.impl.io.ChunkedInputStream: void nextChunk()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setup(com.matburt.mobileorg.OrgData.OrgNode,boolean,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.content.ContentResolver)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void setupAgendaBlock(android.text.SpannableStringBuilder,com.matburt.mobileorg.Gui.Theme.DefaultTheme)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void setHorizontalOffset(int)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void setHorizontalOffset(int)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.MenuView$ItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void bindItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,com.actionbarsherlock.internal.view.menu.MenuView$ItemView)> --> <com.actionbarsherlock.internal.view.menu.MenuView$ItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void setupFirstPage()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: android.view.View createSSHConfig()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: org.apache.james.mime4j.field.mimeversion.parser.Token getToken(int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: org.apache.james.mime4j.field.mimeversion.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: int jj_ntk()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_2(int,int)>
<com.matburt.mobileorg.OrgData.OrgNode: void write(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: long addNode(android.content.ContentResolver)>
<com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()> --> <com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void <init>(android.content.Context)>
<com.matburt.mobileorg.Gui.SynchronizerNotification: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void <init>(android.content.Context)>
<org.apache.http.entity.mime.MultipartEntity: void writeTo(java.io.OutputStream)> --> <org.apache.http.entity.mime.HttpMultipart: void writeTo(java.io.OutputStream)>
<org.apache.james.mime4j.storage.StorageOutputStream: void write(int)> --> <org.apache.james.mime4j.storage.StorageOutputStream: void write0(byte[],int,int)>
<org.apache.james.mime4j.storage.StorageOutputStream: void write(byte[])> --> <org.apache.james.mime4j.storage.StorageOutputStream: void write0(byte[],int,int)>
<org.apache.james.mime4j.storage.StorageOutputStream: void write(byte[],int,int)> --> <org.apache.james.mime4j.storage.StorageOutputStream: void write0(byte[],int,int)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void <init>(com.actionbarsherlock.widget.ActivityChooserView,com.actionbarsherlock.widget.ActivityChooserView$1)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void <init>(com.actionbarsherlock.widget.ActivityChooserView)>
<com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)> --> <com.jcraft.jsch.HostKey: boolean isIncluded(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener: void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void cancel()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void cancel()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<org.json.simple.ItemList: void <init>(java.lang.String)> --> <org.json.simple.ItemList: void split(java.lang.String,java.lang.String,java.util.List)>
<org.json.simple.ItemList: void <init>(java.lang.String,java.lang.String)> --> <org.json.simple.ItemList: void split(java.lang.String,java.lang.String,java.util.List)>
<org.json.simple.ItemList: void addAll(java.lang.String)> --> <org.json.simple.ItemList: void split(java.lang.String,java.lang.String,java.util.List)>
<org.json.simple.ItemList: void addAll(java.lang.String,java.lang.String)> --> <org.json.simple.ItemList: void split(java.lang.String,java.lang.String,java.util.List)>
<org.json.simple.ItemList: void split(java.lang.String,java.lang.String,java.util.List,boolean)> --> <org.json.simple.ItemList: void split(java.lang.String,java.lang.String,java.util.List)>
<com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> --> <com.jcraft.jsch.ServerSocketFactory: java.net.ServerSocket createServerSocket(int,int,java.net.InetAddress)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onCheckedChanged(android.widget.RadioGroup,int)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.NullWizard: void createNullConfig()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void handleDropboxResume()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: android.view.View createSSHConfig()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxList()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void loginUbuntuOne()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)>
<com.matburt.mobileorg.Gui.Wizard.WizardView$1: void start()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: android.view.View createWebDAVConfig()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)>
<com.jcraft.jsch.Channel: void connect()> --> <com.jcraft.jsch.Channel: void connect(int)>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenRSA: byte[] getC()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: void skipBoundary()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read()> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: void skipBoundary()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: void skipBoundary()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void setEnabled(boolean)>
<com.actionbarsherlock.app.SherlockActivity: void onStop()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchStop()>
<com.actionbarsherlock.app.SherlockListActivity: void onStop()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchStop()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onStop()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchStop()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onStop()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchStop()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onStop()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchStop()>
<com.actionbarsherlock.app.SherlockFragment: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemWrapper: void <init>(android.view.MenuItem)>
<com.actionbarsherlock.app.SherlockListFragment: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemWrapper: void <init>(android.view.MenuItem)>
<com.actionbarsherlock.app.SherlockDialogFragment: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemWrapper: void <init>(android.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.SubMenuWrapper: com.actionbarsherlock.view.MenuItem getItem()> --> <com.actionbarsherlock.internal.view.menu.MenuItemWrapper: void <init>(android.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.MenuItem addInternal(android.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemWrapper: void <init>(android.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])> --> <com.actionbarsherlock.internal.view.menu.MenuItemWrapper: void <init>(android.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setEnabled(boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void showUpgradePopup()> --> <com.matburt.mobileorg.util.OrgUtils: java.lang.String getStringFromResource(int,android.content.Context)>
<org.apache.james.mime4j.message.Message: void setSubject(java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.UnstructuredField subject(java.lang.String)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.Channel$PassiveInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: int getEndLine()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: int getEndLine()>
<com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonList expectList()> --> <com.dropbox.client2.jsonextract.JsonList: void <init>(java.util.List,java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader,android.content.Context)> --> <com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void clearAll()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void clear()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void clear()>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.message.StringTextBody: void <init>(java.lang.String,java.nio.charset.Charset)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(java.lang.String)> --> <org.apache.james.mime4j.message.StringTextBody: void <init>(java.lang.String,java.nio.charset.Charset)>
<org.apache.james.mime4j.message.StringTextBody: org.apache.james.mime4j.message.StringTextBody copy()> --> <org.apache.james.mime4j.message.StringTextBody: void <init>(java.lang.String,java.nio.charset.Charset)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void setTransitioning(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setDescendantFocusability(int)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void updateEmptyStatus(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void setVisibility(int)>
<com.google.gdata.util.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])> --> <com.google.gdata.util.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.google.gdata.util.common.base.Preconditions: void checkPositionIndexes(int,int,int)> --> <com.google.gdata.util.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.google.gdata.util.common.base.Preconditions: void checkPositionIndex(int,int,java.lang.String)> --> <com.google.gdata.util.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.google.gdata.util.common.base.Preconditions: java.lang.Iterable checkContentsNotNull(java.lang.Iterable,java.lang.String,java.lang.Object[])> --> <com.google.gdata.util.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.google.gdata.util.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])> --> <com.google.gdata.util.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.google.gdata.util.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])> --> <com.google.gdata.util.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>
<com.google.gdata.util.common.base.Preconditions: void checkElementIndex(int,int,java.lang.String)> --> <com.google.gdata.util.common.base.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: int jj_ntk()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: int jj_ntk()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void route()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: int jj_ntk()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: int jj_ntk()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: int jj_ntk()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: int jj_ntk()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void phrase()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: int jj_ntk()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: int jj_ntk()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void parseLine()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: int jj_ntk()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void local_part()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: int jj_ntk()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void setupStartValues()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void setupStartValues()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void finish()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void animateToMode(boolean)>
<com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void animateToMode(boolean)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$1)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void <init>()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAngleAddr(org.apache.james.mime4j.field.address.parser.ASTangle_addr)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.DomainList buildRoute(org.apache.james.mime4j.field.address.parser.ASTroute)>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getOlpId(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgFile getOrgFile(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runRecover()> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgFile getOrgFile(android.content.ContentResolver)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void setRecipient(int)>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.Session$GlobalRequestReply: int getReply()>
<com.matburt.mobileorg.Gui.TabsAdapter: android.support.v4.app.Fragment getItem(int)> --> <com.matburt.mobileorg.Gui.TabsAdapter$TabInfo: android.os.Bundle access$100(com.matburt.mobileorg.Gui.TabsAdapter$TabInfo)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <org.apache.http.entity.InputStreamEntity: void <init>(java.io.InputStream,long)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploadRequest chunkedUploadRequest(java.io.InputStream,long,com.dropbox.client2.ProgressListener,long,java.lang.String)> --> <org.apache.http.entity.InputStreamEntity: void <init>(java.io.InputStream,long)>
<org.apache.james.mime4j.field.address.Group: java.lang.String getEncodedString()> --> <org.apache.james.mime4j.field.address.MailboxList: java.util.Iterator iterator()>
<org.apache.james.mime4j.field.address.Group: void doAddMailboxesTo(java.util.List)> --> <org.apache.james.mime4j.field.address.MailboxList: java.util.Iterator iterator()>
<org.apache.james.mime4j.field.address.Group: java.lang.String getDisplayString(boolean)> --> <org.apache.james.mime4j.field.address.MailboxList: java.util.Iterator iterator()>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void expand(int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void insertAll(java.util.ArrayList,int)>
<com.matburt.mobileorg.Gui.SearchActivity: void doSearch(java.lang.String)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void insertAll(java.util.ArrayList,int)>
<com.jcraft.jsch.jgss.GSSContextKrb5: byte[] getMIC(byte[],int,int)> --> <org.ietf.jgss.GSSContext: byte[] getMIC(byte[],int,int,org.ietf.jgss.MessageProp)>
<com.matburt.mobileorg.Services.CalendarSyncService: void tryToInsertNode(com.matburt.mobileorg.util.MultiMap,com.matburt.mobileorg.OrgData.OrgNodeDate,java.lang.String,com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.Services.CalendarWrapper: java.lang.String insertEntry(com.matburt.mobileorg.OrgData.OrgNodeDate,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void start(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: long getCurrentPlayTime()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView access$600(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void start()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView access$600(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void run()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView access$600(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<org.apache.http.entity.mime.FormBodyPart: void <init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.http.entity.mime.FormBodyPart: void generateContentType(org.apache.james.mime4j.descriptor.ContentDescriptor)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void invalidateDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getScrollY()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)>
<com.dropbox.client2.session.AbstractSession$4: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>
<org.apache.http.util.EntityUtils: java.lang.String getContentCharSet(org.apache.http.HttpEntity)> --> <org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>
<org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: java.lang.String GetImage()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: java.lang.String GetImage()>
<com.actionbarsherlock.widget.ActivityChooserModel: void setDefaultActivity(int)> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord: void <init>(android.content.ComponentName,long,float)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord: void <init>(java.lang.String,long,float)> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord: void <init>(android.content.ComponentName,long,float)>
<com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord: void <init>(android.content.ComponentName,long,float)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)>
<org.apache.http.protocol.DefaultedHttpContext: java.lang.Object removeAttribute(java.lang.String)> --> <org.apache.http.protocol.HttpContext: java.lang.Object removeAttribute(java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setTitle(java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setTitle(java.lang.CharSequence)>
<com.jcraft.jsch.KeyPair: int writeSEQUENCE(byte[],int,int)> --> <com.jcraft.jsch.KeyPair: int writeLength(byte[],int,int)>
<com.jcraft.jsch.KeyPair: int writeINTEGER(byte[],int,byte[])> --> <com.jcraft.jsch.KeyPair: int writeLength(byte[],int,int)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onPause()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPause()>
<com.actionbarsherlock.app.SherlockListActivity: void onPause()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPause()>
<com.actionbarsherlock.app.SherlockActivity: void onPause()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPause()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onPause()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPause()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onPause()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPause()>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.app.SherlockActivity: boolean onMenuItemSelected(int,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: boolean onHoverEvent(android.view.MotionEvent)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: boolean onHoverEvent(android.view.MotionEvent)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseContentDescription(java.lang.String)>
<oauth.signpost.AbstractOAuthConsumer: void collectBodyParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.OAuth: oauth.signpost.http.HttpParameters decodeForm(java.io.InputStream)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.OAuth: oauth.signpost.http.HttpParameters decodeForm(java.io.InputStream)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)> --> <com.matburt.mobileorg.util.OrgUtils: byte[] serializeObject(java.lang.Object)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void writeAgendas(java.util.ArrayList,android.content.Context)> --> <com.matburt.mobileorg.util.OrgUtils: byte[] serializeObject(java.lang.Object)>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Identity: java.lang.String getAlgName()>
<com.jcraft.jsch.jce.HMACMD596: void update(byte[],int,int)> --> <javax.crypto.Mac: void update(byte[],int,int)>
<com.jcraft.jsch.jce.HMACMD5: void update(byte[],int,int)> --> <javax.crypto.Mac: void update(byte[],int,int)>
<com.jcraft.jsch.jce.HMACSHA196: void update(byte[],int,int)> --> <javax.crypto.Mac: void update(byte[],int,int)>
<com.jcraft.jsch.jce.HMACSHA1: void update(byte[],int,int)> --> <javax.crypto.Mac: void update(byte[],int,int)>
<com.dropbox.client2.android.AuthActivity: void startWebAuth()> --> <com.dropbox.client2.android.AuthActivity: java.lang.String getConsumerSig()>
<com.dropbox.client2.android.AuthActivity: void onResume()> --> <com.dropbox.client2.android.AuthActivity: java.lang.String getConsumerSig()>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter$2: void onCheckedChanged(android.widget.CompoundButton,boolean)> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: android.widget.Button access$200(com.matburt.mobileorg.Gui.Wizard.FolderAdapter)>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: android.widget.Button access$200(com.matburt.mobileorg.Gui.Wizard.FolderAdapter)>
<com.dropbox.client2.jsonextract.JsonThing: java.lang.Object expect(java.lang.Class)> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing: double expectFloat64()> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing: void expectNull()> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonExtractionException unexpected()> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing: int expectInt32()> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing: long expectInt64()> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<org.apache.http.impl.HttpConnectionMetricsImpl: void reset()> --> <org.apache.http.io.HttpTransportMetrics: void reset()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setup(com.matburt.mobileorg.OrgData.OrgNode,boolean,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.content.ContentResolver)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void setupTags(java.lang.String,java.lang.String,com.matburt.mobileorg.Gui.Theme.DefaultTheme)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setStackedBackground(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void setBaselineAligned(boolean)>
<org.apache.http.params.HttpProtocolParams: boolean useExpectContinue(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()> --> <org.apache.http.util.ByteArrayBuffer: byte[] buffer()>
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.ByteArrayBuffer,int,int)> --> <org.apache.http.util.ByteArrayBuffer: byte[] buffer()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: byte[] buffer()>
<com.jcraft.jsch.ChannelSession: void setPtyType(java.lang.String)> --> <com.jcraft.jsch.ChannelSession: void setPtyType(java.lang.String,int,int,int,int)>
<com.jcraft.jsch.ChannelSession: void setPtySize(int,int,int,int)> --> <com.jcraft.jsch.ChannelSession: void setPtyType(java.lang.String,int,int,int,int)>
<com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.MAC: void update(int)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.MAC: void update(int)>
<com.matburt.mobileorg.Gui.CertificateConflictActivity: void <init>()> --> <com.matburt.mobileorg.Gui.CertificateConflictActivity$1: void <init>(com.matburt.mobileorg.Gui.CertificateConflictActivity)>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestX11: void write(com.jcraft.jsch.Packet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet clone()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getMeasuredHeight()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getMeasuredHeight()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState: void <init>(android.os.Parcel,com.actionbarsherlock.internal.widget.IcsAbsSpinner$1)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState: void <init>(android.os.Parcel)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_3(int,int)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void start()> --> <org.xmlpull.v1.XmlSerializer: void endDocument()>
<org.apache.http.entity.mime.FormBodyPart: void generateTransferEncoding(org.apache.james.mime4j.descriptor.ContentDescriptor)> --> <org.apache.http.entity.mime.FormBodyPart: void addField(java.lang.String,java.lang.String)>
<org.apache.http.entity.mime.FormBodyPart: void generateContentType(org.apache.james.mime4j.descriptor.ContentDescriptor)> --> <org.apache.http.entity.mime.FormBodyPart: void addField(java.lang.String,java.lang.String)>
<org.apache.http.entity.mime.FormBodyPart: void generateContentDisp(org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.http.entity.mime.FormBodyPart: void addField(java.lang.String,java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: void setHeader(java.lang.String,java.lang.String)> --> <org.apache.http.message.HeaderGroup: void updateHeader(org.apache.http.Header)>
<org.apache.http.message.AbstractHttpMessage: void setHeader(org.apache.http.Header)> --> <org.apache.http.message.HeaderGroup: void updateHeader(org.apache.http.Header)>
<com.matburt.mobileorg.Plugin.SyncEditActivity: void finish()> --> <com.matburt.mobileorg.Plugin.SyncEditActivity: void setResult(int,android.content.Intent)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setLogo(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setLogo(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setLogo(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setLogo(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void setContentHeight(int)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void requestLayout()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildMailbox(org.apache.james.mime4j.field.address.parser.ASTmailbox)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildNameAddr(org.apache.james.mime4j.field.address.parser.ASTname_addr)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onProgressRefresh(float,boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void scheduleAccessibilityEventSender()>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.Session: void run()> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.Session: void sendIgnore()> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.Session: void sendKeepAliveMsg()> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.jcraft.jsch.ChannelAgentForwarding: void <init>()> --> <com.jcraft.jsch.Buffer: void <init>()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<com.matburt.mobileorg.Services.CalendarSyncService: void tryToInsertNode(com.matburt.mobileorg.util.MultiMap,com.matburt.mobileorg.OrgData.OrgNodeDate,java.lang.String,com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.util.MultiMap: java.lang.Object findValue(long,java.lang.Object)>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpHost: void <init>(java.lang.String,int)>
<com.dropbox.client2.RESTUtility: void updateClientProxy(org.apache.http.client.HttpClient,com.dropbox.client2.session.Session)> --> <org.apache.http.HttpHost: void <init>(java.lang.String,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void refreshTitle()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()>
<com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster: void add(android.widget.ListAdapter)> --> <com.commonsware.cwac.merge.MergeAdapter$PieceState: void <init>(android.widget.ListAdapter,boolean)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getMeasuredWidth()>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.PortWatcher: void run()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void setDividerDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void setWillNotDraw(boolean)>
<com.jcraft.jsch.ChannelSftp: void sendFSTAT(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
<com.jcraft.jsch.ChannelSftp: void sendREALPATH(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
<com.jcraft.jsch.ChannelSftp: void sendLSTAT(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
<com.jcraft.jsch.ChannelSftp: void sendRMDIR(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
<com.jcraft.jsch.ChannelSftp: void sendREMOVE(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
<com.jcraft.jsch.ChannelSftp: void sendCLOSE(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
<com.jcraft.jsch.ChannelSftp: void sendREADDIR(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
<com.jcraft.jsch.ChannelSftp: void sendSTAT(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
<com.jcraft.jsch.ChannelSftp: void sendOPENDIR(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
<com.jcraft.jsch.ChannelSftp: void sendREADLINK(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void SwitchTo(int)> --> <org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: void <init>(java.lang.String,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void run()>
<org.apache.james.mime4j.field.datetime.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void SwitchTo(int)> --> <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.codec.Base64OutputStream: void close()> --> <org.apache.james.mime4j.codec.Base64OutputStream: void close0()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_1()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flush()> --> <org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(int)> --> <org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)> --> <org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()>
<com.jcraft.jsch.Channel: java.io.InputStream getInputStream()> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream,boolean)>
<com.jcraft.jsch.Channel: void setOutputStream(java.io.OutputStream)> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream,boolean)>
<com.jcraft.jsch.Channel: void setOutputStream(java.io.OutputStream,boolean)> --> <com.jcraft.jsch.IO: void setOutputStream(java.io.OutputStream,boolean)>
<com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void execute(java.lang.Runnable)> --> <com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void doInBackground(java.lang.Runnable)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void ensureTabsExist()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setEmbeddedTabView(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setHasEmbeddedTabs(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setEmbeddedTabView(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)>
<com.dropbox.client2.session.WebAuthSession: com.dropbox.client2.session.WebAuthSession$WebAuthInfo getAuthInfo(java.lang.String)> --> <com.dropbox.client2.session.RequestTokenPair: void <init>(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void access$200(com.matburt.mobileorg.Gui.Capture.LocationEntry,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: void updateLocations(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: void cleanPayload()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.ArrayList stripFileProperties()>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeIfNecessary(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int)>
<org.apache.http.impl.SocketHttpClientConnection: void <init>()> --> <org.apache.http.impl.AbstractHttpClientConnection: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void onMeasure(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: org.apache.james.mime4j.field.language.parser.Token getToken(int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: org.apache.james.mime4j.field.language.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: int jj_ntk()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()>
<com.matburt.mobileorg.Services.TimeclockDialog: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Services.TimeclockDialog: android.view.View findViewById(int)>
<com.matburt.mobileorg.Services.TimeclockDialog: void onStart()> --> <com.matburt.mobileorg.Services.TimeclockDialog: android.view.View findViewById(int)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: void setModifiable(boolean)>
<org.apache.james.mime4j.field.mimeversion.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.TokenMgrError: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void SwitchTo(int)> --> <org.apache.james.mime4j.field.mimeversion.parser.TokenMgrError: void <init>(java.lang.String,int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void handleDataChanged()>
<com.jcraft.jsch.Session$GlobalRequestReply: void <init>(com.jcraft.jsch.Session,com.jcraft.jsch.Session$1)> --> <com.jcraft.jsch.Session$GlobalRequestReply: void <init>(com.jcraft.jsch.Session)>
<com.jcraft.jsch.jce.DH: void setG(byte[])> --> <com.jcraft.jsch.jce.DH: void setG(java.math.BigInteger)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean isReservingOverflow()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean reserveOverflow(android.content.Context)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean reserveOverflow(android.content.Context)>
<com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: android.preference.Preference findPreference(java.lang.CharSequence)>
<org.apache.http.message.BasicLineFormatter: void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)> --> <org.apache.http.message.BasicLineFormatter: int estimateProtocolVersionLen(org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicLineFormatter: void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)> --> <org.apache.http.message.BasicLineFormatter: int estimateProtocolVersionLen(org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)> --> <org.apache.http.message.BasicLineFormatter: int estimateProtocolVersionLen(org.apache.http.ProtocolVersion)>
<org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Proxy: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)>
<org.apache.http.util.ExceptionUtils: java.lang.reflect.Method getInitCauseMethod()> --> <org.apache.http.util.ExceptionUtils: java.lang.Class class$(java.lang.String)>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(java.lang.Object)> --> <oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)>
<oauth.signpost.AbstractOAuthConsumer: java.lang.String sign(java.lang.String)> --> <oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)>
<com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: void refreshDisplay()> --> <com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: java.lang.String getAgenda()>
<com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: android.widget.RemoteViews genUpdateDisplay(android.content.Context)> --> <com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: java.lang.String getAgenda()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void <init>(java.io.InputStream,java.lang.String)>
<org.apache.http.message.BasicHeaderElementIterator: boolean hasNext()> --> <org.apache.http.message.BasicHeaderElementIterator: void parseNextElement()>
<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement nextElement()> --> <org.apache.http.message.BasicHeaderElementIterator: void parseNextElement()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void local_part()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl,com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setCallback(com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void <init>(android.content.Context,com.actionbarsherlock.internal.widget.ActionBarContextView,com.actionbarsherlock.view.ActionMode$Callback,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setCallback(com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setCallback(com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback)>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: void setCallback(com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setCallback(com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback)>
<org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[])> --> <org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[],int,int)>
<org.apache.http.message.BasicHttpEntityEnclosingRequest: boolean expectContinue()> --> <org.apache.http.message.BasicHttpEntityEnclosingRequest: org.apache.http.Header getFirstHeader(java.lang.String)>
<org.apache.http.impl.DefaultHttpServerConnection: java.lang.String toString()> --> <org.apache.http.impl.DefaultHttpServerConnection: boolean isOpen()>
<org.apache.james.mime4j.field.ParseException: void <init>(java.lang.Throwable)> --> <org.apache.james.mime4j.MimeException: void <init>(java.lang.Throwable)>
<oauth.signpost.basic.DefaultOAuthProvider: oauth.signpost.http.HttpResponse sendRequest(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.http.HttpRequest: java.lang.Object unwrap()>
<oauth.signpost.basic.DefaultOAuthProvider: void closeConnection(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse)> --> <oauth.signpost.http.HttpRequest: java.lang.Object unwrap()>
<oauth.signpost.commonshttp.CommonsHttpOAuthProvider: oauth.signpost.http.HttpResponse sendRequest(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.http.HttpRequest: java.lang.Object unwrap()>
<com.dropbox.client2.ProgressListener$Adjusted: void <init>(com.dropbox.client2.ProgressListener,long,long)> --> <com.dropbox.client2.ProgressListener: void <init>()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord: void <init>(java.lang.String,long,float)>
<com.matburt.mobileorg.OrgData.OrgContract$Edits: android.net.Uri buildIdUri(java.lang.Long)> --> <com.matburt.mobileorg.OrgData.OrgContract$Edits: android.net.Uri buildIdUri(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setPromptId(int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.content.Context getContext()>
<com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob_rsa()> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.Channel: void sendOpenFailure(int)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.Session: void sendKeepAliveMsg()> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob_dss()> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_rsa(byte[])> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_dss(byte[])> --> <com.jcraft.jsch.Buffer: void putString(byte[])>
<com.jcraft.jsch.Channel: void sendOpenConfirmation()> --> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.Channel$1: void flush()> --> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.Channel: void sendOpenFailure(int)> --> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.Channel: void close()> --> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.Channel: void sendSignal(java.lang.String)> --> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.Channel: void eof()> --> <com.jcraft.jsch.Channel: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void putMPInt(byte[])>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.view.StandaloneActionMode: void <init>(android.content.Context,com.actionbarsherlock.internal.widget.ActionBarContextView,com.actionbarsherlock.view.ActionMode$Callback,boolean)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void saveEdits()> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: void saveEdits(com.matburt.mobileorg.OrgData.OrgNode)>
<com.matburt.mobileorg.OrgData.OrgNode: void preparePayload()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void <init>(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.OrgData.OrgNodePayload getOrgNodePayload()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()>
<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestWindowChange: void write(com.jcraft.jsch.Packet)>
<com.dropbox.client2.session.AbstractSession$DBClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> --> <org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>
<org.apache.http.impl.AbstractHttpServerConnection: boolean isStale()> --> <org.apache.http.impl.AbstractHttpServerConnection: boolean isOpen()>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parseHeading(java.lang.String,int)> --> <com.matburt.mobileorg.OrgData.OrgNodeParser: com.matburt.mobileorg.OrgData.OrgNode parseLine(java.lang.String,int)>
<com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver: void onChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void rememberSyncState()>
<org.apache.http.impl.entity.EntitySerializer: java.io.OutputStream doSerialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.impl.io.ChunkedOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer)>
<com.matburt.mobileorg.Gui.Capture.EditActivity$2: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void finish()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void finish()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void doCancel()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void finish()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateScheduled(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void setupDates()> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateScheduled(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void restoreInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateScheduled(java.lang.String)>
<com.matburt.mobileorg.Services.CalendarSyncService$1: void start()> --> <com.matburt.mobileorg.Services.CalendarSyncService: void access$400(com.matburt.mobileorg.Services.CalendarSyncService)>
<com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> --> <com.jcraft.jsch.KeyPairRSA: int writeINTEGER(byte[],int,byte[])>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: boolean onContextItemSelected(android.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void refresh()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void onResume()> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void refresh()>
<com.actionbarsherlock.internal.widget.ActionBarView: android.os.Parcelable onSaveInstanceState()> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: android.os.Parcelable onSaveInstanceState()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void prepareButtons()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$3: void <init>(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: void loginWebdav()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void onConfigurationChanged(android.content.res.Configuration)>
<com.actionbarsherlock.internal.widget.IcsProgressBar$AccessibilityEventSender: void run()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void sendAccessibilityEvent(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: void removeItem(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenu: int findItemIndex(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.view.MenuItem findItem(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenu: int findItemIndex(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performIdentifierAction(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenu: int findItemIndex(int)>
<org.apache.james.mime4j.storage.MemoryStorageProvider: void <init>()> --> <org.apache.james.mime4j.storage.AbstractStorageProvider: void <init>()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider: void <init>(org.apache.james.mime4j.storage.StorageProvider,int)> --> <org.apache.james.mime4j.storage.AbstractStorageProvider: void <init>()>
<org.apache.james.mime4j.storage.CipherStorageProvider: void <init>(org.apache.james.mime4j.storage.StorageProvider,java.lang.String)> --> <org.apache.james.mime4j.storage.AbstractStorageProvider: void <init>()>
<org.apache.james.mime4j.storage.TempFileStorageProvider: void <init>(java.lang.String,java.lang.String,java.io.File)> --> <org.apache.james.mime4j.storage.AbstractStorageProvider: void <init>()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void access$000(com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStopStringLiteralDfa_2(int,long)>
<com.jcraft.jsch.jgss.GSSContextKrb5: byte[] init(byte[],int,int)> --> <org.ietf.jgss.GSSContext: byte[] initSecContext(byte[],int,int)>
<com.jcraft.jsch.jce.HMACSHA1: void update(int)> --> <com.jcraft.jsch.jce.HMACSHA1: void update(byte[],int,int)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.conn.params.ConnManagerParams: void setMaxTotalConnections(org.apache.http.params.HttpParams,int)>
<com.jcraft.jsch.jce.ARCFOUR: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.AES256CBC: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.TripleDESCTR: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.AES128CBC: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.ARCFOUR256: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.ARCFOUR128: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.AES192CTR: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.AES192CBC: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.AES256CTR: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.TripleDESCBC: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.BlowfishCBC: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<com.jcraft.jsch.jce.AES128CTR: void update(byte[],int,int,byte[],int)> --> <javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encode(java.io.InputStream,java.io.OutputStream)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encodeChunk(byte[],int,int)>
<org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void write(byte[],int,int)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encodeChunk(byte[],int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$1)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$StartTimePickerDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: com.matburt.mobileorg.OrgData.OrgNodeTimeDate access$800(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$EndTimePickerDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: com.matburt.mobileorg.OrgData.OrgNodeTimeDate access$800(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$DatePickerDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: com.matburt.mobileorg.OrgData.OrgNodeTimeDate access$800(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.jcraft.jsch.IO: void close()> --> <com.jcraft.jsch.IO: void out_close()>
<com.jcraft.jsch.Channel: void eof_remote()> --> <com.jcraft.jsch.IO: void out_close()>
<com.matburt.mobileorg.OrgData.OrgDatabase: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void onCreate(android.database.sqlite.SQLiteDatabase)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams getParams()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void ping_u1_url(java.lang.String)> --> <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams getParams()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.apache.http.HttpResponse executeRequest(org.apache.http.client.methods.HttpUriRequest)> --> <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.params.HttpParams getParams()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void setModifiable(boolean)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: void setEnabled(boolean)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawHorizontalDivider(android.graphics.Canvas,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getPaddingLeft()>
<com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)>
<com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.Synchronizers.UbuntuOneSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInit(org.apache.james.mime4j.field.address.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInit(org.apache.james.mime4j.field.address.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInit(org.apache.james.mime4j.field.address.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInit(org.apache.james.mime4j.field.address.parser.SimpleCharStream)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void buildConsumer()> --> <oauth.signpost.commonshttp.CommonsHttpOAuthConsumer: void setTokenWithSecret(java.lang.String,java.lang.String)>
<com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> --> <org.ietf.jgss.Oid: void <init>(java.lang.String)>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_dss(byte[])> --> <com.jcraft.jsch.SignatureDSA: byte[] sign()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Packet: void setRandom(com.jcraft.jsch.Random)>
<org.apache.http.message.BasicHeaderValueParser: void <clinit>()> --> <org.apache.http.message.BasicHeaderValueParser: void <init>()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void backup(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void backup(int)>
<org.apache.james.mime4j.field.ContentTransferEncodingField: java.lang.String getEncoding(org.apache.james.mime4j.field.ContentTransferEncodingField)> --> <org.apache.james.mime4j.field.ContentTransferEncodingField: java.lang.String getEncoding()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: java.lang.String getDeadline()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void announceDateModified(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: java.lang.String getDeadline()>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void setupSettings(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: java.lang.String combineToString(java.util.ArrayList)>
<org.apache.james.mime4j.storage.CipherStorageProvider: org.apache.james.mime4j.storage.StorageOutputStream createStorageOutputStream()> --> <org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorageOutputStream: void <init>(org.apache.james.mime4j.storage.StorageOutputStream,java.lang.String,javax.crypto.spec.SecretKeySpec)>
<org.json.simple.JSONValue: java.lang.String toJSONString(java.lang.Object)> --> <org.json.simple.JSONArray: java.lang.String toJSONString(java.util.List)>
<org.json.simple.JSONArray: java.lang.String toJSONString()> --> <org.json.simple.JSONArray: java.lang.String toJSONString(java.util.List)>
<com.dropbox.client2.android.AndroidAuthSession: java.lang.String finishAuthentication()> --> <com.dropbox.client2.android.AndroidAuthSession: void setAccessTokenPair(com.dropbox.client2.session.AccessTokenPair)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setSelection(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setSelectionInt(int,boolean)>
<com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void sendAccessibilityEvent(int)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void finish()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void sendAccessibilityEvent(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void sendAccessibilityEvent(int)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: byte[] getSessionId()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: byte[] getSessionId()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingLeft()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingLeft()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void updateDrawableBounds(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingLeft()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void invalidateDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingLeft()>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField mailboxList(java.lang.String,java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField mailboxList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField 'from'(org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField mailboxList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField 'from'(java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField mailboxList0(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField 'from'(org.apache.james.mime4j.field.address.Mailbox[])> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField mailboxList0(java.lang.String,java.lang.Iterable)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void displayNewUserDialogs()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void showUpgradePopup()>
<org.json.simple.parser.Yylex: org.json.simple.parser.Yytoken yylex()> --> <org.json.simple.parser.Yylex: boolean zzRefill()>
<org.apache.james.mime4j.field.DateTimeField: void parse()> --> <org.apache.james.mime4j.field.datetime.parser.ParseException: void <init>(java.lang.String)>
<com.matburt.mobileorg.Services.CalendarSyncService: void removeCalendarEntries(com.matburt.mobileorg.util.MultiMap)> --> <com.matburt.mobileorg.Services.CalendarWrapper: int deleteEntry(com.matburt.mobileorg.OrgData.CalendarEntry)>
<com.matburt.mobileorg.Services.CalendarSyncService: void assimilateCalendar()> --> <com.matburt.mobileorg.Services.CalendarWrapper: int deleteEntry(com.matburt.mobileorg.OrgData.CalendarEntry)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void signRequest(org.apache.http.HttpRequest)> --> <oauth.signpost.exception.OAuthException: void printStackTrace()>
<org.apache.http.entity.mime.content.FileBody: void writeTo(java.io.OutputStream,int)> --> <org.apache.http.entity.mime.content.FileBody: void writeTo(java.io.OutputStream)>
<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)> --> <org.apache.http.params.AbstractHttpParams: void <init>()>
<org.apache.http.params.BasicHttpParams: void <init>()> --> <org.apache.http.params.AbstractHttpParams: void <init>()>
<com.dropbox.client2.jsonextract.JsonMap$WrapperIterator: java.util.Map$Entry next()> --> <com.dropbox.client2.jsonextract.JsonMap$WrappedEntry: void <init>(java.lang.String,java.util.Map$Entry,com.dropbox.client2.jsonextract.JsonMap$1)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.KeyPair: boolean parse(byte[])>
<com.jcraft.jsch.KeyPair: boolean decrypt(byte[])> --> <com.jcraft.jsch.KeyPair: boolean parse(byte[])>
<org.apache.james.mime4j.message.SimpleContentHandler: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.message.SimpleContentHandler: void bodyDecoded(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean reserveOverflow(android.content.Context)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$HasPermanentMenuKey: boolean get(android.content.Context)>
<com.actionbarsherlock.widget.ShareActionProvider: void <init>(android.content.Context)> --> <com.actionbarsherlock.view.ActionProvider: void <init>(android.content.Context)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onPreparePanel(int,android.view.View,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.AddressList getTo()> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.AddressList getAddressList(java.lang.String)>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.AddressList getCc()> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.AddressList getAddressList(java.lang.String)>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.AddressList getBcc()> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.AddressList getAddressList(java.lang.String)>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.AddressList getReplyTo()> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.AddressList getAddressList(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder,android.view.View,boolean)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder,android.view.View)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder,android.view.View,boolean)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder,android.view.View,boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder,android.view.View,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder,android.view.View,boolean)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()> --> <com.actionbarsherlock.internal.view.View_HasStateListenerSupport: void removeOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onViewDetachedFromWindow(android.view.View)> --> <com.actionbarsherlock.internal.view.View_HasStateListenerSupport: void removeOnAttachStateChangeListener(com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener)>
<com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> --> <com.jcraft.jsch.Buffer: void setOffSet(int)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Buffer: void setOffSet(int)>
<org.apache.http.impl.io.SocketOutputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.AbstractSessionOutputBuffer: void <init>()>
<com.jcraft.jsch.UserAuth: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: com.jcraft.jsch.UserInfo getUserInfo()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Session: com.jcraft.jsch.UserInfo getUserInfo()>
<com.matburt.mobileorg.OrgData.OrgFile: void <init>(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.util.OrgFileNotFoundException: void <init>(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.util.OrgFileNotFoundException: void <init>(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgFile: void set(android.database.Cursor)> --> <com.matburt.mobileorg.util.OrgFileNotFoundException: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setEnabled(boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void requestLayout()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onAttachedToWindow()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean post(java.lang.Runnable)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToTab(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean post(java.lang.Runnable)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: int getSelectedNavigationIndex()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setMeasuredDimension(int,int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: int findGroupIndex(int,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getGroupId()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getGroupId()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setExclusiveItemChecked(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getGroupId()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setGroupVisible(int,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getGroupId()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getGroupId()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeGroup(int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getGroupId()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setGroupEnabled(int,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getGroupId()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setGroupCheckable(int,boolean,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getGroupId()>
<org.apache.james.mime4j.field.AbstractField: boolean isValidField()> --> <org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParseException getParseException()>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView createTabView(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener: void <init>(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,com.actionbarsherlock.internal.widget.ScrollingTabContainerView$1)>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setScaleX(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void invalidateAfterUpdate()>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setTranslationX(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void invalidateAfterUpdate()>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setTranslationY(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void invalidateAfterUpdate()>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setScaleY(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void invalidateAfterUpdate()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void updateTextButtonVisibility()> --> <com.actionbarsherlock.internal.widget.CapitalizingButton: java.lang.CharSequence getText()>
<oauth.signpost.signature.PlainTextMessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.signature.PlainTextMessageSigner: java.lang.String getConsumerSecret()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setSplitView(com.actionbarsherlock.internal.widget.ActionBarContainer)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode access$500(com.actionbarsherlock.internal.ActionBarSherlockCompat)>
<org.apache.james.mime4j.field.address.parser.ASTphrase: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.ASTphrase,java.lang.Object)>
<com.matburt.mobileorg.Settings.SynchronizerPreferences: void setPreferenceSummary()> --> <com.matburt.mobileorg.Settings.SynchronizerPreferences: android.content.Context getContext()>
<com.matburt.mobileorg.Settings.SynchronizerPreferences$1: boolean onPreferenceClick(android.preference.Preference)> --> <com.matburt.mobileorg.Settings.SynchronizerPreferences: android.content.Context getContext()>
<com.matburt.mobileorg.Settings.SynchronizerPreferences: android.view.View onCreateView(android.view.ViewGroup)> --> <com.matburt.mobileorg.Settings.SynchronizerPreferences: android.content.Context getContext()>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.parser.MimeEntity: void advanceToBoundary()>
<org.apache.james.mime4j.message.BodyFactory: java.nio.charset.Charset toJavaCharset(java.lang.String,boolean)> --> <org.apache.james.mime4j.util.CharsetUtil: boolean isEncodingSupported(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: android.view.ViewGroup$LayoutParams getLayoutParams()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: android.view.ViewGroup$LayoutParams getLayoutParams()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: android.view.ViewGroup$LayoutParams getLayoutParams()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: android.view.ViewGroup$LayoutParams getLayoutParams()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void reset()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void reset()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void reset()>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Buffer: void getByte(byte[])>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void getByte(byte[])>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void getByte(byte[])>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Buffer: void getByte(byte[])>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: void getByte(byte[])>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Buffer: void getByte(byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void getByte(byte[])>
<org.apache.james.mime4j.field.ContentDispositionField: java.lang.String getFilename()> --> <org.apache.james.mime4j.field.ContentDispositionField: java.lang.String getParameter(java.lang.String)>
<org.apache.james.mime4j.field.ContentDispositionField: long getSize()> --> <org.apache.james.mime4j.field.ContentDispositionField: java.lang.String getParameter(java.lang.String)>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Date parseDate(java.lang.String)> --> <org.apache.james.mime4j.field.ContentDispositionField: java.lang.String getParameter(java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runDeleteFileNode()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode$5: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineActionMode)>
<com.matburt.mobileorg.Services.CalendarSyncService: com.matburt.mobileorg.util.MultiMap getCalendarEntries(java.lang.String)> --> <com.matburt.mobileorg.util.MultiMap: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setSplitBackground(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setSplitActionBar(boolean)>
<com.actionbarsherlock.ActionBarSherlock: boolean callbackPrepareOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock$OnPrepareOptionsMenuListener: boolean onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.jcraft.jsch.SftpATTRS: java.lang.String toString()> --> <com.jcraft.jsch.SftpATTRS: java.lang.String getMtimeString()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setModal(boolean)>
<com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setModal(boolean)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void start()> --> <org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void fillBuffer()> --> <org.apache.james.mime4j.codec.QuotedPrintableInputStream: void populatePushbackQueue()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: android.view.View getItemView(com.actionbarsherlock.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void access$000(com.matburt.mobileorg.Gui.Capture.PayloadFragment)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void reopenMenu(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean showOverflowMenu()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean showOverflowMenu()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchOpenOptionsMenu()> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean showOverflowMenu()>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion createProtocolVersion(int,int)> --> <org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofFloat(float,float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: void <init>(float,float)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: void <init>(float,float)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void resetList()>
<com.jcraft.jsch.JSch: void setKnownHosts(java.lang.String)> --> <com.jcraft.jsch.KnownHosts: void setKnownHosts(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToView()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getCleanedPayload()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void setupDates()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getCleanedPayload()>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getCleanedPayload()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getCleanedPayload()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date date()>
<org.apache.http.impl.SocketHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.SocketHttpServerConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token jjFillToken()>
<com.jcraft.jsch.Buffer: long getUInt()> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.Buffer: int getShort()> --> <com.jcraft.jsch.Buffer: int getByte()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: int getByte()>
<org.apache.james.mime4j.parser.MimeTokenStream: int next()> --> <org.apache.james.mime4j.parser.EntityStateMachine: org.apache.james.mime4j.parser.EntityStateMachine advance()>
<com.google.gdata.util.common.base.UnicodeEscaper: java.lang.Appendable escape(java.lang.Appendable)> --> <com.google.gdata.util.common.base.UnicodeEscaper$1: void <init>(com.google.gdata.util.common.base.UnicodeEscaper,java.lang.Appendable)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_9()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_11()>
<com.dropbox.client2.exception.DropboxParseException: void <init>(java.io.BufferedReader)> --> <com.dropbox.client2.exception.DropboxParseException: java.lang.String stringifyBody(java.io.BufferedReader)>
<com.matburt.mobileorg.Plugin.SyncEditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Plugin.SyncEditActivity: android.content.Intent getIntent()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener: void <init>(com.actionbarsherlock.internal.widget.AbsActionBarView)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener: void <init>(com.actionbarsherlock.internal.widget.AbsActionBarView)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener: void <init>(com.actionbarsherlock.internal.widget.AbsActionBarView)>
<com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: void onStart(android.content.Intent,int)> --> <com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService$SynchServiceReceiver: void <init>(com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService,com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$1)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void promptForNewFile()> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry$2: void <init>(com.matburt.mobileorg.Gui.Capture.LocationEntry,android.widget.EditText)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void closeMode()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Address buildAddress(org.apache.james.mime4j.field.address.parser.ASTaddress)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.MailboxList buildGroupBody(org.apache.james.mime4j.field.address.parser.ASTgroup_body)>
<org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader,org.json.simple.parser.ContainerFactory)> --> <org.json.simple.parser.JSONParser: void nextToken()>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.JSONParser: void nextToken()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void setExpandedActionViewsExclusive(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void setStackedBackground(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void invalidate()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void invalidate()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void setSplitBackground(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void invalidate()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void setPrimaryBackground(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void invalidate()>
<org.apache.james.mime4j.message.Message: void <init>(org.apache.james.mime4j.message.Message)> --> <org.apache.james.mime4j.message.Entity: void <init>(org.apache.james.mime4j.message.Entity)>
<org.apache.james.mime4j.message.BodyPart: void <init>(org.apache.james.mime4j.message.BodyPart)> --> <org.apache.james.mime4j.message.Entity: void <init>(org.apache.james.mime4j.message.Entity)>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.FloatEvaluator: java.lang.Float evaluate(float,java.lang.Number,java.lang.Number)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void onMenuModeChange(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void reopenMenu(boolean)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: java.lang.String doParse()> --> <org.apache.james.mime4j.field.structured.parser.ParseException: void <init>()>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader)> --> <com.matburt.mobileorg.OrgData.OrgFileParser: void parseLine(java.lang.String)>
<org.apache.james.mime4j.message.Entity: java.lang.String getMimeType()> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Entity getParent()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.view.MenuItem: boolean isVisible()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.view.MenuItem: boolean isVisible()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])> --> <org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)>
<com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> --> <com.jcraft.jsch.Util: int skipUTF8Char(byte)>
<com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob()> --> <com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob_dss()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void setModifiable(boolean)> --> <com.matburt.mobileorg.Gui.Capture.TagTableRow: void setModifiable(boolean)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void setupTagEntries(java.util.ArrayList)> --> <com.matburt.mobileorg.Gui.Capture.TagTableRow: void setModifiable(boolean)>
<com.matburt.mobileorg.Gui.ViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Theme.DefaultTheme: com.matburt.mobileorg.Gui.Theme.DefaultTheme getTheme(android.content.Context)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.Theme.DefaultTheme: com.matburt.mobileorg.Gui.Theme.DefaultTheme getTheme(android.content.Context)>
<com.matburt.mobileorg.util.OrgNode2Html: void setupConfig(android.content.Context)> --> <com.matburt.mobileorg.Gui.Theme.DefaultTheme: com.matburt.mobileorg.Gui.Theme.DefaultTheme getTheme(android.content.Context)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Theme.DefaultTheme: com.matburt.mobileorg.Gui.Theme.DefaultTheme getTheme(android.content.Context)>
<com.matburt.mobileorg.Gui.ViewFragment: void displayError()> --> <com.matburt.mobileorg.Gui.Theme.DefaultTheme: com.matburt.mobileorg.Gui.Theme.DefaultTheme getTheme(android.content.Context)>
<org.apache.james.mime4j.parser.RawField: java.lang.String getBody()> --> <org.apache.james.mime4j.parser.RawField: java.lang.String parseBody()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void dispatchSaveInstanceState(android.util.SparseArray)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void dispatchFreezeSelfOnly(android.util.SparseArray)>
<com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor: com.dropbox.client2.DropboxAPI$DeltaEntry extract(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonList: com.dropbox.client2.jsonextract.JsonThing get(int)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void endMessage()>
<com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void measureChildWithMargins(android.view.View,int,int,int,int)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getLocationSelection()> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedTopNodeId()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedNodeId(int)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedTopNodeId()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.ActionBarSherlock: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.app.SherlockActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.ActionBarSherlock: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.ActionBarSherlock: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.ActionBarSherlock: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.app.SherlockListActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.ActionBarSherlock: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.matburt.mobileorg.Gui.ViewActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.matburt.mobileorg.Gui.ViewActivity: void setupRecursionSubmenu(com.actionbarsherlock.view.SubMenu)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxFileInfo getThumbnail(java.lang.String,java.io.OutputStream,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$DropboxInputStream: void copyStreamToOutput(java.io.OutputStream,com.dropbox.client2.ProgressListener)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxFileInfo getFile(java.lang.String,java.lang.String,java.io.OutputStream,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$DropboxInputStream: void copyStreamToOutput(java.io.OutputStream,com.dropbox.client2.ProgressListener)>
<com.matburt.mobileorg.Services.TimeclockService: void updateTime()> --> <com.matburt.mobileorg.Services.TimeclockService: java.lang.String getEstimatedTimeString()>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpATTRS: long getSize()>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpATTRS: long getSize()>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpATTRS: long getSize()>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.SftpATTRS: long getSize()>
<com.jcraft.jsch.SftpATTRS: java.lang.String toString()> --> <com.jcraft.jsch.SftpATTRS: long getSize()>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpATTRS: long getSize()>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpATTRS: long getSize()>
<com.jcraft.jsch.IdentityFile: boolean setPassphrase(byte[])> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.Session: void initDeflater(java.lang.String)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.Session: void initInflater(java.lang.String)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelExec: void start()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.Session: void setTimeout(int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher getPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.KeyPairDSA: void generate(int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelShell: void start()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.jcraft.jsch.ChannelSubsystem: void start()> --> <com.jcraft.jsch.JSchException: void <init>(java.lang.String,java.lang.Throwable)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onPreparePanel(int,android.view.View,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.widget.ShareActionProvider: void setShareHistoryFileName(java.lang.String)> --> <com.actionbarsherlock.widget.ShareActionProvider: void setActivityChooserPolicyIfNeeded()>
<com.actionbarsherlock.widget.ShareActionProvider: void setOnShareTargetSelectedListener(com.actionbarsherlock.widget.ShareActionProvider$OnShareTargetSelectedListener)> --> <com.actionbarsherlock.widget.ShareActionProvider: void setActivityChooserPolicyIfNeeded()>
<org.apache.james.mime4j.parser.AbstractEntity: void monitor(org.apache.james.mime4j.parser.Event)> --> <org.apache.james.mime4j.parser.MimeParseEventException: void <init>(org.apache.james.mime4j.parser.Event)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void verifyResponse(org.apache.http.HttpResponse)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void verifyResponse(org.apache.http.HttpResponse)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void verifyResponse(org.apache.http.HttpResponse)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void verifyResponse(org.apache.http.HttpResponse)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void verifyResponse(org.apache.http.HttpResponse)>
<org.apache.james.mime4j.message.BodyCopier: org.apache.james.mime4j.message.Body copy(org.apache.james.mime4j.message.Body)> --> <org.apache.james.mime4j.message.SingleBody: org.apache.james.mime4j.message.SingleBody copy()>
<com.matburt.mobileorg.OrgData.OrgEdit: void setOldValue(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getPayload()>();     case 5: goto $r4_4 = $r1.<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String tags>
<oauth.signpost.http.HttpParameters: java.lang.Object get(java.lang.Object)> --> <oauth.signpost.http.HttpParameters: java.util.SortedSet get(java.lang.Object)>
<oauth.signpost.http.HttpParameters: void putMap(java.util.Map)> --> <oauth.signpost.http.HttpParameters: java.util.SortedSet get(java.lang.Object)>
<oauth.signpost.http.HttpParameters: java.util.SortedSet put(java.lang.String,java.util.SortedSet,boolean)> --> <oauth.signpost.http.HttpParameters: java.util.SortedSet get(java.lang.Object)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.reflect.Method getPropertyFunction(java.lang.Class,java.lang.String,java.lang.Class)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.String getMethodName(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl$2: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.nineoldandroids.animation.Animator access$402(com.actionbarsherlock.internal.app.ActionBarImpl,com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.app.ActionBarImpl$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.nineoldandroids.animation.Animator access$402(com.actionbarsherlock.internal.app.ActionBarImpl,com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void disableAllNextActions(int)> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: android.view.View getChildAt(int)>
<com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: void onMeasure(int,int)> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: android.view.View getChildAt(int)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: android.view.View getChildAt(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)>
<com.actionbarsherlock.widget.ActivityChooserView: void onAttachedToWindow()> --> <com.actionbarsherlock.widget.ActivityChooserModel: void registerObserver(java.lang.Object)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setDataModel(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void registerObserver(java.lang.Object)>
<org.apache.james.mime4j.message.Multipart: void setBodyParts(java.util.List)> --> <org.apache.james.mime4j.message.BodyPart: void setParent(org.apache.james.mime4j.message.Entity)>
<org.apache.james.mime4j.message.Multipart: org.apache.james.mime4j.message.BodyPart replaceBodyPart(org.apache.james.mime4j.message.BodyPart,int)> --> <org.apache.james.mime4j.message.BodyPart: void setParent(org.apache.james.mime4j.message.Entity)>
<org.apache.james.mime4j.message.Multipart: org.apache.james.mime4j.message.BodyPart removeBodyPart(int)> --> <org.apache.james.mime4j.message.BodyPart: void setParent(org.apache.james.mime4j.message.Entity)>
<org.apache.james.mime4j.message.Multipart: void setParent(org.apache.james.mime4j.message.Entity)> --> <org.apache.james.mime4j.message.BodyPart: void setParent(org.apache.james.mime4j.message.Entity)>
<org.apache.james.mime4j.message.Multipart: void addBodyPart(org.apache.james.mime4j.message.BodyPart,int)> --> <org.apache.james.mime4j.message.BodyPart: void setParent(org.apache.james.mime4j.message.Entity)>
<org.apache.james.mime4j.message.Multipart: void addBodyPart(org.apache.james.mime4j.message.BodyPart)> --> <org.apache.james.mime4j.message.BodyPart: void setParent(org.apache.james.mime4j.message.Entity)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void setupList()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: android.view.View findViewById(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void onMenuModeChange(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: boolean showOverflowMenu()>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void onMenuModeChange(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: boolean showOverflowMenu()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
<org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
<org.apache.http.impl.io.AbstractMessageParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
<org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
<org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
<org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void field(org.apache.james.mime4j.parser.Field)>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> --> <com.jcraft.jsch.Session: void _write(com.jcraft.jsch.Packet)>
<org.apache.http.protocol.ResponseDate: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpDateGenerator: java.lang.String getCurrentDate()>
<org.apache.http.protocol.RequestDate: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpDateGenerator: java.lang.String getCurrentDate()>
<org.apache.james.mime4j.field.DateTimeField: void parse()> --> <org.apache.james.mime4j.field.datetime.parser.ParseException: java.lang.String getMessage()>
<com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.HMACMD596: void init(byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.HMACMD5: void init(byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.HMACSHA1: void init(byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.HMACSHA196: void init(byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<org.apache.james.mime4j.storage.CipherStorageProvider: javax.crypto.spec.SecretKeySpec getSecretKeySpec()> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])> --> <javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.view.ViewGroup$LayoutParams getLayoutParams()>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenRSA: byte[] getN()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: java.lang.String toString()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String toString()>
<com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver: void onChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void access$000(com.actionbarsherlock.internal.widget.IcsAdapterView,android.os.Parcelable)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: char getNumericShortcut()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: char getNumericShortcut()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: char getNumericShortcut()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setAlphabeticShortcut(char)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.widget.SpinnerAdapter getAdapter()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeTabAt(int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.widget.SpinnerAdapter getAdapter()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void updateTab(int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.widget.SpinnerAdapter getAdapter()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.widget.SpinnerAdapter getAdapter()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeAllTabs()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.widget.SpinnerAdapter getAdapter()>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.widget.SpinnerAdapter getAdapter()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.widget.SpinnerAdapter getAdapter()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void performCollapse()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.widget.SpinnerAdapter getAdapter()>
<com.actionbarsherlock.widget.ActivityChooserModel: com.actionbarsherlock.widget.ActivityChooserModel get(android.content.Context,java.lang.String)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void readHistoricalData()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$1: void start()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$1: void run()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$7: void <init>(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.matburt.mobileorg.Services.CalendarWrapper: void deleteFileEntries(java.lang.String[])> --> <com.matburt.mobileorg.Services.CalendarWrapper: int deleteFileEntries(java.lang.String)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void disconnect()>
<com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: com.jcraft.jsch.ChannelSftp$RequestQueue$Request get(int)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: int length()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: int length()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()> --> <org.apache.http.util.ByteArrayBuffer: int length()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)> --> <org.apache.http.util.ByteArrayBuffer: int length()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: int length()>
<com.actionbarsherlock.widget.ActivityChooserModel: void setHistoryMaxSize(int)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()>
<com.actionbarsherlock.widget.ActivityChooserModel: void setActivitySorter(com.actionbarsherlock.widget.ActivityChooserModel$ActivitySorter)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()>
<com.actionbarsherlock.widget.ActivityChooserModel: void access$1000(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()>
<com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()>
<com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()> --> <com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()>
<com.matburt.mobileorg.Services.SyncService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.SyncService: void runSynchronizer()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: android.content.Context getContext()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: android.app.Dialog createTodoDialog()> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: android.content.Context getContext()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setNewTodo(java.lang.String)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: android.content.Context getContext()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setFloatValues(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setFloatValues(float[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofFloat(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setFloatValues(float[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void calculateValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: java.lang.Object getValue(float)>
<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)> --> <org.apache.http.util.CharArrayBuffer: void expand(int)>
<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)> --> <org.apache.http.util.CharArrayBuffer: void expand(int)>
<org.apache.http.util.CharArrayBuffer: void append(char)> --> <org.apache.http.util.CharArrayBuffer: void expand(int)>
<org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)> --> <org.apache.http.util.CharArrayBuffer: void expand(int)>
<org.apache.http.util.CharArrayBuffer: void append(char[],int,int)> --> <org.apache.http.util.CharArrayBuffer: void expand(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void backup(int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void backup(int)>
<com.matburt.mobileorg.Services.CalendarComptabilityWrappers: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Services.CalendarComptabilityWrappers$intReminders: void <init>(com.matburt.mobileorg.Services.CalendarComptabilityWrappers)>
<com.matburt.mobileorg.Services.TimeclockDialog: void endTimeclock()> --> <com.matburt.mobileorg.Services.TimeclockService: com.matburt.mobileorg.Services.TimeclockService getInstance()>
<com.matburt.mobileorg.Services.TimeclockDialog: void onStart()> --> <com.matburt.mobileorg.Services.TimeclockService: com.matburt.mobileorg.Services.TimeclockService getInstance()>
<com.matburt.mobileorg.Services.TimeclockDialog: void saveClock(int,int)> --> <com.matburt.mobileorg.Services.TimeclockService: com.matburt.mobileorg.Services.TimeclockService getInstance()>
<org.apache.james.mime4j.message.Multipart: void <init>(org.apache.james.mime4j.message.Multipart)> --> <org.apache.james.mime4j.message.BodyPart: void <init>(org.apache.james.mime4j.message.BodyPart)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void updateDrawableBounds(int,int)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onSizeChanged(int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void updateDrawableBounds(int,int)>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parse()> --> <org.apache.http.ParseException: java.lang.String getMessage()>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)> --> <org.apache.http.ParseException: java.lang.String getMessage()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$DependencyListener: void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$DependencyListener: void startIfReady(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$DependencyListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$DependencyListener: void startIfReady(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<org.apache.http.message.BasicHeaderIterator: void <init>(org.apache.http.Header[],java.lang.String)> --> <org.apache.http.message.BasicHeaderIterator: int findNext(int)>
<org.apache.http.message.BasicHeaderIterator: org.apache.http.Header nextHeader()> --> <org.apache.http.message.BasicHeaderIterator: int findNext(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.app.ActionBar$Tab: java.lang.CharSequence getText()>
<org.apache.http.message.AbstractHttpMessage: void removeHeaders(java.lang.String)> --> <org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator()>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.HeaderIterator headerIterator()> --> <org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void initAbsSpinner()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setFocusable(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: void saveActionViewStates(android.os.Bundle)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.ForwardedTCPIPDaemon: void setArg(java.lang.Object[])>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <org.json.JSONObject: java.lang.String toString()>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.AbstractOAuthProvider: void handleUnexpectedResponse(int,oauth.signpost.http.HttpResponse)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void endAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void end()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void cancel()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<org.apache.james.mime4j.parser.AbstractEntity: boolean parseField()> --> <org.apache.james.mime4j.parser.AbstractEntity: void monitor(org.apache.james.mime4j.parser.Event)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()> --> <org.apache.james.mime4j.parser.AbstractEntity: void monitor(org.apache.james.mime4j.parser.Event)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void addTagEntry(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.TagTableRow: void setParents(android.widget.TableLayout,com.matburt.mobileorg.Gui.Capture.TagsFragment)>
<com.jcraft.jsch.Util: boolean glob0(byte[],int,byte[],int)> --> <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>
<com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)> --> <com.jcraft.jsch.Util: boolean glob(byte[],int,byte[],int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parse()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parameter()>
<org.apache.james.mime4j.field.ContentTypeField: java.lang.String getMimeType(org.apache.james.mime4j.field.ContentTypeField,org.apache.james.mime4j.field.ContentTypeField)> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getMimeType()>
<com.actionbarsherlock.widget.ActivityChooserModel: com.actionbarsherlock.widget.ActivityChooserModel get(android.content.Context,java.lang.String)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void <init>(android.content.Context,java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.ParseException generateParseException()>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorage: void delete()> --> <org.apache.james.mime4j.storage.Storage: void delete()>
<org.apache.james.mime4j.storage.MultiReferenceStorage: void delete()> --> <org.apache.james.mime4j.storage.Storage: void delete()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorage: void delete()> --> <org.apache.james.mime4j.storage.Storage: void delete()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$8: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: int ordinal()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void remove()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: int ordinal()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment$2: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: int ordinal()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void announceDateModified(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: int ordinal()>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String typeToFormated(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: int ordinal()>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate$1: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: int ordinal()>
<com.actionbarsherlock.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: void <init>(com.actionbarsherlock.widget.ShareActionProvider,com.actionbarsherlock.widget.ShareActionProvider$1)> --> <com.actionbarsherlock.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: void <init>(com.actionbarsherlock.widget.ShareActionProvider)>
<org.json.simple.parser.Yylex: int[] zzUnpackAction()> --> <org.json.simple.parser.Yylex: int zzUnpackAction(java.lang.String,int,int[])>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setup(com.matburt.mobileorg.OrgData.OrgNode,boolean,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.content.ContentResolver)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void applyLevelFormating(com.matburt.mobileorg.Gui.Theme.DefaultTheme,long,android.text.SpannableStringBuilder)>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaActivity: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int minute()>
<com.commonsware.cwac.merge.MergeSpinnerAdapter: void <init>()> --> <com.commonsware.cwac.merge.MergeAdapter: void <init>()>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void showBlockAgenda(int)> --> <com.commonsware.cwac.merge.MergeAdapter: void <init>()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$2: void <clinit>()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE: int ordinal()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard getWizard(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE,com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE: int ordinal()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity$SynchServiceReceiver: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineActivity,com.matburt.mobileorg.Gui.Outline.OutlineActivity$1)>
<org.apache.james.mime4j.field.address.parser.ASTgroup_body: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.ASTgroup_body,java.lang.Object)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: android.view.View createSSHConfig()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard$2: void <init>(com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard)>
<org.apache.http.impl.io.HttpRequestParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.impl.io.HttpResponseParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.impl.io.ChunkedInputStream: int getChunkSize()> --> <org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)> --> <org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.internal.widget.CapitalizingTextView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.DefaultHttpServerConnection: void assertNotOpen()>
<com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment: void <init>(com.matburt.mobileorg.Services.TimeclockDialog,com.matburt.mobileorg.Services.TimeclockDialog$1)> --> <com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment: void <init>(com.matburt.mobileorg.Services.TimeclockDialog)>
<com.matburt.mobileorg.Gui.ViewActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.ViewActivity: android.content.Intent getIntent()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: android.os.Parcelable onSaveInstanceState()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState: void <init>(android.os.Parcelable)>
<org.apache.james.mime4j.parser.MimeTokenStream: int next()> --> <org.apache.james.mime4j.parser.EntityStateMachine: void setRecursionMode(int)>
<org.apache.james.mime4j.parser.MimeTokenStream: void setRecursionMode(int)> --> <org.apache.james.mime4j.parser.EntityStateMachine: void setRecursionMode(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStopStringLiteralDfa_1(int,long)>
<org.apache.james.mime4j.codec.ByteQueue: java.util.Iterator iterator()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: java.util.Iterator iterator()>
<com.jcraft.jsch.Channel$1: void write(int)> --> <com.jcraft.jsch.Channel$1: void write(byte[],int,int)>
<org.apache.http.impl.AbstractHttpClientConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageWriter createRequestWriter(org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void ping_u1_url(java.lang.String)> --> <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<com.dropbox.client2.session.AbstractSession: void setRequestTimeout(org.apache.http.client.methods.HttpUriRequest)> --> <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)> --> <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.apache.http.HttpResponse executeRequest(org.apache.http.client.methods.HttpUriRequest)> --> <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder play(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet,com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void jjCheckNAddStates(int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void jjCheckNAddStates(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void jjCheckNAddTwoStates(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void jjCheckNAdd(int)>
<com.jcraft.jsch.jcraft.HMACMD596: void <init>()> --> <com.jcraft.jsch.jcraft.HMACMD5: void <init>()>
<com.jcraft.jsch.KeyPairDSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenDSA: void init(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getMeasuredWidth()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getMeasuredWidth()>
<com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> --> <com.jcraft.jsch.Packet: int shift(int,int,int)>
<com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: long getLong()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>(23);     default: goto $r1 = $r0.<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int[] jj_la1>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean hasEdits()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: com.matburt.mobileorg.OrgData.OrgNode getEditedNode()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void saveEdits()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: com.matburt.mobileorg.OrgData.OrgNode getEditedNode()>
<org.apache.http.entity.SerializableEntity: void <init>(java.io.Serializable,boolean)> --> <org.apache.http.entity.AbstractHttpEntity: void <init>()>
<org.apache.http.entity.BasicHttpEntity: void <init>()> --> <org.apache.http.entity.AbstractHttpEntity: void <init>()>
<org.apache.http.entity.StringEntity: void <init>(java.lang.String,java.lang.String)> --> <org.apache.http.entity.AbstractHttpEntity: void <init>()>
<org.apache.http.entity.EntityTemplate: void <init>(org.apache.http.entity.ContentProducer)> --> <org.apache.http.entity.AbstractHttpEntity: void <init>()>
<org.apache.http.entity.InputStreamEntity: void <init>(java.io.InputStream,long)> --> <org.apache.http.entity.AbstractHttpEntity: void <init>()>
<org.apache.http.entity.FileEntity: void <init>(java.io.File,java.lang.String)> --> <org.apache.http.entity.AbstractHttpEntity: void <init>()>
<org.apache.http.entity.ByteArrayEntity: void <init>(byte[])> --> <org.apache.http.entity.AbstractHttpEntity: void <init>()>
<org.apache.http.protocol.HttpRequestHandlerRegistry: void register(java.lang.String,org.apache.http.protocol.HttpRequestHandler)> --> <org.apache.http.protocol.UriPatternMatcher: void register(java.lang.String,java.lang.Object)>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.DH: void setF(byte[])>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.DH: void setF(byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.DH: void setF(byte[])>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList pull(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.util.OrgUtils$SortIgnoreCase: void <init>()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateScheduled(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: com.matburt.mobileorg.Gui.Capture.DateTableRow getDateTableRow(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateTimestamp(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: com.matburt.mobileorg.Gui.Capture.DateTableRow getDateTableRow(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void addDateDeadline(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: com.matburt.mobileorg.Gui.Capture.DateTableRow getDateTableRow(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: android.view.View createSSHConfig()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard$1: void <init>(com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setTitleCondensed(java.lang.CharSequence)>
<com.jcraft.jsch.ChannelDirectTCPIP: void <init>()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void setLocalPacketSize(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void start(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void startAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener: void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.matburt.mobileorg.OrgData.OrgProvider: com.matburt.mobileorg.util.SelectionBuilder buildSelectionFromUri(android.net.Uri)> --> <com.matburt.mobileorg.util.SelectionBuilder: com.matburt.mobileorg.util.SelectionBuilder table(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: com.matburt.mobileorg.util.SelectionBuilder getQuery(android.content.Context)> --> <com.matburt.mobileorg.util.SelectionBuilder: com.matburt.mobileorg.util.SelectionBuilder table(java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.ParseException generateParseException()> --> <org.apache.james.mime4j.field.datetime.parser.ParseException: void <init>(org.apache.james.mime4j.field.datetime.parser.Token,int[][],java.lang.String[])>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void connect()> --> <com.jcraft.jsch.JSch: void addIdentity(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> --> <com.actionbarsherlock.app.ActionBar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.DH: void setP(byte[])>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.DH: void setP(byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.DH: void setP(byte[])>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date: java.lang.String getYear()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: void <init>(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: void <init>(float,float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: void <init>(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: void <init>(float,java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: void <init>(float,int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: void <init>()>
<org.apache.james.mime4j.message.Message: void setFrom(org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.message.Message: void setMailboxList(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)>
<oauth.signpost.signature.AuthorizationHeaderSigningStrategy: java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpParameters: java.lang.String getAsHeaderElement(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void <init>()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void initProgress()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa2_0(long,long)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char BeginToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa1_0(long)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()>
<com.dropbox.client2.DropboxAPI$CreatedCopyRef: com.dropbox.client2.DropboxAPI$CreatedCopyRef extractFromJson(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.String expectString()>
<com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor: com.dropbox.client2.DropboxAPI$DeltaEntry extract(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.String expectString()>
<com.dropbox.client2.DropboxAPI$DeltaPage: com.dropbox.client2.DropboxAPI$DeltaPage extractFromJson(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.String expectString()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe clone()>
<org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void ReInit(org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void ReInitRounds()>
<com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState$1: java.lang.Object[] newArray(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState$1: com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState[] newArray(int)>
<com.actionbarsherlock.widget.ShareActionProvider: void <init>(android.content.Context)> --> <com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: void <init>(com.actionbarsherlock.widget.ShareActionProvider,com.actionbarsherlock.widget.ShareActionProvider$1)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void setModifable(boolean)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onPayloadStartedEdit()> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void setModifable(boolean)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onPayloadEndedEdit()> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void setModifable(boolean)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void run()>
<com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>
<com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>
<com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])> --> <com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void getAndParseFile(com.matburt.mobileorg.OrgData.OrgFile,com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void decryptAndParseFile(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: java.lang.String getChangesString()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: int getChangesCount(android.content.ContentResolver)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)> --> <org.apache.james.mime4j.codec.EncoderUtil: char hexDigit(int)>
<com.jcraft.jsch.Channel: void sendSignal(java.lang.String)> --> <com.jcraft.jsch.RequestSignal: void <init>()>
<com.matburt.mobileorg.OrgData.OrgFile: boolean doesFileExist(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$Files: android.net.Uri buildFilenameUri(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pushCaptures()> --> <com.matburt.mobileorg.OrgData.OrgContract$Files: android.net.Uri buildFilenameUri(java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxField mailbox0(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField mailboxList0(java.lang.String,java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.UnstructuredField subject(java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentTypeField contentType(java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentTransferEncodingField contentTransferEncoding(java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.DateTimeField date0(java.lang.String,java.util.Date,java.util.TimeZone)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentTypeField contentType(java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field messageId(java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void <init>()> --> <com.matburt.mobileorg.Gui.Agenda.AgendaFragment$1: void <init>(com.matburt.mobileorg.Gui.Agenda.AgendaFragment)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: int getPositionForView(android.view.View)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getChildCount()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: int getLastVisiblePosition()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getChildCount()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void rememberSyncState()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getChildCount()>
<org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.HeaderElement: java.lang.String getName()>
<com.dropbox.client2.session.AbstractSession$4: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HeaderElement: java.lang.String getName()>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateHeaderElementLen(org.apache.http.HeaderElement)> --> <org.apache.http.HeaderElement: java.lang.String getName()>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)> --> <org.apache.http.HeaderElement: java.lang.String getName()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.HeaderElement: java.lang.String getName()>
<org.apache.http.message.BasicHeaderElementIterator: void parseNextElement()> --> <org.apache.http.HeaderElement: java.lang.String getName()>
<com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy: long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HeaderElement: java.lang.String getName()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader,android.content.Context)> --> <com.matburt.mobileorg.util.PreferenceUtils: java.util.HashSet getExcludedTags()>
<org.apache.http.entity.mime.HttpMultipart: void writeTo(java.io.OutputStream)> --> <org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)>
<org.apache.http.entity.mime.HttpMultipart: long getTotalLength()> --> <org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)>
<org.apache.james.mime4j.field.ContentDispositionField: void parse()> --> <org.apache.james.mime4j.field.ContentDispositionField: java.lang.String getBody()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void ReInit(org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void ReInitRounds()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void close(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupValue(java.lang.Object,com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupGetter(java.lang.Class)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupGetter(java.lang.Class)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxList()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void setDirectoryBrowser(com.matburt.mobileorg.Gui.Wizard.DirectoryBrowser)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void setDirectoryBrowser(com.matburt.mobileorg.Gui.Wizard.DirectoryBrowser)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: android.view.View createSDcardFolderSelector()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void setDirectoryBrowser(com.matburt.mobileorg.Gui.Wizard.DirectoryBrowser)>
<com.actionbarsherlock.app.SherlockListFragment: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockListFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.widget.IcsSpinner$SpinnerPopup: boolean isShowing()>
<com.actionbarsherlock.internal.widget.IcsSpinner: boolean performClick()> --> <com.actionbarsherlock.internal.widget.IcsSpinner$SpinnerPopup: boolean isShowing()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void setItemLimit(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void setItemLimit(int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void setItemLimit(int)>
<com.matburt.mobileorg.Gui.Agenda.AgendasActivity: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.ActionBar: void setTitle(java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void refresh()> --> <com.actionbarsherlock.app.ActionBar: void setTitle(java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void refreshTitle()> --> <com.actionbarsherlock.app.ActionBar: void setTitle(java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void showBlockAgenda(int)> --> <com.actionbarsherlock.app.ActionBar: void setTitle(java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.SearchActivity: void doSearch(java.lang.String)> --> <com.actionbarsherlock.app.ActionBar: void setTitle(java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.ViewActivity: void viewNode(int)> --> <com.actionbarsherlock.app.ActionBar: void setTitle(java.lang.CharSequence)>
<com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.KeyExchange: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>
<com.jcraft.jsch.Session: boolean checkKex(com.jcraft.jsch.Session,java.lang.String)> --> <com.jcraft.jsch.KeyExchange: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])>
<org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeQ(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeBaseQuotedPrintable(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onAttach(android.app.Activity)> --> <com.actionbarsherlock.app.SherlockFragment: void onAttach(android.app.Activity)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void checkSelectionChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void selectionChanged()>
<org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.LineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()> --> <org.apache.james.mime4j.io.LineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)>
<org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParsedField parse(org.apache.james.mime4j.util.ByteSequence,java.lang.String)> --> <org.apache.james.mime4j.util.MimeUtil: java.lang.String unfold(java.lang.String)>
<org.apache.james.mime4j.util.MimeUtil: java.util.Map getHeaderParams(java.lang.String)> --> <org.apache.james.mime4j.util.MimeUtil: java.lang.String unfold(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void updateEmptyStatus(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void onLayout(boolean,int,int,int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStopStringLiteralDfa_2(int,long)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void handleTrustRelationship(android.content.Context)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer$1: void <init>(com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setAdapter(android.widget.Adapter)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setAdapter(android.widget.SpinnerAdapter)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDropdownAdapter(android.widget.SpinnerAdapter)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setAdapter(android.widget.SpinnerAdapter)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setAdapter(android.widget.SpinnerAdapter)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void performCollapse()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setAdapter(android.widget.SpinnerAdapter)>
<org.apache.http.entity.mime.MultipartEntity: boolean isStreaming()> --> <org.apache.http.entity.mime.MultipartEntity: boolean isRepeatable()>
<org.apache.http.entity.mime.MultipartEntity: boolean isChunked()> --> <org.apache.http.entity.mime.MultipartEntity: boolean isRepeatable()>
<com.matburt.mobileorg.Gui.Capture.TagTableRow: void access$000(com.matburt.mobileorg.Gui.Capture.TagTableRow)> --> <com.matburt.mobileorg.Gui.Capture.TagTableRow: void remove()>
<com.matburt.mobileorg.util.FileUtils: java.lang.String read()> --> <com.matburt.mobileorg.util.FileUtils: java.lang.String read(java.io.BufferedReader)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void decryptAndParseFile(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader)> --> <com.matburt.mobileorg.util.FileUtils: java.lang.String read(java.io.BufferedReader)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pushCaptures()> --> <com.matburt.mobileorg.util.FileUtils: java.lang.String read(java.io.BufferedReader)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseChecksumFile()> --> <com.matburt.mobileorg.util.FileUtils: java.lang.String read(java.io.BufferedReader)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseIndexFile()> --> <com.matburt.mobileorg.util.FileUtils: java.lang.String read(java.io.BufferedReader)>
<com.matburt.mobileorg.Settings.SettingsActivity: void <init>()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: void <init>()>
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)> --> <org.apache.http.io.SessionOutputBuffer: void write(byte[],int,int)>
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)> --> <org.apache.http.io.SessionOutputBuffer: void write(byte[],int,int)>
<org.apache.http.impl.io.ChunkedOutputStream: void flushCache()> --> <org.apache.http.io.SessionOutputBuffer: void write(byte[],int,int)>
<org.apache.http.impl.io.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)> --> <org.apache.http.io.SessionOutputBuffer: void write(byte[],int,int)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>
<org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>
<org.apache.http.protocol.DefaultedHttpContext: void setAttribute(java.lang.String,java.lang.Object)> --> <org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>
<org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void announceProgressUpdate(int,java.lang.String)> --> <com.matburt.mobileorg.util.OrgUtils: void announceSyncUpdateProgress(int,android.content.Context)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStopAtPos(int,int)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: void onDestroyActionMode(android.view.ActionMode)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper access$000(com.actionbarsherlock.internal.ActionBarSherlockNative)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper access$000(com.actionbarsherlock.internal.ActionBarSherlockNative)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper access$000(com.actionbarsherlock.internal.ActionBarSherlockNative)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper access$000(com.actionbarsherlock.internal.ActionBarSherlockNative)>
<com.matburt.mobileorg.Services.TimeclockService: void onCreate()> --> <com.matburt.mobileorg.Services.TimeclockService: java.lang.Object getSystemService(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: com.matburt.mobileorg.OrgData.OrgNode getEditedNode()> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: java.lang.String getTags()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: java.lang.String getTags()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean dispatchSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void setForceShowIcon(boolean)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onDismiss()> --> <com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void notifyOnDismissListener()>
<com.actionbarsherlock.internal.ActionBarSherlockNative: com.actionbarsherlock.app.ActionBar getActionBar()> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: void initActionBar()>
<com.actionbarsherlock.internal.ActionBarSherlockNative: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: void initActionBar()>
<com.actionbarsherlock.internal.ActionBarSherlockNative: void setContentView(int)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: void initActionBar()>
<com.actionbarsherlock.internal.ActionBarSherlockNative: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: void initActionBar()>
<com.dropbox.client2.jsonextract.JsonMap$WrappedEntry: void <init>(java.lang.String,java.util.Map$Entry)> --> <com.dropbox.client2.jsonextract.JsonMap: java.lang.String access$100(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void measure(int,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void measure(int,int)>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>
<com.jcraft.jsch.jce.HMACMD596: void init(byte[])> --> <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>
<com.jcraft.jsch.jce.HMACMD5: void init(byte[])> --> <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>
<com.jcraft.jsch.jce.HMACSHA1: void init(byte[])> --> <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>
<com.jcraft.jsch.jce.HMACSHA196: void init(byte[])> --> <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>
<com.matburt.mobileorg.Settings.SettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.SettingsActivity: void addPreferencesFromResource(int)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$1: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parseHeading(java.lang.String,int)> --> <com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: void pop()>
<org.apache.james.mime4j.codec.CodecUtil: void encodeQuotedPrintableBinary(java.io.InputStream,java.io.OutputStream)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void <init>(int,boolean)>
<org.apache.james.mime4j.codec.CodecUtil: void encodeQuotedPrintable(java.io.InputStream,java.io.OutputStream)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void <init>(int,boolean)>
<org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void <init>(java.io.OutputStream,boolean)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void <init>(int,boolean)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void run()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: boolean onContextItemSelected(android.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void removeAgendaBlockEntry(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStopStringLiteralDfa_3(int,long)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: java.lang.String doParse()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: org.apache.james.mime4j.field.structured.parser.Token jj_consume_token(int)>
<com.actionbarsherlock.internal.widget.AbsActionBarView$1: void start()> --> <com.actionbarsherlock.internal.widget.AbsActionBarView$1: void run()>
<org.json.simple.parser.Yylex: void <init>(java.io.InputStream)> --> <org.json.simple.parser.Yylex: void <init>(java.io.Reader)>
<org.json.simple.parser.JSONParser: void <init>()> --> <org.json.simple.parser.Yylex: void <init>(java.io.Reader)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerEdit: boolean hasEdits(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList generateApplyEditNodes(com.matburt.mobileorg.OrgData.OrgNode,android.content.ContentResolver)>
<org.apache.http.message.BasicHeaderValueFormatter: void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean)> --> <org.apache.http.message.BasicHeaderValueFormatter: boolean isUnsafe(char)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: java.lang.String getDirectory(int)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeIfNecessary(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int)> --> <org.apache.james.mime4j.codec.EncoderUtil: boolean hasToBeEncoded(java.lang.String,int)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeAddressDisplayName(java.lang.String)> --> <org.apache.james.mime4j.codec.EncoderUtil: boolean hasToBeEncoded(java.lang.String,int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState: android.os.Parcelable getSuperState()>
<com.jcraft.jsch.jgss.GSSContextKrb5: byte[] getMIC(byte[],int,int)> --> <org.ietf.jgss.MessageProp: void <init>(int,boolean)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> --> <com.jcraft.jsch.KnownHosts: void sync()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void <init>(java.lang.Object,java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void <init>(java.lang.Object,java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator,java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void <init>(java.lang.Object,java.lang.String)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void <init>(android.content.Context,com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void setLocale()>
<com.matburt.mobileorg.Gui.Capture.TagTableRow: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Capture.TagTableRow$1: void <init>(com.matburt.mobileorg.Gui.Capture.TagTableRow)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(int,com.jcraft.jsch.Session)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void <init>(org.apache.james.mime4j.field.language.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void <init>(org.apache.james.mime4j.field.language.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void <init>(org.apache.james.mime4j.field.language.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void <init>(org.apache.james.mime4j.field.language.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: java.lang.String doParse()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: int jj_ntk()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTaddress parseAddress()> --> <org.apache.james.mime4j.field.address.parser.TokenMgrError: java.lang.String getMessage()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTmailbox parseMailbox()> --> <org.apache.james.mime4j.field.address.parser.TokenMgrError: java.lang.String getMessage()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTaddress_list parseAddressList()> --> <org.apache.james.mime4j.field.address.parser.TokenMgrError: java.lang.String getMessage()>
<com.jcraft.jsch.SftpATTRS: java.lang.String toString()> --> <com.jcraft.jsch.SftpATTRS: int getUId()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void ensureTabsExist()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void ensureTabsExist()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void ensureTabsExist()>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String)> --> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void removeTabAt(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: void select()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void cleanupTabs()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setSelectedNavigationItem(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)>
<org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.lang.String)> --> <org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.nio.charset.Charset,java.lang.String)>
<com.matburt.mobileorg.Gui.SearchActivity: void handleIntent(android.content.Intent)> --> <com.matburt.mobileorg.Gui.SearchActivity: void doSearch(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.AgendasActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasActivity: void setContentView(int)>
<org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)> --> <org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void doCancel()> --> <com.matburt.mobileorg.Gui.Capture.EditActivity$2: void <init>(com.matburt.mobileorg.Gui.Capture.EditActivity)>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: boolean verify(byte[])>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: boolean verify(byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: boolean verify(byte[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void start(boolean)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void reverse()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void start(boolean)>
<com.jcraft.jsch.ChannelSftp: void sendOPENW(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)>
<com.jcraft.jsch.ChannelSftp: void sendOPENR(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)>
<com.jcraft.jsch.ChannelSftp: void sendOPENA(byte[])> --> <com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)>
<org.apache.james.mime4j.field.MailboxListField: org.apache.james.mime4j.field.address.MailboxList getMailboxList()> --> <org.apache.james.mime4j.field.MailboxListField: void parse()>
<org.apache.james.mime4j.field.MailboxListField: org.apache.james.mime4j.field.address.parser.ParseException getParseException()> --> <org.apache.james.mime4j.field.MailboxListField: void parse()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setShowAsActionFlags(int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setShowAsAction(int)>
<oauth.signpost.commonshttp.CommonsHttpOAuthProvider: void <init>(java.lang.String,java.lang.String,java.lang.String)> --> <oauth.signpost.AbstractOAuthProvider: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<oauth.signpost.commonshttp.CommonsHttpOAuthProvider: void <init>(java.lang.String,java.lang.String,java.lang.String,org.apache.http.client.HttpClient)> --> <oauth.signpost.AbstractOAuthProvider: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<oauth.signpost.basic.DefaultOAuthProvider: void <init>(java.lang.String,java.lang.String,java.lang.String)> --> <oauth.signpost.AbstractOAuthProvider: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink media(java.lang.String,boolean)> --> <com.dropbox.client2.DropboxAPI$DropboxLink: void <init>(java.util.Map,boolean,com.dropbox.client2.DropboxAPI$1)>
<org.apache.james.mime4j.message.MessageWriter: void writeHeader(org.apache.james.mime4j.message.Header,java.io.OutputStream)> --> <org.apache.james.mime4j.message.MessageWriter: void writeBytes(org.apache.james.mime4j.util.ByteSequence,java.io.OutputStream)>
<org.apache.james.mime4j.message.MessageWriter: void writeMultipart(org.apache.james.mime4j.message.Multipart,java.io.OutputStream)> --> <org.apache.james.mime4j.message.MessageWriter: void writeBytes(org.apache.james.mime4j.util.ByteSequence,java.io.OutputStream)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: void setGroupCheckable(int,boolean,boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.internal.view.menu.ActionMenuItem setExclusiveCheckable(boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.address.parser.Token)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <init>(java.io.InputStream)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void show()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_0()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.matburt.mobileorg.OrgData.OrgFile: void write(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: long updateFile(android.content.ContentResolver)>
<com.jcraft.jsch.jce.DH: byte[] getK()> --> <javax.crypto.spec.DHPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseMimeVersion(java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void <init>(java.io.Reader)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void <init>(android.app.Dialog)> --> <com.actionbarsherlock.app.ActionBar: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarWrapper: void <init>(android.app.Activity)> --> <com.actionbarsherlock.app.ActionBar: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void <init>(android.app.Activity,int)> --> <com.actionbarsherlock.app.ActionBar: void <init>()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView createTabView(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void setOnClickListener(android.view.View$OnClickListener)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void setExitStatus(int)>
<oauth.signpost.signature.OAuthMessageSigner: void readObject(java.io.ObjectInputStream)> --> <org.apache.commons.codec.binary.Base64: void <init>()>
<oauth.signpost.signature.OAuthMessageSigner: void <init>()> --> <org.apache.commons.codec.binary.Base64: void <init>()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void initIndeterminateProgress()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: android.content.Context getContext()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: void <init>(com.actionbarsherlock.internal.ActionBarSherlockCompat,com.actionbarsherlock.view.ActionMode$Callback)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStopAtPos(int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofInt(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofInt(float)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry access$100(com.dropbox.client2.DropboxAPI,java.lang.String,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry commitChunkedUpload(java.lang.String,java.lang.String,boolean,java.lang.String)>
<org.apache.james.mime4j.message.Message: void setBcc(java.util.Collection)> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,java.util.Collection)>
<org.apache.james.mime4j.message.Message: void setTo(java.util.Collection)> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,java.util.Collection)>
<org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,org.apache.james.mime4j.field.address.Address)> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,java.util.Collection)>
<org.apache.james.mime4j.message.Message: void setCc(java.util.Collection)> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,java.util.Collection)>
<org.apache.james.mime4j.message.Message: void setReplyTo(java.util.Collection)> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,java.util.Collection)>
<org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,org.apache.james.mime4j.field.address.Address[])> --> <org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,java.util.Collection)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelSftp: void sendINIT()> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Session getSession()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploadRequest chunkedUploadRequest(java.io.InputStream,long,com.dropbox.client2.ProgressListener,long,java.lang.String)> --> <com.dropbox.client2.DropboxAPI$ChunkedUploadRequest: void <init>(org.apache.http.client.methods.HttpUriRequest,com.dropbox.client2.session.Session)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasureExactFormat(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getPaddingBottom()>
<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getHeaders(java.lang.String)> --> <org.apache.http.Header: java.lang.String getName()>
<org.apache.http.message.HeaderGroup: org.apache.http.Header getLastHeader(java.lang.String)> --> <org.apache.http.Header: java.lang.String getName()>
<org.apache.http.message.BasicLineFormatter: void doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)> --> <org.apache.http.Header: java.lang.String getName()>
<org.apache.http.message.BasicHeaderIterator: boolean filterHeader(int)> --> <org.apache.http.Header: java.lang.String getName()>
<org.apache.http.message.HeaderGroup: boolean containsHeader(java.lang.String)> --> <org.apache.http.Header: java.lang.String getName()>
<org.apache.http.message.HeaderGroup: void updateHeader(org.apache.http.Header)> --> <org.apache.http.Header: java.lang.String getName()>
<org.apache.http.message.AbstractHttpMessage: void removeHeaders(java.lang.String)> --> <org.apache.http.Header: java.lang.String getName()>
<org.apache.http.message.HeaderGroup: org.apache.http.Header getFirstHeader(java.lang.String)> --> <org.apache.http.Header: java.lang.String getName()>
<oauth.signpost.commonshttp.HttpRequestAdapter: java.util.Map getAllHeaders()> --> <org.apache.http.Header: java.lang.String getName()>
<org.apache.http.message.BasicListHeaderIterator: boolean filterHeader(int)> --> <org.apache.http.Header: java.lang.String getName()>
<com.actionbarsherlock.internal.view.ActionProviderWrapper: boolean onPerformDefaultAction()> --> <com.actionbarsherlock.view.ActionProvider: boolean onPerformDefaultAction()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()> --> <com.actionbarsherlock.view.ActionProvider: boolean onPerformDefaultAction()>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncFiles(java.lang.String[])> --> <com.matburt.mobileorg.Services.CalendarSyncService: void syncFile(java.lang.String)>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncFiles()> --> <com.matburt.mobileorg.Services.CalendarSyncService: void syncFile(java.lang.String)>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void populatePushbackQueue()> --> <org.apache.james.mime4j.codec.ByteQueue: void clear()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.view.View getActionView()> --> <com.actionbarsherlock.view.ActionProvider: android.view.View onCreateActionView()>
<com.actionbarsherlock.internal.view.ActionProviderWrapper: android.view.View onCreateActionView()> --> <com.actionbarsherlock.view.ActionProvider: android.view.View onCreateActionView()>
<com.actionbarsherlock.app.SherlockFragmentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<com.actionbarsherlock.app.SherlockListActivity: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<com.actionbarsherlock.app.SherlockActivity: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)>
<org.apache.http.entity.mime.HttpMultipartMode: void <clinit>()> --> <org.apache.http.entity.mime.HttpMultipartMode: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void MoreLexicalActions()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void setLocalWindowSize(int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings$1: void <init>(com.matburt.mobileorg.Gui.Agenda.AgendaSettings)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState$1: java.lang.Object createFromParcel(android.os.Parcel)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState$1: com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState createFromParcel(android.os.Parcel)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setActionView(int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setActionView(android.view.View)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void handleDataChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int lookForSelectablePosition(int,boolean)>
<org.apache.james.mime4j.message.Header$1: void <init>(org.apache.james.mime4j.message.Header,org.apache.james.mime4j.parser.MimeStreamParser)> --> <org.apache.james.mime4j.parser.AbstractContentHandler: void <init>()>
<org.apache.james.mime4j.message.SimpleContentHandler: void <init>()> --> <org.apache.james.mime4j.parser.AbstractContentHandler: void <init>()>
<com.matburt.mobileorg.Settings.SettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.SettingsActivity: void populateCalendarNames()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.http.HttpResponse: java.io.InputStream getContent()>
<oauth.signpost.AbstractOAuthProvider: void handleUnexpectedResponse(int,oauth.signpost.http.HttpResponse)> --> <oauth.signpost.http.HttpResponse: java.io.InputStream getContent()>
<com.matburt.mobileorg.OrgData.OrgProvider: com.matburt.mobileorg.util.SelectionBuilder buildSelectionFromUri(android.net.Uri)> --> <com.matburt.mobileorg.OrgData.OrgContract$Edits: java.lang.String getId(android.net.Uri)>
<com.matburt.mobileorg.OrgData.OrgEdit: long write(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$Edits: java.lang.String getId(android.net.Uri)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawVerticalDivider(android.graphics.Canvas,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getPaddingTop()>
<com.dropbox.client2.jsonextract.JsonMap$WrappedEntry: void <init>(java.lang.String,java.util.Map$Entry,com.dropbox.client2.jsonextract.JsonMap$1)> --> <com.dropbox.client2.jsonextract.JsonMap$WrappedEntry: void <init>(java.lang.String,java.util.Map$Entry)>
<org.apache.james.mime4j.storage.TempFileStorageProvider: void <init>()> --> <org.apache.james.mime4j.storage.TempFileStorageProvider: void <init>(java.lang.String,java.lang.String,java.io.File)>
<org.apache.james.mime4j.storage.TempFileStorageProvider: void <init>(java.io.File)> --> <org.apache.james.mime4j.storage.TempFileStorageProvider: void <init>(java.lang.String,java.lang.String,java.io.File)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: void sendOPENA(byte[])>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: void sendOPENA(byte[])>
<oauth.signpost.OAuth: oauth.signpost.http.HttpParameters decodeForm(java.io.InputStream)> --> <oauth.signpost.OAuth: oauth.signpost.http.HttpParameters decodeForm(java.lang.String)>
<oauth.signpost.AbstractOAuthConsumer: void collectQueryParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.OAuth: oauth.signpost.http.HttpParameters decodeForm(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void measureChild(android.view.View,int,int)>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <org.json.simple.parser.JSONParser: void <init>()>
<org.json.simple.JSONValue: java.lang.Object parse(java.io.Reader)> --> <org.json.simple.parser.JSONParser: void <init>()>
<org.json.simple.JSONValue: java.lang.Object parseWithException(java.lang.String)> --> <org.json.simple.parser.JSONParser: void <init>()>
<org.json.simple.JSONValue: java.lang.Object parseWithException(java.io.Reader)> --> <org.json.simple.parser.JSONParser: void <init>()>
<org.apache.http.impl.io.ChunkedOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer)> --> <org.apache.http.impl.io.ChunkedOutputStream: void <init>(org.apache.http.io.SessionOutputBuffer,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder after(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder after(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_0(int,int)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void setShowDividers(int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void requestLayout()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void setDividerDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void requestLayout()>
<org.apache.http.impl.SocketHttpServerConnection: void setSocketTimeout(int)> --> <org.apache.http.impl.SocketHttpServerConnection: void assertOpen()>
<com.matburt.mobileorg.Gui.FileDecryptionActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.FileDecryptionActivity: void startActivityForResult(android.content.Intent,int)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpClientConnection: void flush()>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: long[] getNodes(android.database.sqlite.SQLiteDatabase,android.content.Context)> --> <com.matburt.mobileorg.util.SelectionBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> --> <com.matburt.mobileorg.util.SelectionBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: float getFloatValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: float getFraction()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: float getFraction()>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String applyFormating(java.lang.String)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String getFormatingRegex(java.lang.String,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTaddress parseAddress()> --> <org.apache.james.mime4j.field.address.parser.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTmailbox parseMailbox()> --> <org.apache.james.mime4j.field.address.parser.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()> --> <org.apache.james.mime4j.field.address.parser.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTaddress_list parseAddressList()> --> <org.apache.james.mime4j.field.address.parser.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void local_part()> --> <org.apache.james.mime4j.field.address.parser.ParseException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.ASTmailbox: void <init>(int)>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.IdentityFile: boolean decrypt_dss()> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.Buffer: byte[] getString()> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.Buffer: long getLong()> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.Buffer: byte[] getMPInt()> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.Buffer: byte[] getMPIntBits()> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.IdentityFile: boolean decrypt_rsa()> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.Buffer: byte[] getString(int[],int[])> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.Buffer: int getInt()>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setEnabled(boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.IcsSpinner: int getBaseline()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.view.View getChildAt(int)>
<com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)> --> <com.jcraft.jsch.Util: byte val(byte)>
<com.matburt.mobileorg.OrgData.OrgEdit: long write(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: java.lang.String getType()>
<com.matburt.mobileorg.OrgData.OrgEdit: java.lang.String toString()> --> <com.matburt.mobileorg.OrgData.OrgEdit: java.lang.String getType()>
<org.apache.http.impl.io.HttpResponseParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.StatusLine,org.apache.http.protocol.HttpContext)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: int jj_ntk()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.Token getToken(int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void ReInit(org.apache.james.mime4j.field.structured.parser.SimpleCharStream)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void ReInitRounds()>
<com.dropbox.client2.DropboxAPI$ChunkedUploader: void upload()> --> <com.dropbox.client2.DropboxAPI$ChunkedUploader: void upload(com.dropbox.client2.ProgressListener)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.Gui.Capture.EditActivityController getController(android.content.Intent,android.content.ContentResolver,java.lang.String)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void UpdateLineColumn(char)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setForceShowIcon(boolean)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void FillBuff()>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Date getReadDate()> --> <org.apache.james.mime4j.field.ContentDispositionField: java.util.Date parseDate(java.lang.String)>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Date getModificationDate()> --> <org.apache.james.mime4j.field.ContentDispositionField: java.util.Date parseDate(java.lang.String)>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Date getCreationDate()> --> <org.apache.james.mime4j.field.ContentDispositionField: java.util.Date parseDate(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$SpinnerPopup: void setAdapter(android.widget.ListAdapter)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setAdapter(android.widget.SpinnerAdapter)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$SpinnerPopup: void setAdapter(android.widget.ListAdapter)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void setPayload(java.lang.String)>
<org.apache.james.mime4j.field.address.Builder$ChildNodeIterator: org.apache.james.mime4j.field.address.parser.Node next()> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: org.apache.james.mime4j.field.address.parser.Node jjtGetChild(int)>
<com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.widget.ShareActionProvider: java.lang.String access$200(com.actionbarsherlock.widget.ShareActionProvider)>
<org.apache.james.mime4j.util.MimeUtil: void <clinit>()> --> <org.apache.james.mime4j.util.MimeUtil$1: void <init>()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$6: void onDateSet(android.widget.DatePicker,int,int,int)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void access$600(com.matburt.mobileorg.Gui.Capture.DateTableRow,int,int,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setNewTodo(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void generateApplyWriteEdits(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerEdit: void saveEdits(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: void generateApplyWriteEdits(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)>
<org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream,org.apache.james.mime4j.parser.MimeEntityConfig,org.apache.james.mime4j.storage.StorageProvider)> --> <org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)>
<org.apache.james.mime4j.message.Header: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()> --> <org.apache.http.impl.entity.EntityDeserializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()> --> <org.apache.http.impl.entity.EntityDeserializer: void <init>(org.apache.http.entity.ContentLengthStrategy)>
<com.dropbox.client2.jsonextract.JsonMap: boolean isIdentLike(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonMap: boolean isEnglishDigit(char)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setAdapter(android.widget.SpinnerAdapter)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void checkFocus()>
<org.apache.http.protocol.HttpService: void <init>(org.apache.http.protocol.HttpProcessor,org.apache.http.ConnectionReuseStrategy,org.apache.http.HttpResponseFactory)> --> <org.apache.http.protocol.HttpService: void setHttpProcessor(org.apache.http.protocol.HttpProcessor)>
<com.jcraft.jsch.jgss.GSSContextKrb5: void dispose()> --> <org.ietf.jgss.GSSContext: void dispose()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.view.ActionMode: void finish()>
<com.actionbarsherlock.internal.widget.ActionBarContextView$1: void onClick(android.view.View)> --> <com.actionbarsherlock.view.ActionMode: void finish()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.ActionMode: void finish()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.view.ActionMode: void finish()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.view.ActionMode: void finish()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void checkCloseActionMenu(com.actionbarsherlock.view.Menu)>
<org.apache.james.mime4j.field.address.parser.SimpleNode: void dump(java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void dump(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void refresh()> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: com.actionbarsherlock.app.ActionBar getSupportActionBar()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean performExpand()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getSelectedItemPosition()>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getSelectedItemPosition()>
<com.actionbarsherlock.internal.widget.IcsSpinner: int measureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getSelectedItemPosition()>
<com.actionbarsherlock.internal.widget.ActionBarView: int getDropdownSelectedPosition()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getSelectedItemPosition()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean isOverflowMenuShowing()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: boolean isShowing()>
<com.jcraft.jsch.Session: void send_newkeys()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Channel: void close()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Channel: void eof()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Channel: void sendOpenConfirmation()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Channel: void sendOpenFailure(int)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Session: void sendIgnore()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Session: void sendKeepAliveMsg()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void setSplitActionBar(boolean)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void setSplitActionBar(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void setSplitActionBar(boolean)>
<com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable: void start()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable: void run()>
<org.apache.http.impl.io.HttpResponseWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.AbstractMessageWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>
<org.apache.http.impl.io.HttpRequestWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.AbstractMessageWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean access$1300()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void resetList()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void removeAllViewsInLayout()>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean eof()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void access$400(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxFileInfo getFile(java.lang.String,java.lang.String,java.io.OutputStream,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter: java.lang.String getCheckedDirectory()> --> <com.matburt.mobileorg.Gui.Wizard.DirectoryBrowser: java.lang.String getAbsolutePath(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: int getEndColumn()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: int getEndColumn()>
<org.apache.james.mime4j.field.mimeversion.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.mimeversion.parser.ParseException: java.lang.String add_escapes(java.lang.String)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.IcsSpinner createSpinner()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.matburt.mobileorg.Gui.ViewActivity: void onStart()> --> <com.matburt.mobileorg.Gui.ViewActivity: void viewNode(int)>
<com.matburt.mobileorg.Gui.ViewActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.ViewActivity: void viewNode(int)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()> --> <org.apache.james.mime4j.parser.MimeEntity: void <init>(org.apache.james.mime4j.io.LineNumberSource,org.apache.james.mime4j.io.BufferedLineReaderInputStream,org.apache.james.mime4j.descriptor.BodyDescriptor,int,int,org.apache.james.mime4j.parser.MimeEntityConfig)>
<org.apache.james.mime4j.parser.MimeTokenStream: void doParse(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.parser.MimeEntity: void <init>(org.apache.james.mime4j.io.LineNumberSource,org.apache.james.mime4j.io.BufferedLineReaderInputStream,org.apache.james.mime4j.descriptor.BodyDescriptor,int,int,org.apache.james.mime4j.parser.MimeEntityConfig)>
<org.apache.james.mime4j.parser.MimeEntity: void <init>(org.apache.james.mime4j.io.LineNumberSource,org.apache.james.mime4j.io.BufferedLineReaderInputStream,org.apache.james.mime4j.descriptor.BodyDescriptor,int,int)> --> <org.apache.james.mime4j.parser.MimeEntity: void <init>(org.apache.james.mime4j.io.LineNumberSource,org.apache.james.mime4j.io.BufferedLineReaderInputStream,org.apache.james.mime4j.descriptor.BodyDescriptor,int,int,org.apache.james.mime4j.parser.MimeEntityConfig)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMimeEntity()> --> <org.apache.james.mime4j.parser.MimeEntity: void <init>(org.apache.james.mime4j.io.LineNumberSource,org.apache.james.mime4j.io.BufferedLineReaderInputStream,org.apache.james.mime4j.descriptor.BodyDescriptor,int,int,org.apache.james.mime4j.parser.MimeEntityConfig)>
<com.jcraft.jsch.ChannelDirectTCPIP: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void disconnect()>
<com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestEnv: void write(com.jcraft.jsch.Packet)>
<org.apache.james.mime4j.field.DefaultFieldParser: void <init>()> --> <org.apache.james.mime4j.field.DefaultFieldParser: void setFieldParser(java.lang.String,org.apache.james.mime4j.field.FieldParser)>
<org.apache.james.mime4j.field.datetime.DateTime: java.lang.String toString()> --> <org.apache.james.mime4j.field.datetime.DateTime: int getMonth()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildNameAddr(org.apache.james.mime4j.field.address.parser.ASTname_addr)> --> <org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Address buildAddress(org.apache.james.mime4j.field.address.parser.ASTaddress)> --> <org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void access$100(com.matburt.mobileorg.Gui.Capture.LocationEntry)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: void promptForNewFile()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void <init>()> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment$1: void <init>(com.matburt.mobileorg.Gui.Agenda.AgendasFragment)>
<com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> --> <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>
<com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>
<com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>
<com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>
<com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa0_0()>
<oauth.signpost.AbstractOAuthProvider: java.lang.String retrieveRequestToken(oauth.signpost.OAuthConsumer,java.lang.String)> --> <oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])>
<oauth.signpost.AbstractOAuthProvider: void retrieveAccessToken(oauth.signpost.OAuthConsumer,java.lang.String)> --> <oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: void <init>(com.actionbarsherlock.internal.view.menu.MenuPopupHelper,com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: void findExpandedIndex()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$ExpandedIndexObserver: void onChanged()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: void findExpandedIndex()>
<com.matburt.mobileorg.Services.SyncService: void runSynchronizer()> --> <com.matburt.mobileorg.Services.SyncService: android.content.ContentResolver getContentResolver()>
<org.apache.james.mime4j.message.MessageBuilder: void endHeader()> --> <org.apache.james.mime4j.message.Entity: void setHeader(org.apache.james.mime4j.message.Header)>
<com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestSftp: void write(com.jcraft.jsch.Packet)>
<com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofInt(float,int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: void <init>(float,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: void <init>(float,int)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.ViewFragment: void onSaveInstanceState(android.os.Bundle)>
<com.jcraft.jsch.jcraft.Compression: byte[] compress(byte[],int,int[])> --> <com.jcraft.jzlib.ZStream: int deflate(int)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int length()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: void skipBoundary()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int length()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.client.CredentialsProvider getCredentialsProvider()>
<org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset getCharset()> --> <org.apache.http.entity.mime.HttpMultipart: org.apache.james.mime4j.message.Entity getParent()>
<org.apache.http.entity.mime.HttpMultipart: java.lang.String getBoundary()> --> <org.apache.http.entity.mime.HttpMultipart: org.apache.james.mime4j.message.Entity getParent()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: int getItemId()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: int getItemId()>
<com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: int getItemId()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: int getItemId()>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: int getItemId()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.view.MenuItem: int getItemId()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: int getItemId()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback: boolean onOpenSubMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.view.MenuItem: int getItemId()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: int getItemId()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.view.MenuItem: int getItemId()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: int getItemId()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: android.view.View createSDcardFolderSelector()> --> <com.matburt.mobileorg.Gui.Wizard.LocalDirectoryBrowser: void <init>(android.content.Context)>
<oauth.signpost.signature.PlainTextMessageSigner: void <init>()> --> <oauth.signpost.signature.OAuthMessageSigner: void <init>()>
<oauth.signpost.signature.HmacSha1MessageSigner: void <init>()> --> <oauth.signpost.signature.OAuthMessageSigner: void <init>()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: void notifyDataSetChanged()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeAllTabs()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: void notifyDataSetChanged()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeTabAt(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: void notifyDataSetChanged()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void updateTab(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: void notifyDataSetChanged()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: void notifyDataSetChanged()>
<org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body,java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentTypeField contentType(java.lang.String,java.util.Map)>
<com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.SocketFactory: java.io.OutputStream getOutputStream(java.net.Socket)>
<com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.SocketFactory: java.io.OutputStream getOutputStream(java.net.Socket)>
<com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.SocketFactory: java.io.OutputStream getOutputStream(java.net.Socket)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.SocketFactory: java.io.OutputStream getOutputStream(java.net.Socket)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setSelectedNavigationItem(int)>
<com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void setCwd(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasureExactFormat(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getPaddingTop()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getDisplayOptions()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setDisplayOptions(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getDisplayOptions()>
<com.actionbarsherlock.internal.app.ActionBarImpl: int getDisplayOptions()> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getDisplayOptions()>
<org.apache.http.impl.io.HttpResponseParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.NoHttpResponseException: void <init>(java.lang.String)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getHistorySize()> --> <com.actionbarsherlock.widget.ActivityChooserModel: int getHistorySize()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode$2: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: android.content.Context access$200(com.matburt.mobileorg.Gui.Outline.OutlineActionMode)>
<org.apache.http.protocol.HttpService: void <init>(org.apache.http.protocol.HttpProcessor,org.apache.http.ConnectionReuseStrategy,org.apache.http.HttpResponseFactory)> --> <org.apache.http.protocol.HttpService: void setResponseFactory(org.apache.http.HttpResponseFactory)>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: android.view.ViewTreeObserver getViewTreeObserver()>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onGlobalLayout()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: android.view.ViewTreeObserver getViewTreeObserver()>
<oauth.signpost.AbstractOAuthConsumer: void collectHeaderParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpParameters: void putAll(java.util.Map,boolean)>
<oauth.signpost.AbstractOAuthConsumer: void collectBodyParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpParameters: void putAll(java.util.Map,boolean)>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.http.HttpParameters: void putAll(java.util.Map,boolean)>
<oauth.signpost.AbstractOAuthConsumer: void collectQueryParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpParameters: void putAll(java.util.Map,boolean)>
<com.twofortyfouram.locale.MarketActivity: android.app.Dialog onCreateDialog(int)> --> <com.twofortyfouram.locale.MarketActivity$1: void <init>(com.twofortyfouram.locale.MarketActivity,android.content.pm.PackageManager,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setGroupEnabled(int,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setEnabled(boolean)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ExpandBuff(boolean)>
<com.dropbox.client2.session.WebAuthSession: java.util.Map setUpToken(java.lang.String)> --> <com.dropbox.client2.session.WebAuthSession: java.util.Locale getLocale()>
<com.dropbox.client2.session.WebAuthSession: com.dropbox.client2.session.WebAuthSession$WebAuthInfo getAuthInfo(java.lang.String)> --> <com.dropbox.client2.session.WebAuthSession: java.util.Locale getLocale()>
<com.matburt.mobileorg.OrgData.OrgNode: void updateAllNodes(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: android.content.ContentValues getSimpleContentValues()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getThumbnailStream(java.lang.String,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat)> --> <com.dropbox.client2.DropboxAPI$ThumbSize: java.lang.String toAPISize()>
<org.apache.http.impl.SocketHttpServerConnection: void <init>()> --> <org.apache.http.impl.AbstractHttpServerConnection: void <init>()>
<com.matburt.mobileorg.OrgData.OrgNode: void addAutomaticTimestamp()> --> <com.matburt.mobileorg.util.OrgUtils: java.lang.String getTimestamp()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpClientConnection: boolean isResponseAvailable(int)>
<org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader,org.json.simple.parser.ContainerFactory)> --> <org.json.simple.parser.JSONParser: int getPosition()>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.JSONParser: int getPosition()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Identity: boolean isEncrypted()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Identity: boolean isEncrypted()>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.dropbox.client2.exception.DropboxException: java.lang.String toString()>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.dropbox.client2.exception.DropboxException: java.lang.String toString()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void browseTo(java.lang.String)> --> <com.dropbox.client2.exception.DropboxException: java.lang.String toString()>
<com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void browseTo(java.lang.String)> --> <com.dropbox.client2.exception.DropboxException: java.lang.String toString()>
<org.apache.james.mime4j.message.Entity: void setMultipart(org.apache.james.mime4j.message.Multipart,java.util.Map)> --> <org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body,java.lang.String,java.util.Map)>
<org.apache.james.mime4j.message.Entity: void setMultipart(org.apache.james.mime4j.message.Multipart)> --> <org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body,java.lang.String,java.util.Map)>
<org.apache.james.mime4j.message.Entity: void setMessage(org.apache.james.mime4j.message.Message)> --> <org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body,java.lang.String,java.util.Map)>
<org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body,java.lang.String)> --> <org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body,java.lang.String,java.util.Map)>
<org.apache.james.mime4j.message.Entity: void setText(org.apache.james.mime4j.message.TextBody,java.lang.String)> --> <org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body,java.lang.String,java.util.Map)>
<oauth.signpost.commonshttp.HttpRequestAdapter: java.util.Map getAllHeaders()> --> <org.apache.http.client.methods.HttpUriRequest: org.apache.http.Header[] getAllHeaders()>
<org.apache.http.entity.mime.content.StringBody: void <init>(java.lang.String,java.nio.charset.Charset)> --> <org.apache.http.entity.mime.content.StringBody: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset)>
<org.apache.http.entity.mime.content.StringBody: void <init>(java.lang.String)> --> <org.apache.http.entity.mime.content.StringBody: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void setProgress(int)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void setFeatureInt(int,int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void setProgressBarIndeterminate(boolean)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void setFeatureInt(int,int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void setProgressBarIndeterminateVisibility(boolean)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void setFeatureInt(int,int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void setProgressBarVisibility(boolean)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void setFeatureInt(int,int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void setSecondaryProgress(int)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void setFeatureInt(int,int)>
<org.apache.james.mime4j.util.StringArrayMap$1: java.lang.Object nextElement()> --> <org.apache.james.mime4j.util.StringArrayMap$1: java.lang.String nextElement()>
<com.matburt.mobileorg.Services.TimeclockDialog$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Services.TimeclockDialog: void access$300(com.matburt.mobileorg.Services.TimeclockDialog,int,int)>
<com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment$1: void onTimeSet(android.widget.TimePicker,int,int)> --> <com.matburt.mobileorg.Services.TimeclockDialog: void access$300(com.matburt.mobileorg.Services.TimeclockDialog,int,int)>
<com.matburt.mobileorg.util.FileUtils: java.io.BufferedWriter getWriter()> --> <com.matburt.mobileorg.util.FileUtils: java.io.BufferedWriter getWriter(boolean)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: int addAgenda(android.content.Context)>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: byte[] getMPInt()>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: byte[] getMPInt()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: byte[] getMPInt()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.ActionBarSherlock$OnActionModeFinishedListener: void onActionModeFinished(com.actionbarsherlock.view.ActionMode)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void initAbsSpinner()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setWillNotDraw(boolean)>
<com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> --> <javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>
<com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> --> <javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void name_addr()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator,java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setObjectValues(java.lang.Object[])>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setup(com.matburt.mobileorg.OrgData.OrgNode,boolean,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.content.ContentResolver)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void setupChildrenIndicator(com.matburt.mobileorg.OrgData.OrgNode,android.content.ContentResolver,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.text.SpannableStringBuilder)>
<com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor$1: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor$1: void run()>
<org.apache.http.impl.io.SocketInputBuffer: boolean isDataAvailable(int)> --> <org.apache.http.impl.io.SocketInputBuffer: boolean hasBufferedData()>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void setContentView(int)>
<com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver: void onInvalidated()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void checkFocus()>
<com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver: void onChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void checkFocus()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onSaveInstanceState(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockActivity: void onSaveInstanceState(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onSaveInstanceState(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockActivity: void onSaveInstanceState(android.os.Bundle)>
<com.matburt.mobileorg.Services.CalendarSyncService: com.matburt.mobileorg.util.MultiMap getCalendarEntries(java.lang.String)> --> <com.matburt.mobileorg.util.MultiMap: void put(java.lang.Long,java.lang.Object)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean shouldShowIcon()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean getOptionalIconsVisible()>
<com.actionbarsherlock.view.MenuInflater$MenuState: void readItem(android.util.AttributeSet)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: java.lang.Object newInstance(java.lang.String,java.lang.Class[],java.lang.Object[])>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: java.lang.Object newInstance(java.lang.String,java.lang.Class[],java.lang.Object[])>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: org.apache.james.mime4j.field.structured.parser.ParseException generateParseException()> --> <org.apache.james.mime4j.field.structured.parser.ParseException: void <init>(org.apache.james.mime4j.field.structured.parser.Token,int[][],java.lang.String[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: void setInterpolator(android.view.animation.Interpolator)>
<com.jcraft.jsch.ChannelSubsystem: java.io.InputStream getErrStream()> --> <com.jcraft.jsch.ChannelSubsystem: java.io.InputStream getExtInputStream()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: boolean onMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: boolean onMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <javax.net.ssl.SSLHandshakeException: java.lang.String toString()>
<org.apache.james.mime4j.message.MessageWriter: void writeMultipart(org.apache.james.mime4j.message.Multipart,java.io.OutputStream)> --> <org.apache.james.mime4j.message.MessageWriter: org.apache.james.mime4j.field.ContentTypeField getContentType(org.apache.james.mime4j.message.Multipart)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.AbstractOAuthProvider: java.util.Map getRequestHeaders()>
<com.jcraft.jsch.jcraft.HMACSHA196: void <init>()> --> <com.jcraft.jsch.jcraft.HMACSHA1: void <init>()>
<org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)> --> <org.apache.http.entity.ByteArrayEntity: void setContentType(java.lang.String)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Session: void run()>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: void onCreate(android.os.Bundle)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int indexOf(byte[])>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.widget.IcsSpinner$SpinnerPopup: void dismiss()>
<com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.KeyPair: void <init>(com.jcraft.jsch.JSch)>
<com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.KeyPair: void <init>(com.jcraft.jsch.JSch)>
<org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWord(java.lang.String,int,int)> --> <org.apache.james.mime4j.util.CharsetUtil: java.lang.String toJavaCharset(java.lang.String)>
<org.apache.james.mime4j.message.BodyFactory: java.nio.charset.Charset toJavaCharset(java.lang.String,boolean)> --> <org.apache.james.mime4j.util.CharsetUtil: java.lang.String toJavaCharset(java.lang.String)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Compression: byte[] uncompress(byte[],int,int[])>
<com.matburt.mobileorg.util.OrgNode2Html: void <init>(android.content.ContentResolver,android.content.Context)> --> <com.matburt.mobileorg.util.OrgNode2Html: void setupConfig(android.content.Context)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: int getBeginColumn()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void restoreLastPage()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView$1: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener)>
<com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.widget.ShareActionProvider: android.content.Context access$100(com.actionbarsherlock.widget.ShareActionProvider)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser$LookaheadSuccess: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser$1)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser$LookaheadSuccess: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser$1)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser$LookaheadSuccess: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser$1)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void route()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuInflater: java.lang.Object[] access$500(com.actionbarsherlock.view.MenuInflater)>
<com.dropbox.client2.DropboxAPI$Entry: void <init>(java.util.Map)> --> <com.dropbox.client2.DropboxAPI: boolean getFromMapAsBoolean(java.util.Map,java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setTranslationY(float)>
<com.actionbarsherlock.internal.app.ActionBarImpl$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setTranslationY(float)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)> --> <com.actionbarsherlock.view.MenuItem: void setShowAsAction(int)>
<com.matburt.mobileorg.Gui.ViewActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuItem: void setShowAsAction(int)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: void setShowAsAction(int)>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncFile(java.lang.String)> --> <com.matburt.mobileorg.Services.CalendarSyncService: com.matburt.mobileorg.util.MultiMap getCalendarEntries(java.lang.String)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onCreateActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: boolean dispatchOnCreate()> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onCreateActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: boolean onCreateActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onCreateActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onCreateActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void init()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState$1: com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState createFromParcel(android.os.Parcel)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$SavedState: void <init>(android.os.Parcel)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener: void <init>(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,com.actionbarsherlock.internal.widget.ScrollingTabContainerView$1)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener: void <init>(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: android.view.View createSDcardFolderSelector()> --> <com.matburt.mobileorg.Gui.Wizard.LocalDirectoryBrowser: java.util.ArrayList listFiles()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.ChannelForwardedTCPIP)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: com.jcraft.jsch.Session getSession()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStopStringLiteralDfa_3(int,long)>
<com.jcraft.jsch.IdentityFile: boolean setPassphrase(byte[])> --> <com.jcraft.jsch.HASH: void update(byte[],int,int)>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.HASH: void update(byte[],int,int)>
<com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> --> <com.jcraft.jsch.HASH: void update(byte[],int,int)>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.HASH: void update(byte[],int,int)>
<com.jcraft.jsch.Util: java.lang.String getFingerPrint(com.jcraft.jsch.HASH,byte[])> --> <com.jcraft.jsch.HASH: void update(byte[],int,int)>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.HASH: void update(byte[],int,int)>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.HASH: void update(byte[],int,int)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Buffer: void reset()>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void reset()>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void reset()>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Buffer: void reset()>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void reset()>
<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)> --> <com.jcraft.jsch.Buffer: void reset()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: void reset()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.Buffer: void reset()>
<com.jcraft.jsch.ChannelAgentForwarding: void <init>()> --> <com.jcraft.jsch.Buffer: void reset()>
<com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> --> <com.jcraft.jsch.Buffer: void reset()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void reset()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> --> <com.actionbarsherlock.app.SherlockFragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<com.google.gdata.util.common.base.Preconditions: void checkPositionIndex(int,int,java.lang.String)> --> <com.google.gdata.util.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>
<com.google.gdata.util.common.base.Preconditions: void checkElementIndex(int,int,java.lang.String)> --> <com.google.gdata.util.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>
<com.jcraft.jsch.ChannelSftp$RequestQueue: void <init>(com.jcraft.jsch.ChannelSftp,int)> --> <com.jcraft.jsch.ChannelSftp$RequestQueue$Request: void <init>(com.jcraft.jsch.ChannelSftp$RequestQueue)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)> --> <org.apache.http.message.BasicHeaderValueFormatter: void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)> --> <org.apache.http.message.BasicHeaderValueFormatter: void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: boolean onPrepareActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onPrepareActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void invalidate()> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onPrepareActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void invalidate()> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onPrepareActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)> --> <com.actionbarsherlock.view.ActionMode$Callback: boolean onPrepareActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void close()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void close(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void close(boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void close(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void close(boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void onSubUiVisibilityChanged(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void close(boolean)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)>
<com.actionbarsherlock.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: boolean onMenuItemClick(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.widget.ActivityChooserModel: android.content.Intent chooseActivity(int)>
<com.actionbarsherlock.widget.ActivityChooserModel: void readHistoricalData()> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void <init>(com.actionbarsherlock.widget.ActivityChooserModel,com.actionbarsherlock.widget.ActivityChooserModel$1)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encode(byte)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void lineBreak()>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void softBreak()> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void lineBreak()>
<com.matburt.mobileorg.Services.TimeclockDialog: void <init>()> --> <com.matburt.mobileorg.Services.TimeclockDialog$2: void <init>(com.matburt.mobileorg.Services.TimeclockDialog)>
<com.dropbox.client2.jsonextract.JsonList$WrapperIterator: void <init>(java.lang.String,java.util.Iterator,com.dropbox.client2.jsonextract.JsonList$1)> --> <com.dropbox.client2.jsonextract.JsonList$WrapperIterator: void <init>(java.lang.String,java.util.Iterator)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.datetime.parser.Token: org.apache.james.mime4j.field.datetime.parser.Token newToken(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String nodeToHTML(com.matburt.mobileorg.OrgData.OrgNode,int)> --> <com.matburt.mobileorg.OrgData.OrgNode: boolean hasChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setupChildrenIndicator(com.matburt.mobileorg.OrgData.OrgNode,android.content.ContentResolver,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.text.SpannableStringBuilder)> --> <com.matburt.mobileorg.OrgData.OrgNode: boolean hasChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.OrgData.OrgNode: boolean hasChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: boolean hasChildren(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: boolean hasChildren(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void updateNotification(int)> --> <com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void updateNotification(int,java.lang.String)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void announceProgressUpdate(int,java.lang.String)> --> <com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void updateNotification(int,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: android.view.View findViewForItem(com.actionbarsherlock.view.MenuItem)>
<com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy: void <init>(com.dropbox.client2.session.AbstractSession$1)> --> <com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy: void <init>()>
<com.matburt.mobileorg.Services.CalendarSyncService: boolean shouldInsertEntry(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeDate)> --> <com.matburt.mobileorg.OrgData.OrgNodeDate: boolean isInPast()>
<com.jcraft.jsch.Session: void connect()> --> <com.jcraft.jsch.Session: void connect(int)>
<com.google.gdata.util.common.base.UnicodeEscaper: java.lang.Appendable escape(java.lang.Appendable)> --> <com.google.gdata.util.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor)> --> <org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.descriptor.MutableBodyDescriptor newBodyDescriptor(org.apache.james.mime4j.descriptor.BodyDescriptor)> --> <org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor)>
<org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void <init>()> --> <org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor)>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String nodeToHTML(com.matburt.mobileorg.OrgData.OrgNode,int)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String applyFormating(java.lang.String)>
<com.jcraft.jsch.Session: void setPortForwardingR(int,java.lang.String)> --> <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])>
<com.jcraft.jsch.Session: void setPortForwardingR(int,java.lang.String,java.lang.Object[])> --> <com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parameter()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: java.lang.String value()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseMimeVersion(java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <clinit>()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void jj_la1_0()>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void checkSelectionChanged()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: void setHasOptionsMenu(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setMeasuredDimension(int,int)>
<com.matburt.mobileorg.util.SelectionBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String)> --> <com.matburt.mobileorg.util.SelectionBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: android.view.ViewGroup$LayoutParams getLayoutParams()>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void init()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void add(com.matburt.mobileorg.OrgData.OrgNode)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void add(java.lang.Object)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void add(com.matburt.mobileorg.OrgData.OrgNode)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void setState(long[])> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void add(com.matburt.mobileorg.OrgData.OrgNode)>
<com.dropbox.client2.session.AbstractSession$GzipDecompressingEntity: void <init>(org.apache.http.HttpEntity)> --> <org.apache.http.entity.HttpEntityWrapper: void <init>(org.apache.http.HttpEntity)>
<org.apache.http.entity.BufferedHttpEntity: void <init>(org.apache.http.HttpEntity)> --> <org.apache.http.entity.HttpEntityWrapper: void <init>(org.apache.http.HttpEntity)>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity: void <init>(org.apache.http.HttpEntity,com.dropbox.client2.ProgressListener)> --> <org.apache.http.entity.HttpEntityWrapper: void <init>(org.apache.http.HttpEntity)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getEndLine()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getEndLine()>
<com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem setActionProvider(com.actionbarsherlock.view.ActionProvider)> --> <com.actionbarsherlock.internal.view.ActionProviderWrapper: void <init>(com.actionbarsherlock.view.ActionProvider)>
<com.matburt.mobileorg.Services.CalendarSyncService$1: void start()> --> <com.matburt.mobileorg.Services.CalendarSyncService: boolean access$300(com.matburt.mobileorg.Services.CalendarSyncService)>
<com.jcraft.jsch.KeyPair: java.lang.String getFingerPrint()> --> <com.jcraft.jsch.KeyPair: int getKeySize()>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncNode(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.util.MultiMap,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.ArrayList getDates(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxList()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void <init>(android.content.Context,int,java.util.ArrayList)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void <init>(android.content.Context,int,java.util.ArrayList)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: android.view.View createSDcardFolderSelector()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void <init>(android.content.Context,int,java.util.ArrayList)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void onMenuModeChange(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void invalidate()>
<com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void invalidate()>
<com.jcraft.jsch.ChannelSftp$LsEntry: int compareTo(java.lang.Object)> --> <com.jcraft.jsch.ChannelSftp$LsEntry: java.lang.String getFilename()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel: java.lang.Object access$600(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void run()> --> <com.actionbarsherlock.widget.ActivityChooserModel: java.lang.Object access$600(com.actionbarsherlock.widget.ActivityChooserModel)>
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.ByteArrayBuffer,int,int)> --> <org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer,int)> --> <org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>
<com.matburt.mobileorg.Settings.SynchronizerPreferences: android.view.View onCreateView(android.view.ViewGroup)> --> <com.matburt.mobileorg.Settings.SynchronizerPreferences: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: void setModifiable(boolean)>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: java.util.Iterator iterator()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer$1: void <init>(org.apache.james.mime4j.codec.UnboundedFifoByteBuffer)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper access$002(com.actionbarsherlock.internal.ActionBarSherlockNative,com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setMeasuredDimension(int,int)>
<com.jcraft.jsch.ChannelAgentForwarding: void <init>()> --> <com.jcraft.jsch.ChannelAgentForwarding: void setLocalWindowSize(int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void FillBuff()>
<org.apache.http.params.HttpProtocolParamBean: void setHttpElementCharset(java.lang.String)> --> <org.apache.http.params.HttpProtocolParams: void setHttpElementCharset(org.apache.http.params.HttpParams,java.lang.String)>
<com.matburt.mobileorg.Services.CalendarWrapper: void refreshPreferences()> --> <com.matburt.mobileorg.Services.CalendarWrapper: int getCalendarID(java.lang.String)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: byte[] buf()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: byte[] buf()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setContentView(android.view.View)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setContentView(android.view.View)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setContentView(android.view.View)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View)>
<com.actionbarsherlock.app.SherlockActivity: void setContentView(android.view.View)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View)>
<com.actionbarsherlock.app.SherlockListActivity: void setContentView(android.view.View)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(android.view.View)>
<com.dropbox.client2.android.AndroidAuthSession: void unlink()> --> <com.dropbox.client2.session.AbstractSession: void unlink()>
<com.actionbarsherlock.ActionBarSherlock: void setTitle(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setTitle(java.lang.CharSequence)>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,int)> --> <org.apache.james.mime4j.field.address.parser.Node: void jjtClose()>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)> --> <org.apache.james.mime4j.field.address.parser.Node: void jjtClose()>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: java.lang.Object getValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: float getFloatValue(float)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void calculateValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: float getFloatValue(float)>
<org.apache.james.mime4j.field.address.Group: java.lang.String getEncodedString()> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeAddressDisplayName(java.lang.String)>
<org.apache.james.mime4j.field.address.Mailbox: java.lang.String getEncodedString()> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeAddressDisplayName(java.lang.String)>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>
<com.jcraft.jsch.Channel: void disconnect()> --> <com.jcraft.jsch.Channel: void del(com.jcraft.jsch.Channel)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void jjCheckNAddStates(int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void jjCheckNAddStates(int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void jjCheckNAddTwoStates(int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.descriptor.BodyDescriptor getBodyDescriptor()>
<org.apache.james.mime4j.parser.MimeTokenStream: java.io.InputStream getDecodedInputStream()> --> <org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.descriptor.BodyDescriptor getBodyDescriptor()>
<org.apache.james.mime4j.parser.MimeTokenStream: java.io.Reader getReader()> --> <org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.descriptor.BodyDescriptor getBodyDescriptor()>
<org.apache.http.entity.mime.content.FileBody: void <init>(java.io.File)> --> <org.apache.http.entity.mime.content.FileBody: void <init>(java.io.File,java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void initAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getWidth()>
<com.dropbox.client2.jsonextract.JsonList: void expectLength(int)> --> <com.dropbox.client2.jsonextract.JsonList: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonList: com.dropbox.client2.jsonextract.JsonThing get(int)> --> <com.dropbox.client2.jsonextract.JsonList: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: void saveEdits()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_0(int,int)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawVerticalDivider(android.graphics.Canvas,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getPaddingBottom()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersVertical(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getPaddingBottom()>
<com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void browseTo(java.lang.String)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: boolean isCurrentDirectoryRoot()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: void <init>(org.apache.james.mime4j.io.BufferedLineReaderInputStream,java.lang.String)> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read()> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: void skipBoundary()> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()>
<org.apache.http.message.BasicStatusLine: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatStatusLine(org.apache.http.StatusLine,org.apache.http.message.LineFormatter)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String readLine()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatProtocolVersion(org.apache.http.ProtocolVersion,org.apache.http.message.LineFormatter)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.ParserCursor: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatElements(org.apache.http.HeaderElement[],boolean,org.apache.http.message.HeaderValueFormatter)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicHeaderElement: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatRequestLine(org.apache.http.RequestLine,org.apache.http.message.LineFormatter)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.HeaderGroup: org.apache.http.Header getCondensedHeader(java.lang.String)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicHeader: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatParameters(org.apache.http.NameValuePair[],boolean,org.apache.http.message.HeaderValueFormatter)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatHeaderElement(org.apache.http.HeaderElement,boolean,org.apache.http.message.HeaderValueFormatter)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.HttpHost: java.lang.String toURI()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicNameValuePair: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatNameValuePair(org.apache.http.NameValuePair,boolean,org.apache.http.message.HeaderValueFormatter)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.HttpHost: java.lang.String toHostString()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.ProtocolVersion: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicRequestLine: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BufferedHeader: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatHeader(org.apache.http.Header,org.apache.http.message.LineFormatter)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String toString()>
<com.matburt.mobileorg.Plugin.SyncEditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Plugin.BundleScrubber: boolean scrub(android.os.Bundle)>
<com.matburt.mobileorg.Plugin.BundleScrubber: boolean scrub(android.content.Intent)> --> <com.matburt.mobileorg.Plugin.BundleScrubber: boolean scrub(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: void access$100(com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService)> --> <com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: void refreshDisplay()>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)> --> <org.apache.http.message.BasicHeaderValueFormatter: int estimateHeaderElementLen(org.apache.http.HeaderElement)>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateElementsLen(org.apache.http.HeaderElement[])> --> <org.apache.http.message.BasicHeaderValueFormatter: int estimateHeaderElementLen(org.apache.http.HeaderElement)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void restoreLastPage()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: boolean post(java.lang.Runnable)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void measure(int,int)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void onClick(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder$ItemInvoker: boolean invokeItem(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.dropbox.client2.android.AuthActivity: boolean hasDropboxApp(android.content.Intent)> --> <com.dropbox.client2.android.AuthActivity: android.content.pm.PackageManager getPackageManager()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.ResourcesCompat: boolean getResources_getBoolean(android.content.Context,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.ResourcesCompat: boolean getResources_getBoolean(android.content.Context,int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.ResourcesCompat: boolean getResources_getBoolean(android.content.Context,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void init(android.view.View)> --> <com.actionbarsherlock.internal.ResourcesCompat: boolean getResources_getBoolean(android.content.Context,int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.ResourcesCompat: boolean getResources_getBoolean(android.content.Context,int)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.ResourcesCompat: boolean getResources_getBoolean(android.content.Context,int)>
<org.apache.james.mime4j.field.mimeversion.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)>
<org.apache.http.impl.AbstractHttpClientConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.io.SessionInputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>
<org.apache.http.impl.AbstractHttpServerConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.io.SessionInputBuffer: org.apache.http.io.HttpTransportMetrics getMetrics()>
<com.actionbarsherlock.widget.ActivityChooserModel: void persistHistoricalData()> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void <init>(com.actionbarsherlock.widget.ActivityChooserModel,com.actionbarsherlock.widget.ActivityChooserModel$1)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void setupDoneButton(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$1: void <init>(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.MimeTokenStream: void parse(java.io.InputStream)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char[] GetSuffix(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.mimeversion.parser.Token)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char[] GetSuffix(int)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void handleDataChanged()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.ActionBarSherlock$OnActionModeStartedListener: void onActionModeStarted(com.actionbarsherlock.view.ActionMode)>
<org.json.simple.parser.JSONParser: java.util.List createArrayContainer(org.json.simple.parser.ContainerFactory)> --> <org.json.simple.parser.ContainerFactory: java.util.List creatArrayContainer()>
<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)> --> <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: android.view.View createWebDAVConfig()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard$1: void <init>(com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard)>
<org.apache.james.mime4j.message.MessageWriter: org.apache.james.mime4j.field.ContentTypeField getContentType(org.apache.james.mime4j.message.Multipart)> --> <org.apache.james.mime4j.message.Multipart: org.apache.james.mime4j.message.Entity getParent()>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void copyStreamToOutput(java.io.OutputStream,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.exception.DropboxLocalStorageFullException: void <init>()>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.lang.StringBuilder nodesToString(long,long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String toString()>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit createParentNewheading(android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String toString()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard$1: void onClick(android.view.View)> --> <com.dropbox.client2.android.AndroidAuthSession: void startAuthentication(android.content.Context)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setShowDefaultActivity(boolean,boolean)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void notifyDataSetChanged()>
<com.actionbarsherlock.widget.ActivityChooserView$1: void onChanged()> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void notifyDataSetChanged()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setMaxActivityCount(int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void notifyDataSetChanged()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setShowFooterView(boolean)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void notifyDataSetChanged()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setDataModel(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void notifyDataSetChanged()>
<org.apache.http.message.BasicListHeaderIterator: void <init>(java.util.List,java.lang.String)> --> <org.apache.http.message.BasicListHeaderIterator: int findNext(int)>
<org.apache.http.message.BasicListHeaderIterator: org.apache.http.Header nextHeader()> --> <org.apache.http.message.BasicListHeaderIterator: int findNext(int)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setContentWidth(int)>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setContentWidth(int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setFloatValues(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setFloatValues(float[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setFloatValues(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setFloatValues(float[])>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.Header[] getHeaders(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int positionChildInverse(android.view.View,int,int,int)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.AbstractOAuthProvider: oauth.signpost.http.HttpResponse sendRequest(oauth.signpost.http.HttpRequest)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <init>(java.io.InputStream,java.lang.String)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: int size()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: int size()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putUrl(java.lang.String,java.lang.String)> --> <org.apache.http.client.methods.HttpPut: void setEntity(org.apache.http.HttpEntity)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <org.apache.http.client.methods.HttpPut: void setEntity(org.apache.http.HttpEntity)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploadRequest chunkedUploadRequest(java.io.InputStream,long,com.dropbox.client2.ProgressListener,long,java.lang.String)> --> <org.apache.http.client.methods.HttpPut: void setEntity(org.apache.http.HttpEntity)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <org.apache.http.client.methods.HttpPut: void setEntity(org.apache.http.HttpEntity)>
<com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
<com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
<com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
<com.jcraft.jsch.ChannelX11: void run()> --> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: void access$500(com.actionbarsherlock.widget.ActivityChooserView,int)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.widget.ActivityChooserView: void access$500(com.actionbarsherlock.widget.ActivityChooserView,int)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: void access$500(com.actionbarsherlock.widget.ActivityChooserView,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void onDismiss()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu access$302(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu)>
<com.dropbox.client2.DropboxAPI$CreatedCopyRef: com.dropbox.client2.DropboxAPI$CreatedCopyRef extractFromJson(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.jsonextract.JsonMap: com.dropbox.client2.jsonextract.JsonThing get(java.lang.String)>
<com.dropbox.client2.DropboxAPI$DeltaPage: com.dropbox.client2.DropboxAPI$DeltaPage extractFromJson(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonMap: com.dropbox.client2.jsonextract.JsonThing get(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void <init>(java.lang.Object,java.lang.String)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setPropertyName(java.lang.String)>
<org.apache.james.mime4j.field.address.Group: org.apache.james.mime4j.field.address.Group parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.Address: org.apache.james.mime4j.field.address.Address parse(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.view.View getSelectedView()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void fireOnSelected()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.view.View getSelectedView()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.view.View getSelectedView()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.view.View getSelectedView()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable access$900(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupTouchInterceptor: boolean onTouch(android.view.View,android.view.MotionEvent)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable access$900(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setUpChild(android.view.View)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: boolean hasFocus()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <init>(java.io.InputStream,java.lang.String)>
<com.matburt.mobileorg.Services.CalendarSyncService: com.matburt.mobileorg.util.MultiMap getCalendarEntries(java.lang.String)> --> <com.matburt.mobileorg.Services.CalendarWrapper: android.database.Cursor getCalendarCursor(java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: void <init>()> --> <org.apache.http.message.AbstractHttpMessage: void <init>(org.apache.http.params.HttpParams)>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: void update(byte[])>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: void update(byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: void update(byte[])>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_dss(byte[])> --> <com.jcraft.jsch.SignatureDSA: void update(byte[])>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParsedField parse(java.lang.String)> --> <org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParsedField parse(org.apache.james.mime4j.util.ByteSequence,java.lang.String)>
<org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParsedField parse(org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParsedField parse(org.apache.james.mime4j.util.ByteSequence,java.lang.String)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void onMenuModeChange(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.StandaloneActionMode: void invalidate()>
<org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: int doReadLine(org.apache.james.mime4j.util.ByteArrayBuffer)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: void setLength(int)>
<org.apache.james.mime4j.message.Message: void setDate(java.util.Date)> --> <org.apache.james.mime4j.message.Message: void setDate(java.util.Date,java.util.TimeZone)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void scheduleAccessibilityEventSender()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: boolean removeCallbacks(java.lang.Runnable)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: boolean removeCallbacks(java.lang.Runnable)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: java.lang.String value()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ParseException: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarView$3: void onClick(android.view.View)> --> <com.actionbarsherlock.view.Window$Callback: boolean onMenuItemSelected(int,com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setIcon(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setIcon(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem add(int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem add(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem add(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onCreateActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)> --> <com.matburt.mobileorg.OrgData.OrgNode: boolean isFilenode(android.content.ContentResolver)>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>
<org.apache.http.protocol.BasicHttpContext: java.lang.Object getAttribute(java.lang.String)> --> <org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>
<org.apache.http.protocol.DefaultedHttpContext: java.lang.Object getAttribute(java.lang.String)> --> <org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$1: void start()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: int getWidth()>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> --> <org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: com.actionbarsherlock.internal.widget.IcsSpinner access$1000(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: com.actionbarsherlock.internal.widget.IcsSpinner access$1000(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void setPayload(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void set(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void restoreInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void set(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: void add(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void set(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: void <init>(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void set(java.lang.String)>
<com.actionbarsherlock.widget.ActivityChooserModel: void <clinit>()> --> <com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void <init>(com.actionbarsherlock.widget.ActivityChooserModel$1)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: int count()>
<com.jcraft.jsch.ChannelSftp: java.lang.String remoteAbsolutePath(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String getCwd()>
<com.jcraft.jsch.ChannelSftp: java.lang.String pwd()> --> <com.jcraft.jsch.ChannelSftp: java.lang.String getCwd()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel: java.util.List access$700(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel: java.util.List access$700(com.actionbarsherlock.widget.ActivityChooserModel)>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.protocol.RequestConnControl: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.impl.io.HttpRequestWriter: void writeHeadLine(org.apache.http.HttpMessage)> --> <org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.protocol.RequestExpectContinue: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)> --> <org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>
<com.actionbarsherlock.widget.ActivityChooserView: void onDetachedFromWindow()> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: com.actionbarsherlock.widget.ActivityChooserModel getDataModel()>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: com.actionbarsherlock.widget.ActivityChooserModel getDataModel()>
<com.actionbarsherlock.widget.ActivityChooserView: void onAttachedToWindow()> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: com.actionbarsherlock.widget.ActivityChooserModel getDataModel()>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: com.actionbarsherlock.widget.ActivityChooserModel getDataModel()>
<com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.widget.ActivityChooserModel getDataModel()> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: com.actionbarsherlock.widget.ActivityChooserModel getDataModel()>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: com.actionbarsherlock.widget.ActivityChooserModel getDataModel()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setDataModel(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: com.actionbarsherlock.widget.ActivityChooserModel getDataModel()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void MoreLexicalActions()>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ExpandBuff(boolean)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node clone()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setContentHeight(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setContentHeight(int)>
<com.jcraft.jsch.ChannelSubsystem: void init()> --> <com.jcraft.jsch.ChannelSubsystem: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelSubsystem: void start()> --> <com.jcraft.jsch.ChannelSubsystem: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>
<org.apache.james.mime4j.message.Message: void setMailbox(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxField mailbox(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void <init>(android.content.Context,boolean)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void setCacheColorHint(int)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Account accountInfo()> --> <com.dropbox.client2.DropboxAPI$Account: void <init>(java.util.Map)>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.ContentHandler: boolean endObjectEntry()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void start()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: android.app.Activity access$100(com.actionbarsherlock.internal.ActionBarSherlockCompat)>
<org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream,int,byte[])> --> <org.apache.james.mime4j.codec.Base64OutputStream: void checkLineSeparator(byte[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupStartValue(java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupValue(java.lang.Object,com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupEndValue(java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupValue(java.lang.Object,com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: boolean performItemClick(android.view.View,int,long)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void playSoundEffect(int)>
<oauth.signpost.signature.SignatureBaseString: java.lang.String normalizeRequestParameters()> --> <oauth.signpost.http.HttpParameters: java.util.Set keySet()>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.util.FileUtils: void <init>(java.lang.String,android.content.Context)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setTitle(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setTitle(java.lang.CharSequence)>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void <init>(com.actionbarsherlock.internal.app.ActionBarWrapper,android.app.ActionBar$Tab)> --> <com.actionbarsherlock.app.ActionBar$Tab: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl)> --> <com.actionbarsherlock.app.ActionBar$Tab: void <init>()>
<com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onFinishInflate()> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void onFinishInflate()>
<com.actionbarsherlock.widget.ActivityChooserView: void updateAppearance()> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<com.jcraft.jsch.KeyPair: void writePrivateKey(java.io.OutputStream)> --> <com.jcraft.jsch.KeyPair: byte[] getPrivateKey()>
<com.matburt.mobileorg.Services.SyncService$1: void start()> --> <com.matburt.mobileorg.Services.SyncService: void access$100(com.matburt.mobileorg.Services.SyncService)>
<com.jcraft.jsch.jcraft.HMAC: void update(int)> --> <com.jcraft.jsch.jcraft.HMAC: void update(byte[],int,int)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseLanguage(java.lang.String)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void <init>(java.io.Reader)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_1()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void init(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean isSplitActionBar()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView createTabView(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.widget.ActionBarView$3: void onClick(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarView: com.actionbarsherlock.internal.view.menu.ActionMenuItem access$200(com.actionbarsherlock.internal.widget.ActionBarView)>
<org.apache.http.entity.mime.UnexpectedMimeException: void <init>(org.apache.james.mime4j.MimeException)> --> <org.apache.james.mime4j.MimeException: java.lang.String getMessage()>
<org.apache.james.mime4j.MimeIOException: void <init>(org.apache.james.mime4j.MimeException)> --> <org.apache.james.mime4j.MimeException: java.lang.String getMessage()>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parseLine(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgFileParser: int numberOfStars(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void setNavButtonStateOnPage(int,boolean,int)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setButtonState(android.widget.Button,boolean,android.view.View$OnClickListener)>
<org.apache.james.mime4j.field.DateTimeField: void <clinit>()> --> <org.apache.james.mime4j.field.DateTimeField$1: void <init>()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.ProgressListener$ProgressHttpEntity: void <init>(org.apache.http.HttpEntity,com.dropbox.client2.ProgressListener)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploadRequest chunkedUploadRequest(java.io.InputStream,long,com.dropbox.client2.ProgressListener,long,java.lang.String)> --> <com.dropbox.client2.ProgressListener$ProgressHttpEntity: void <init>(org.apache.http.HttpEntity,com.dropbox.client2.ProgressListener)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void connect()> --> <com.dropbox.client2.android.AndroidAuthSession: boolean isLinked()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: com.actionbarsherlock.internal.view.menu.MenuBuilder access$000(com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.app.ActionBar$Tab: java.lang.CharSequence getContentDescription()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView access$300(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView createTabView(com.actionbarsherlock.app.ActionBar$Tab,boolean)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView createTabView(com.actionbarsherlock.app.ActionBar$Tab,boolean)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView createTabView(com.actionbarsherlock.app.ActionBar$Tab,boolean)>
<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)> --> <org.apache.http.util.ByteArrayBuffer: byte[] toByteArray()>
<com.jcraft.jsch.jcraft.Compression: byte[] uncompress(byte[],int,int[])> --> <com.jcraft.jzlib.ZStream: int inflate(int)>
<org.apache.http.entity.mime.FormBodyPart: void <init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.http.entity.mime.FormBodyPart: void generateTransferEncoding(org.apache.james.mime4j.descriptor.ContentDescriptor)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: java.lang.String GetImage()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: java.lang.String GetImage()>
<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity,java.lang.String)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String readLine()> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicHeaderElement: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.HeaderGroup: org.apache.http.Header getCondensedHeader(java.lang.String)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.HttpHost: java.lang.String toURI()> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.HttpHost: java.lang.String toHostString()> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.impl.io.ChunkedInputStream: void <init>(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.impl.io.HttpRequestParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.ParserCursor: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicLineParser: org.apache.http.Header parseHeader(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.impl.io.HttpResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicNameValuePair: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.ProtocolVersion: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.impl.io.AbstractMessageWriter: void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void <init>(int)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: boolean getShowDefaultActivity()>
<com.jcraft.jsch.jce.DH: byte[] getE()> --> <javax.crypto.interfaces.DHPublicKey: java.math.BigInteger getY()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: java.io.InputStream getInputStream()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void saveSettings()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void updateEmptyStatus(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getTop()>
<org.apache.http.impl.AbstractHttpClientConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponseFactory createHttpResponseFactory()>
<com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> --> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> --> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> --> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> --> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> --> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> --> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> --> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> --> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> --> <javax.crypto.spec.IvParameterSpec: void <init>(byte[])>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void collapseExpand(int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: int getCount()>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: long[] getState()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: int getCount()>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: int findParent(int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: int getCount()>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void expandNodes(java.util.ArrayList)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: int getCount()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <clinit>()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$1: void <init>()>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.graphics.drawable.Drawable getBackground()>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.graphics.drawable.Drawable getBackground()>
<org.apache.james.mime4j.field.address.parser.ASTaddr_spec: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.ASTaddr_spec,java.lang.Object)>
<com.actionbarsherlock.widget.ActivityChooserModel: boolean addHisoricalRecord(com.actionbarsherlock.widget.ActivityChooserModel$HistoricalRecord)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void persistHistoricalData()>
<com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelX11: void eof()>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.ChannelX11: void eof()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStopStringLiteralDfa_1(int,long)>
<com.jcraft.jsch.RequestSftp: void <init>()> --> <com.jcraft.jsch.RequestSftp: void setReply(boolean)>
<com.matburt.mobileorg.Gui.Agenda.AgendasActivity: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void onCreate(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void onCreate(android.os.Bundle)>
<com.matburt.mobileorg.Gui.ViewActivity: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void onCreate(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void onCreate(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void onCreate(android.os.Bundle)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView: void configPresenters(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void setRemoteWindowSize(long)>
<com.dropbox.client2.DropboxAPI$ChunkedUploadRequest: com.dropbox.client2.DropboxAPI$ChunkedUploadResponse upload()> --> <com.dropbox.client2.DropboxAPI$ChunkedUploadResponse: void <init>(java.util.Map)>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: com.actionbarsherlock.view.ActionProvider access$000(com.actionbarsherlock.view.MenuInflater$MenuState)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void browseTo(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: void browseTo(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
<com.matburt.mobileorg.OrgData.OrgProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: android.database.sqlite.SQLiteDatabase getReadableDatabase()>
<com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> --> <com.jcraft.jsch.Session: void setPort(int)>
<org.apache.james.mime4j.util.CharsetUtil$Charset: int compareTo(java.lang.Object)> --> <org.apache.james.mime4j.util.CharsetUtil$Charset: int compareTo(org.apache.james.mime4j.util.CharsetUtil$Charset)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void <init>(android.content.Context,com.dropbox.client2.DropboxAPI)> --> <com.matburt.mobileorg.Gui.Wizard.DirectoryBrowser: void <init>(android.content.Context)>
<com.matburt.mobileorg.Gui.Wizard.LocalDirectoryBrowser: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.DirectoryBrowser: void <init>(android.content.Context)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: void <init>(android.content.Context,com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer)> --> <com.matburt.mobileorg.Gui.Wizard.DirectoryBrowser: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void reopenMenu(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean isOverflowMenuShowing()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchPause()> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean isOverflowMenuShowing()>
<com.actionbarsherlock.internal.widget.ActionBarView: android.os.Parcelable onSaveInstanceState()> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean isOverflowMenuShowing()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean isOverflowMenuShowing()>
<oauth.signpost.AbstractOAuthConsumer: void collectBodyParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpRequest: java.io.InputStream getMessagePayload()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setShortcutsVisible(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setShortcutsVisibleInner(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setShortcutsVisibleInner(boolean)>
<com.jcraft.jsch.ChannelAgentForwarding: void start()> --> <com.jcraft.jsch.ChannelAgentForwarding: void run()>
<com.jcraft.jsch.Channel$PassiveInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream,int)>
<org.json.simple.parser.JSONParser: void nextToken()> --> <org.json.simple.parser.Yylex: org.json.simple.parser.Yytoken yylex()>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])> --> <org.apache.james.mime4j.codec.EncoderUtil: int bEncodedLength(byte[])>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedTopNodeId()> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: java.lang.Object getSelectedItem()>
<com.matburt.mobileorg.Gui.Capture.LocationEntry$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: java.lang.Object getSelectedItem()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedNodeId(int)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: java.lang.Object getSelectedItem()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setIcon(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setIcon(int)>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.OAuth: void debugOut(java.lang.String,java.lang.String)>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.OAuth: void debugOut(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Gui.SearchActivity: void doSearch(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: android.database.Cursor search(java.lang.String,android.content.ContentResolver)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofKeyframe(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void <init>(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet)>
<com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC access$000(com.jcraft.jsch.KnownHosts)> --> <com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: void onDetachedFromWindow()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: int getMeasuredWidth()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: int getMeasuredWidth()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void checkFocus()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void updateEmptyStatus(boolean)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void setEmptyView(android.view.View)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void updateEmptyStatus(boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void remove(java.lang.Object)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void remove(com.matburt.mobileorg.OrgData.OrgNode)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void collapse(com.matburt.mobileorg.OrgData.OrgNode,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void remove(com.matburt.mobileorg.OrgData.OrgNode)>
<org.apache.http.message.BasicLineParser: boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: char charAt(int)>
<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: char charAt(int)>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: char charAt(int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: char charAt(int)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: char charAt(int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: char charAt(int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> --> <org.apache.http.util.CharArrayBuffer: char charAt(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setVisibility(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setVisibility(int)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.lang.String testConnection(java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: boolean isConfigured()>
<oauth.signpost.OAuth: java.lang.String percentEncode(java.lang.String)> --> <com.google.gdata.util.common.base.PercentEscaper: java.lang.String escape(java.lang.String)>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpHost: java.lang.String toHostString()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.view.MenuItem: android.graphics.drawable.Drawable getIcon()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.view.MenuItem: android.graphics.drawable.Drawable getIcon()>
<org.apache.james.mime4j.parser.AbstractEntity: void monitor(org.apache.james.mime4j.parser.Event)> --> <org.apache.james.mime4j.parser.AbstractEntity: void warn(org.apache.james.mime4j.parser.Event)>
<com.dropbox.client2.session.WebAuthSession: java.util.Map setUpToken(java.lang.String)> --> <com.dropbox.client2.session.WebAuthSession: void setAccessTokenPair(com.dropbox.client2.session.AccessTokenPair)>
<com.dropbox.client2.session.WebAuthSession: java.lang.String retrieveWebAccessToken(com.dropbox.client2.session.RequestTokenPair)> --> <com.dropbox.client2.session.WebAuthSession: void setAccessTokenPair(com.dropbox.client2.session.AccessTokenPair)>
<org.apache.http.protocol.RequestUserAgent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.params.HttpProtocolParams: java.lang.String getUserAgent(org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int positionChildInverse(android.view.View,int,int,int)>
<org.apache.james.mime4j.message.Message: void <init>()> --> <org.apache.james.mime4j.message.Entity: void <init>()>
<org.apache.james.mime4j.message.Message: void <init>(java.io.InputStream,org.apache.james.mime4j.parser.MimeEntityConfig,org.apache.james.mime4j.storage.StorageProvider)> --> <org.apache.james.mime4j.message.Entity: void <init>()>
<org.apache.james.mime4j.message.BodyPart: void <init>()> --> <org.apache.james.mime4j.message.Entity: void <init>()>
<org.apache.http.impl.AbstractHttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)> --> <org.apache.http.impl.entity.EntityDeserializer: org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>
<org.apache.http.impl.AbstractHttpClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)> --> <org.apache.http.impl.entity.EntityDeserializer: org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>
<com.matburt.mobileorg.Services.TimeclockDialog: void onStart()> --> <com.matburt.mobileorg.Services.TimeclockDialog: android.content.ContentResolver getContentResolver()>
<com.matburt.mobileorg.Services.TimeclockDialog: void saveClock(int,int)> --> <com.matburt.mobileorg.Services.TimeclockDialog: android.content.ContentResolver getContentResolver()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onCreatePanelMenu(int,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)>
<org.apache.http.entity.mime.FormBodyPart: void <init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.http.entity.mime.FormBodyPart: void setHeader(org.apache.james.mime4j.message.Header)>
<com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: int access$100(com.jcraft.jsch.ChannelSftp,byte[],long,byte[],int,int)>
<com.matburt.mobileorg.Services.TimeclockDialog: void onStart()> --> <com.matburt.mobileorg.Services.TimeclockDialog: void setTitle(java.lang.CharSequence)>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.message.Header getHeader()>
<com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setShortcut(boolean,char)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.String getShortcutLabel()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void setupLocation()> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getSiblingsStringArray(android.content.ContentResolver)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()> --> <org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()> --> <org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)> --> <org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void browseTo(java.lang.String)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void <init>(android.content.Context,com.dropbox.client2.DropboxAPI)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void browseTo(java.lang.String)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_0(int,int)>
<com.jcraft.jsch.Channel: java.io.InputStream getInputStream()> --> <com.jcraft.jsch.Channel$PassiveOutputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedInputStream)>
<com.jcraft.jsch.Channel: java.io.InputStream getExtInputStream()> --> <com.jcraft.jsch.Channel$PassiveOutputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedInputStream)>
<org.apache.james.mime4j.field.language.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)> --> <org.apache.james.mime4j.field.language.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getBeginLine()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void removeTabAt(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: void setPosition(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void configureTab(com.actionbarsherlock.app.ActionBar$Tab,int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: void setPosition(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: java.lang.Object getItem(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void init()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void clear()>
<com.matburt.mobileorg.Gui.SearchActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void clear()>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void setState(long[])> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void clear()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.Animator clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet clone()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void init(java.io.OutputStream,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.HttpTransportMetricsImpl: void <init>()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.HttpTransportMetricsImpl: void <init>()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void displayNewUserDialogs()> --> <com.matburt.mobileorg.util.PreferenceUtils: boolean isSyncConfigured()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity$SynchServiceReceiver: void onReceive(android.content.Context,android.content.Intent)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: com.actionbarsherlock.view.MenuItem access$100(com.matburt.mobileorg.Gui.Outline.OutlineActivity)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: boolean onContextItemSelected(android.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void startActivity(android.content.Intent)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void startActivity(android.content.Intent)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void showBlockAgendaFragment(int)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void startActivity(android.content.Intent)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void phrase()> --> <org.apache.james.mime4j.field.address.parser.ASTphrase: void <init>(int)>
<com.actionbarsherlock.internal.app.ActionBarWrapper: com.actionbarsherlock.app.ActionBar$Tab newTab()> --> <com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void <init>(com.actionbarsherlock.internal.app.ActionBarWrapper,android.app.ActionBar$Tab)>
<com.matburt.mobileorg.Gui.Wizard.WizardView$1: void start()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView$1: void run()>
<com.dropbox.client2.session.AbstractSession: void sign(org.apache.http.HttpRequest)> --> <com.dropbox.client2.session.AbstractSession: java.lang.String buildOAuthHeader(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.AccessTokenPair)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setChecked(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setExclusiveItemChecked(com.actionbarsherlock.view.MenuItem)>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.lang.String getRootUrl()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.lang.String getRootUrl()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setTitle(java.lang.CharSequence)>
<com.jcraft.jsch.ChannelSftp: void access$1000(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,int)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getUpperBound()>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getUpperBound()>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getUpperBound()>
<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getUpperBound()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> --> <org.apache.http.message.ParserCursor: int getUpperBound()>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.ParserCursor: int getUpperBound()>
<org.apache.http.entity.HttpEntityWrapper: void consumeContent()> --> <org.apache.http.HttpEntity: void consumeContent()>
<oauth.signpost.commonshttp.CommonsHttpOAuthProvider: void closeConnection(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse)> --> <org.apache.http.HttpEntity: void consumeContent()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: void consumeContent()>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncNode(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.util.MultiMap,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNodePayload getOrgNodePayload()>
<com.matburt.mobileorg.Services.TimeclockService: void getEstimated()> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNodePayload getOrgNodePayload()>
<com.matburt.mobileorg.Services.CalendarSyncService: void tryToInsertNode(com.matburt.mobileorg.util.MultiMap,com.matburt.mobileorg.OrgData.OrgNodeDate,java.lang.String,com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNodePayload getOrgNodePayload()>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void setPort(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void loginUbuntuOne()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void showToastRemote(java.lang.String)>
<org.apache.james.mime4j.message.MessageBuilder: void preamble(java.io.InputStream)> --> <org.apache.james.mime4j.message.Multipart: void setPreambleRaw(org.apache.james.mime4j.util.ByteSequence)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> --> <com.actionbarsherlock.app.SherlockActivity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void end()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void animateValue(float)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: boolean animationFrame(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void animateValue(float)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void animateValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void animateValue(float)>
<org.apache.http.entity.mime.FormBodyPart: void <init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.james.mime4j.message.BodyPart: void <init>()>
<org.apache.james.mime4j.message.MessageBuilder: void startBodyPart()> --> <org.apache.james.mime4j.message.BodyPart: void <init>()>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void refresh()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: long getItemId(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: long getCheckedNodeId()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: long getItemId(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void expandNodes(java.util.ArrayList)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: long getItemId(int)>
<com.actionbarsherlock.internal.widget.ActionBarView$1: void onItemSelected(com.actionbarsherlock.internal.widget.IcsAdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.internal.widget.ActionBarView: com.actionbarsherlock.app.ActionBar$OnNavigationListener access$000(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: boolean hasAddedItem()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runSynchronize(android.view.View)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: android.content.ComponentName startService(android.content.Intent)>
<com.jcraft.jsch.Session: void delPortForwardingR(int)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.ChannelForwardedTCPIP)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: java.lang.String day_of_week()> --> <org.apache.james.mime4j.field.datetime.parser.ParseException: void <init>()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int zone()> --> <org.apache.james.mime4j.field.datetime.parser.ParseException: void <init>()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int obs_zone()> --> <org.apache.james.mime4j.field.datetime.parser.ParseException: void <init>()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int month()> --> <org.apache.james.mime4j.field.datetime.parser.ParseException: void <init>()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void addChild(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgNode getOrgNodeFromFileAlias(java.lang.String,android.content.ContentResolver)>
<com.google.gdata.util.common.base.PercentEscaper: void <init>(java.lang.String,boolean)> --> <com.google.gdata.util.common.base.PercentEscaper: boolean[] createSafeOctets(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider: void start()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider: void run()>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void init(com.matburt.mobileorg.Gui.Capture.DatesFragment,android.widget.TableLayout,com.matburt.mobileorg.OrgData.OrgNodeTimeDate)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void prepareDateImage()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasureExactFormat(int,int)>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter$2: void onCheckedChanged(android.widget.CompoundButton,boolean)> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: int access$102(com.matburt.mobileorg.Gui.Wizard.FolderAdapter,int)>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: int access$102(com.matburt.mobileorg.Gui.Wizard.FolderAdapter,int)>
<com.dropbox.client2.session.AbstractSession$4: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>
<org.apache.http.impl.AbstractHttpClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>
<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>
<org.apache.james.mime4j.field.address.AddressList: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.address.AddressList: void print()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: android.view.View createWebDAVConfig()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: void setupDoneButton(android.view.View)>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.AbstractOAuthConsumer: void collectQueryParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)>
<org.apache.james.mime4j.field.MailboxField$1: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.MailboxField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<org.apache.http.params.HttpProtocolParamBean: void <init>(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpAbstractParamBean: void <init>(org.apache.http.params.HttpParams)>
<org.apache.http.params.HttpConnectionParamBean: void <init>(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpAbstractParamBean: void <init>(org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char BeginToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char readChar()>
<com.jcraft.jsch.ChannelX11: byte[] getFakedCookie(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Random: void fill(byte[],int,int)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Random: void fill(byte[],int,int)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> --> <com.jcraft.jsch.Random: void fill(byte[],int,int)>
<com.jcraft.jsch.Packet: void padding(int)> --> <com.jcraft.jsch.Random: void fill(byte[],int,int)>
<com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> --> <com.jcraft.jsch.Random: void fill(byte[],int,int)>
<com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.Random: void fill(byte[],int,int)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeCallbackWrapper: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper: void <init>(com.actionbarsherlock.internal.ActionBarSherlockNative,android.view.ActionMode)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: android.graphics.drawable.shapes.Shape getDrawableShape()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: boolean onContextItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockActivity: boolean onContextItemSelected(android.view.MenuItem)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeAddressLocalPart(java.lang.String)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeHeaderParameter(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeAddressDisplayName(java.lang.String)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String quote(java.lang.String)>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.http.entity.mime.HttpMultipart: java.lang.String getEpilogue()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView$NextPageButtonListener: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView)>
<com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy: long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.message.BasicHeaderElementIterator: void <init>(org.apache.http.HeaderIterator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setupEndValues()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void initAnimation()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setupStartValues()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void initAnimation()>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void <init>(android.view.View)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setFillAfter(boolean)>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.internal.app.ActionBarWrapper: android.app.Activity access$000(com.actionbarsherlock.internal.app.ActionBarWrapper)>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.internal.app.ActionBarWrapper: android.app.Activity access$000(com.actionbarsherlock.internal.app.ActionBarWrapper)>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.internal.app.ActionBarWrapper: android.app.Activity access$000(com.actionbarsherlock.internal.app.ActionBarWrapper)>
<com.jcraft.jsch.ChannelSession: void start()> --> <com.jcraft.jsch.ChannelSession: void run()>
<org.apache.james.mime4j.parser.AbstractEntity: boolean parseField()> --> <org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onRestoreInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setState(long[])>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.graphics.drawable.Drawable access$500(com.actionbarsherlock.internal.widget.ActionBarView)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.ParseException generateParseException()>
<org.apache.http.impl.io.ChunkedOutputStream: void close()> --> <org.apache.http.impl.io.ChunkedOutputStream: void finish()>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: void ensureCapacity(int)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: void expand(int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(java.lang.String,org.apache.http.message.HeaderValueParser)> --> <org.apache.http.message.HeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void eof_remote()>
<org.apache.http.HttpHost: java.lang.String toURI()> --> <org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)> --> <org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.http.message.BasicLineFormatter: void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)> --> <org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.http.HttpHost: java.lang.String toHostString()> --> <org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.http.message.ParserCursor: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)> --> <org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.http.message.BasicLineFormatter: void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)> --> <org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.http.ProtocolVersion: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)> --> <org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.http.message.BasicHeaderValueFormatter: void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean)> --> <org.apache.http.util.CharArrayBuffer: void append(char)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void setNextSelectedPositionInt(int)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: long getItemIdAtPosition(int)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void setSelectedPositionInt(int)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: long getItemIdAtPosition(int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setIntValues(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofInt(int[])>
<com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp$1: void flush()> --> <com.jcraft.jsch.ChannelSftp: boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Session: void <init>(com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob_rsa()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Channel: void sendOpenFailure(int)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.HostKey: void <clinit>()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ChannelExec: void setCommand(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KeyPair: void setPassphrase(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KeyPair: boolean decrypt(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ProxySOCKS4: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.RequestX11: void setCookie(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.IdentityFile: byte[] getPublicKeyBlob_dss()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_rsa(byte[])> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Session: void setClientVersion(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Channel: void <init>()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_dss(byte[])> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ChannelSession: byte[] toByteArray(java.lang.Object)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ChannelX11: void <init>()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KnownHosts: void <clinit>()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Session: void setPassword(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ChannelSession: void <clinit>()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KeyPairDSA: void <clinit>()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Session: void <clinit>()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ChannelSession: void setEnv(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Util: java.lang.String quote(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ProxyHTTP: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KeyPair: void <clinit>()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.ChannelAgentForwarding: void <init>()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.KeyPairRSA: void <clinit>()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.jcraft.jsch.Util: void <clinit>()> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)>
<com.dropbox.client2.android.AuthActivity: void onResume()> --> <com.dropbox.client2.android.AuthActivity: void finish()>
<com.dropbox.client2.android.AuthActivity: void onNewIntent(android.content.Intent)> --> <com.dropbox.client2.android.AuthActivity: void finish()>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getPaddingLeft()>
<org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor)> --> <org.apache.james.mime4j.util.MimeUtil: boolean isSameMimeType(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Agenda.AgendasActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.parser.Field: java.lang.String getName()>
<org.apache.james.mime4j.message.Header: int removeFields(java.lang.String)> --> <org.apache.james.mime4j.parser.Field: java.lang.String getName()>
<org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.parser.Field: java.lang.String getName()>
<org.apache.james.mime4j.message.Header: void setField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.parser.Field: java.lang.String getName()>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.james.mime4j.parser.Field: java.lang.String getName()>
<org.apache.james.mime4j.message.Header: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.parser.Field: java.lang.String getName()>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String getTokenSecret()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Buffer: void rewind()>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> --> <com.jcraft.jsch.Buffer: void rewind()>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void rewind()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.Buffer: void rewind()>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.Buffer: void rewind()>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.Buffer: void rewind()>
<com.jcraft.jsch.IdentityFile: boolean decrypt_rsa()> --> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
<com.jcraft.jsch.IdentityFile: boolean decrypt_dss()> --> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
<com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> --> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
<com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> --> <com.jcraft.jsch.Buffer: byte[] getMPIntBits()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_1(int,int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.ForwardedTCPIPDaemon: void setChannel(com.jcraft.jsch.ChannelForwardedTCPIP,java.io.InputStream,java.io.OutputStream)>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void invalidateAfterUpdate()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void computeRect(android.graphics.RectF,android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void prepareForUpdate()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void computeRect(android.graphics.RectF,android.view.View)>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.HostKeyRepository: int check(java.lang.String,byte[])>
<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.ParseException: void <init>(java.lang.String)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.ParseException: void <init>(java.lang.String)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.ParseException: void <init>(java.lang.String)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.ParseException: void <init>(java.lang.String)>
<org.apache.http.message.BasicTokenIterator: int findTokenSeparator(int)> --> <org.apache.http.ParseException: void <init>(java.lang.String)>
<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)> --> <org.apache.http.ParseException: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseLanguage(java.lang.String)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.util.List parse()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: android.view.View findViewForItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuView$ItemView: com.actionbarsherlock.internal.view.menu.MenuItemImpl getItemData()>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuView$ItemView: com.actionbarsherlock.internal.view.menu.MenuItemImpl getItemData()>
<com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void browseTo(java.lang.String)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: java.lang.String getParentPath(java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: long getCheckedNodeId()>
<org.apache.http.params.HttpProtocolParamBean: void setVersion(org.apache.http.HttpVersion)> --> <org.apache.http.params.HttpProtocolParams: void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard$3: void start()> --> <com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.lang.String testConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setInputMethodMode(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void onLayout(boolean,int,int,int,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onAttachedToWindow()> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: void onAttachedToWindow()>
<com.jcraft.jsch.ChannelSession: void start()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Session: void send_newkeys()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelSftp: void sendINIT()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Channel: void sendOpenConfirmation()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Channel: void sendOpenFailure(int)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelDirectTCPIP: void start()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Session: void sendKeepAliveMsg()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Channel$1: void flush()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Channel: void close()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Channel: void eof()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.Session: void sendIgnore()> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Packet: void reset()>
<com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.Packet: void reset()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.view.MenuItem: boolean hasSubMenu()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)> --> <com.actionbarsherlock.view.MenuItem: boolean hasSubMenu()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.view.MenuItem: boolean hasSubMenu()>
<org.apache.http.protocol.RequestDate: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpRequest: void setHeader(java.lang.String,java.lang.String)>
<com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> --> <com.jcraft.jsch.ChannelShell: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean isCollapsed()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean isCollapsed()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void animateToMode(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean isCollapsed()>
<com.actionbarsherlock.internal.ActionBarSherlockNative: boolean dispatchOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: boolean callbackOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa1_0(long)>
<com.dropbox.client2.jsonextract.JsonMap: void <init>(java.util.Map,java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonBase: void <init>(java.lang.Object,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing: void <init>(java.lang.Object)> --> <com.dropbox.client2.jsonextract.JsonBase: void <init>(java.lang.Object,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonBase: void <init>(java.lang.Object)> --> <com.dropbox.client2.jsonextract.JsonBase: void <init>(java.lang.Object,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonList: void <init>(java.util.List,java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonBase: void <init>(java.lang.Object,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonThing: void <init>(java.lang.Object,java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonBase: void <init>(java.lang.Object,java.lang.String)>
<com.matburt.mobileorg.Services.CalendarSyncService: void onCreate()> --> <com.matburt.mobileorg.Services.CalendarWrapper: void <init>(android.content.Context)>
<com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()> --> <com.actionbarsherlock.widget.ActivityChooserModel$ActivitySorter: void sort(android.content.Intent,java.util.List,java.util.List)>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void connect()> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)>
<com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: android.app.Dialog createTodoDialog()> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem$2: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineItem,java.util.ArrayList)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void setRemotePacketSize(int)>
<org.apache.james.mime4j.field.language.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.language.parser.ParseException: java.lang.String add_escapes(java.lang.String)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <com.dropbox.client2.session.AbstractSession$4: void <init>(com.dropbox.client2.session.AbstractSession)>
<com.actionbarsherlock.internal.widget.ActionBarView$SavedState: void <clinit>()> --> <com.actionbarsherlock.internal.widget.ActionBarView$SavedState$1: void <init>()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateProgressBars(int)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.internal.widget.IcsProgressBar getHorizontalProgressBar(boolean)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void resetList()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void invalidate()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setSelection(int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void invalidate()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean requestsActionButton()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void onAttachedToWindow()> --> <com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener: void onViewAttachedToWindow(android.view.View)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void onAttachedToWindow()> --> <com.actionbarsherlock.internal.view.View_OnAttachStateChangeListener: void onViewAttachedToWindow(android.view.View)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.MimeTokenStream: java.io.InputStream getInputStream()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void setContentHeight(int)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.session.Session: void sign(org.apache.http.HttpRequest)>
<com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <com.dropbox.client2.session.Session: void sign(org.apache.http.HttpRequest)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: void sign(org.apache.http.HttpRequest)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry commitChunkedUpload(java.lang.String,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.session.Session: void sign(org.apache.http.HttpRequest)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploadRequest chunkedUploadRequest(java.io.InputStream,long,com.dropbox.client2.ProgressListener,long,java.lang.String)> --> <com.dropbox.client2.session.Session: void sign(org.apache.http.HttpRequest)>
<com.dropbox.client2.jsonextract.JsonExtractionException: void <init>(java.lang.String,java.lang.String,java.lang.Object)> --> <com.dropbox.client2.jsonextract.JsonExtractionException: java.lang.String summarizeValue(java.lang.Object)>
<com.dropbox.client2.jsonextract.JsonExtractionException: java.lang.String summarizeValue(java.lang.Object)> --> <com.dropbox.client2.jsonextract.JsonExtractionException: java.lang.String summarizeValue(java.lang.Object)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void signRequest(org.apache.http.HttpRequest)> --> <org.apache.http.HttpRequest: void removeHeaders(java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.SocketInputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>
<org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.SocketInputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWord(java.lang.String,int,int)> --> <org.apache.james.mime4j.util.CharsetUtil: boolean isDecodingSupported(java.lang.String)>
<org.apache.james.mime4j.message.BodyFactory: java.nio.charset.Charset toJavaCharset(java.lang.String,boolean)> --> <org.apache.james.mime4j.util.CharsetUtil: boolean isDecodingSupported(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setEnabled(boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getChildCount()>
<com.actionbarsherlock.internal.widget.IcsSpinner: int getBaseline()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getChildCount()>
<com.dropbox.client2.jsonextract.JsonList$WrapperIterator: java.lang.Object next()> --> <com.dropbox.client2.jsonextract.JsonList$WrapperIterator: com.dropbox.client2.jsonextract.JsonThing next()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setInterpolator(android.content.Context,int)>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: void <init>(org.apache.http.HttpResponse)> --> <com.dropbox.client2.DropboxAPI$DropboxFileInfo: com.dropbox.client2.DropboxAPI$Entry parseXDropboxMetadata(org.apache.http.HttpResponse)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void ensureTabsExist()> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setTabContainer(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setHasEmbeddedTabs(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setTabContainer(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void lcd(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String localAbsolutePath(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: char BeginToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_4(int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfaWithStates_4(int,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void MoreLexicalActions()>
<org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()> --> <org.apache.http.message.BasicHttpRequest: org.apache.http.params.HttpParams getParams()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setShowHideAnimationEnabled(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void end()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void end()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void end()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void end()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void finishAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void end()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void setVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void end()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void animateToMode(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void end()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void end()>
<org.apache.james.mime4j.parser.MimeTokenStream: java.lang.String stateToString(int)> --> <org.apache.james.mime4j.parser.AbstractEntity: java.lang.String stateToString(int)>
<org.apache.james.mime4j.parser.AbstractEntity: java.lang.String toString()> --> <org.apache.james.mime4j.parser.AbstractEntity: java.lang.String stateToString(int)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.descriptor.BodyDescriptor getBodyDescriptor()> --> <org.apache.james.mime4j.parser.AbstractEntity: java.lang.String stateToString(int)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.parser.Field getField()> --> <org.apache.james.mime4j.parser.AbstractEntity: java.lang.String stateToString(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char[] GetSuffix(int)>
<com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: void add(int,long,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: java.lang.String stripTags(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: android.widget.EditText access$100(com.matburt.mobileorg.Gui.Capture.PayloadFragment)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: android.widget.EditText access$100(com.matburt.mobileorg.Gui.Capture.PayloadFragment)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void <init>(org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void ReInit(org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char BeginToken()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<com.commonsware.cwac.merge.MergeAdapter: void <init>()> --> <com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster: void <init>(com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int measureHeightOfChildren(int,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: int getCacheColorHint()>
<oauth.signpost.signature.PlainTextMessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.signature.PlainTextMessageSigner: java.lang.String getTokenSecret()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl,com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void <init>(android.content.Context,com.actionbarsherlock.internal.widget.ActionBarContextView,com.actionbarsherlock.view.ActionMode$Callback,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean initializePanelMenu()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void <init>(android.content.Context)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void close()> --> <com.matburt.mobileorg.Synchronizers.SynchronizerInterface: void postSynchronize()>
<com.jcraft.jsch.ChannelSftp: java.lang.String getHome()> --> <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String realpath(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.ASTname_addr: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.ASTname_addr,java.lang.Object)>
<org.apache.james.mime4j.parser.MimeStreamParser: boolean isRaw()> --> <org.apache.james.mime4j.parser.MimeTokenStream: boolean isRaw()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void setupLocation()> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getLocationEntry(com.matburt.mobileorg.OrgData.OrgNode,java.util.ArrayList,java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getTopLevelNode(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getLocationEntry(com.matburt.mobileorg.OrgData.OrgNode,java.util.ArrayList,java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void addChild(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.Gui.Capture.LocationEntry getLocationEntry(com.matburt.mobileorg.OrgData.OrgNode,java.util.ArrayList,java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void announceDateModified(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void insertOrReplaceDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE,java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.widget.ActionBarView$SavedState: android.os.Parcelable getSuperState()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: void loginWebdav()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard$2: void <init>(com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard,java.lang.String,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_4()>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.Gui.Capture.EditActivityController getController(java.lang.String,long,java.lang.String,android.content.Intent,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityControllerCreate: void <init>(android.content.Intent,java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: com.matburt.mobileorg.Gui.Capture.DateTableRow getDateTableRow(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void init(com.matburt.mobileorg.Gui.Capture.DatesFragment,android.widget.TableLayout,com.matburt.mobileorg.OrgData.OrgNodeTimeDate)>
<com.matburt.mobileorg.OrgData.OrgEdit: void set(android.database.Cursor)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void setType(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$1: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet,java.util.ArrayList)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToEdit(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment$OnPayloadModifiedListener: void onPayloadStartedEdit()>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String stripDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void prepareCleanedPayload()>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.ArrayList stripFileProperties()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void prepareCleanedPayload()>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.ArrayList stripProperties()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void prepareCleanedPayload()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void ReInit(org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void ReInitRounds()>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_rsa(byte[])> --> <com.jcraft.jsch.SignatureRSA: byte[] sign()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setInterpolator(android.view.animation.Interpolator)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setInterpolator(android.view.animation.Interpolator)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setInterpolator(android.view.animation.Interpolator)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setInterpolator(android.view.animation.Interpolator)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStopStringLiteralDfa_3(int,long)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: android.content.Intent getIntent()>
<org.json.simple.JSONValue: void writeJSONString(java.lang.Object,java.io.Writer)> --> <org.json.simple.JSONObject: void writeJSONString(java.util.Map,java.io.Writer)>
<org.json.simple.JSONObject: void writeJSONString(java.io.Writer)> --> <org.json.simple.JSONObject: void writeJSONString(java.util.Map,java.io.Writer)>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.Gui.Capture.EditActivityController getController(java.lang.String,long,java.lang.String,android.content.Intent,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityControllerEdit: void <init>(long,android.content.ContentResolver)>
<com.jcraft.jsch.ChannelSftp$LsEntry: void <init>(com.jcraft.jsch.ChannelSftp,java.lang.String,java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp$LsEntry: void setFilename(java.lang.String)>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void start()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void start()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStopStringLiteralDfa_1(int,long)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStopStringLiteralDfa_1(int,long)>
<com.dropbox.client2.RESTUtility: boolean isRequestRepeatable(org.apache.http.HttpRequest)> --> <org.apache.http.HttpEntity: boolean isRepeatable()>
<org.apache.http.entity.HttpEntityWrapper: boolean isRepeatable()> --> <org.apache.http.HttpEntity: boolean isRepeatable()>
<org.apache.http.entity.BufferedHttpEntity: void <init>(org.apache.http.HttpEntity)> --> <org.apache.http.HttpEntity: boolean isRepeatable()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void updateEmptyStatus(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getBottom()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getBeginColumn()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: boolean isInTouchMode()>
<com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> --> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()>
<com.jcraft.jsch.KeyPair: java.lang.String getFingerPrint()> --> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()>
<com.jcraft.jsch.JSch: com.jcraft.jsch.Session getSession(java.lang.String,java.lang.String,int)> --> <com.jcraft.jsch.Session: void setUserName(java.lang.String)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: int byteAt(int)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void browseTo(java.lang.String)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: java.lang.String getParentPath(java.lang.String)>
<org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.MimeException: void <init>(java.lang.String)>
<org.apache.james.mime4j.io.MaxHeaderLimitException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.MimeException: void <init>(java.lang.String)>
<org.apache.james.mime4j.parser.MimeParseEventException: void <init>(org.apache.james.mime4j.parser.Event)> --> <org.apache.james.mime4j.MimeException: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParsedField parse(org.apache.james.mime4j.util.ByteSequence,java.lang.String)> --> <org.apache.james.mime4j.MimeException: void <init>(java.lang.String)>
<org.apache.james.mime4j.MimeIOException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.MimeException: void <init>(java.lang.String)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onMenuOpened(int,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchMenuOpened(int,android.view.Menu)>
<com.actionbarsherlock.app.SherlockActivity: boolean onMenuOpened(int,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchMenuOpened(int,android.view.Menu)>
<com.actionbarsherlock.app.SherlockFragmentActivity: boolean onMenuOpened(int,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchMenuOpened(int,android.view.Menu)>
<com.actionbarsherlock.app.SherlockListActivity: boolean onMenuOpened(int,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchMenuOpened(int,android.view.Menu)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onMenuOpened(int,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchMenuOpened(int,android.view.Menu)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(java.io.InputStream)> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: void <init>(org.apache.james.mime4j.storage.Storage)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.BinaryBody binaryBody(org.apache.james.mime4j.storage.Storage)> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: void <init>(org.apache.james.mime4j.storage.Storage)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(org.apache.james.mime4j.storage.Storage)> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: void <init>(org.apache.james.mime4j.storage.Storage)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.BinaryBody binaryBody(java.io.InputStream)> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: void <init>(org.apache.james.mime4j.storage.Storage)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(org.apache.james.mime4j.storage.Storage,java.lang.String)> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: void <init>(org.apache.james.mime4j.storage.Storage)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: void <init>(org.apache.james.mime4j.storage.Storage)>
<com.dropbox.client2.jsonextract.JsonMap$WrapperIterator: void <init>(java.lang.String,java.util.Iterator,com.dropbox.client2.jsonextract.JsonMap$1)> --> <com.dropbox.client2.jsonextract.JsonMap$WrapperIterator: void <init>(java.lang.String,java.util.Iterator)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.conn.scheme.SchemeRegistry: void <init>()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] unquote(byte[])>
<com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] unquote(byte[])>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader$1: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel: void access$1000(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: android.content.Context getContext()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void route()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void name_addr()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void mailbox()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void phrase()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void local_part()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean onKey(android.view.View,int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void dismiss()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean hideOverflowMenu()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void dismiss()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onCloseMenu(com.actionbarsherlock.internal.view.menu.MenuBuilder,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void dismiss()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onGlobalLayout()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void dismiss()>
<org.json.simple.JSONObject: void writeJSONString(java.util.Map,java.io.Writer)> --> <org.json.simple.JSONObject: java.lang.String escape(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxLogin()> --> <com.dropbox.client2.android.AndroidAuthSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: com.dropbox.client2.android.AndroidAuthSession buildSession()> --> <com.dropbox.client2.android.AndroidAuthSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgFile getOrgFile(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getFilename(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void deleteFileNode()> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: boolean isFilenode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit createParentNewheading(android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(long,android.content.ContentResolver)>
<com.matburt.mobileorg.Services.TimeclockService: void updateTime()> --> <com.matburt.mobileorg.Services.TimeclockService: java.lang.String getElapsedTimeString()>
<com.matburt.mobileorg.Services.TimeclockDialog: void onStart()> --> <com.matburt.mobileorg.Services.TimeclockService: java.lang.String getElapsedTimeString()>
<com.matburt.mobileorg.Services.TimeclockDialog: void saveClock(int,int)> --> <com.matburt.mobileorg.Services.TimeclockService: java.lang.String getElapsedTimeString()>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> --> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
<com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> --> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Util: byte[] fromBase64(byte[],int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_2()>
<oauth.signpost.AbstractOAuthConsumer: void setMessageSigner(oauth.signpost.signature.OAuthMessageSigner)> --> <oauth.signpost.signature.OAuthMessageSigner: void setConsumerSecret(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_1(int,int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void setId(int)>
<com.matburt.mobileorg.Settings.SettingsActivity$1: boolean onPreferenceClick(android.preference.Preference)> --> <com.matburt.mobileorg.Settings.SettingsActivity$1$1: void <init>(com.matburt.mobileorg.Settings.SettingsActivity$1)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: java.util.ArrayList getListeners()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: java.util.ArrayList getListeners()>
<com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster: void setActive(android.view.View,boolean)> --> <com.commonsware.cwac.sacklist.SackOfViewsAdapter: boolean hasView(android.view.View)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: int loadUiOptionsFromManifest(android.app.Activity)>
<com.jcraft.jsch.jcraft.HMACMD5: void <init>()> --> <com.jcraft.jsch.jcraft.HMACMD5: void setH(java.security.MessageDigest)>
<org.apache.http.impl.io.HttpRequestParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.AbstractMessageParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.params.HttpParams)>
<org.apache.http.impl.io.HttpResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.AbstractMessageParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.params.HttpParams)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$2: void <clinit>()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE: com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE[] values()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: com.matburt.mobileorg.OrgData.OrgNode getEditedNode()> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: com.matburt.mobileorg.OrgData.OrgNode getEditedOrgNode()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void run()>
<com.dropbox.client2.ProgressListener$Adjusted: void onProgress(long,long)> --> <com.dropbox.client2.ProgressListener: void onProgress(long,long)>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream: void write(int)> --> <com.dropbox.client2.ProgressListener: void onProgress(long,long)>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void copyStreamToOutput(java.io.OutputStream,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.ProgressListener: void onProgress(long,long)>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream: void write(byte[],int,int)> --> <com.dropbox.client2.ProgressListener: void onProgress(long,long)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void dismiss()>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header getLastHeader(java.lang.String)> --> <org.apache.http.message.HeaderGroup: org.apache.http.Header getLastHeader(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void measureScrapChild(android.view.View,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: int getPaddingLeft()>
<org.apache.james.mime4j.field.AddressListField: void parse()> --> <org.apache.james.mime4j.field.address.parser.ParseException: java.lang.String getMessage()>
<org.apache.james.mime4j.field.MailboxListField: void parse()> --> <org.apache.james.mime4j.field.address.parser.ParseException: java.lang.String getMessage()>
<org.apache.james.mime4j.field.MailboxField: void parse()> --> <org.apache.james.mime4j.field.address.parser.ParseException: java.lang.String getMessage()>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void <init>()> --> <com.actionbarsherlock.app.SherlockActivity: void <init>()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void <init>()> --> <com.actionbarsherlock.app.SherlockActivity: void <init>()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void <init>()> --> <com.actionbarsherlock.app.SherlockActivity: void <init>()>
<com.matburt.mobileorg.Gui.SearchActivity: void <init>()> --> <com.actionbarsherlock.app.SherlockActivity: void <init>()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean showOverflowMenu()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: int getCount()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: void findExpandedIndex()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: com.actionbarsherlock.internal.view.menu.MenuItemImpl getItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setFocusable(boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setHomeButtonEnabled(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setFocusable(boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.MenuItem getItem(int)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.MenuItem getItem(int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem findItem(int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem findItem(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem findItem(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem findItem(int)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$DatePickerDialogFragment: void <init>(com.matburt.mobileorg.Gui.Capture.DateTableRow,android.app.DatePickerDialog$OnDateSetListener)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList runSynchronizer(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void announceSyncDone()>
<com.matburt.mobileorg.Services.SyncService: void runSynchronizer()> --> <com.matburt.mobileorg.OrgData.OrgFileParser: void <init>(com.matburt.mobileorg.OrgData.OrgDatabase,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.FileDecryptionActivity: void onActivityResult(int,int,android.content.Intent)> --> <com.matburt.mobileorg.OrgData.OrgFileParser: void <init>(com.matburt.mobileorg.OrgData.OrgDatabase,android.content.ContentResolver)>
<org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWord(java.lang.String,int,int)> --> <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeQ(java.lang.String,java.lang.String)>
<org.apache.james.mime4j.message.MessageWriter: void writeEntity(org.apache.james.mime4j.message.Entity,java.io.OutputStream)> --> <org.apache.james.mime4j.message.MessageWriter: void writeHeader(org.apache.james.mime4j.message.Header,java.io.OutputStream)>
<org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,java.util.Collection)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList(java.lang.String,java.lang.Iterable)>
<org.apache.james.mime4j.codec.Base64OutputStream: void close0()> --> <org.apache.james.mime4j.codec.Base64OutputStream: void writePad()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean expandActionView()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStopStringLiteralDfa_0(int,long)>
<com.dropbox.client2.session.WebAuthSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType)> --> <com.dropbox.client2.session.AbstractSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType)>
<com.dropbox.client2.android.AndroidAuthSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType)> --> <com.dropbox.client2.session.AbstractSession: void <init>(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.Session$AccessType)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setAdapter(android.widget.ListAdapter)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void setAdapter(android.widget.ListAdapter)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void setAdapter(android.widget.ListAdapter)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void dispatchRestoreInstanceState(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter: void onRestoreInstanceState(android.os.Parcelable)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean hasDividerBeforeChildAt(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView$ActionMenuChildView: boolean needsDividerBefore()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: void notifyDataSetChanged()>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.HttpEntity deserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void setTranslationX(float)>
<com.jcraft.jsch.Session: void start_discard(com.jcraft.jsch.Buffer,com.jcraft.jsch.Cipher,com.jcraft.jsch.MAC,int,int)> --> <com.jcraft.jsch.Cipher: boolean isCBC()>
<org.apache.http.entity.mime.FormBodyPart: void addField(java.lang.String,java.lang.String)> --> <org.apache.http.entity.mime.FormBodyPart: org.apache.james.mime4j.message.Header getHeader()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void notifyListenerOfChange()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$DateTableRowListener: void onDateTableRowModified(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void setOrgIPAddress(java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setSubtitle(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setSubtitle(java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void access$000(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void setSelector(android.graphics.drawable.Drawable)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void handleDropboxResume()> --> <com.dropbox.client2.android.AndroidAuthSession: boolean authenticationSuccessful()>
<com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor: com.dropbox.client2.DropboxAPI$DeltaEntry extract(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor: com.dropbox.client2.DropboxAPI$DeltaEntry extract(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.OAuthConsumer: java.lang.String getConsumerSecret()>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void removeAllViewsInLayout()>
<com.actionbarsherlock.internal.widget.IcsSpinner: int getBaseline()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void removeAllViewsInLayout()>
<org.apache.james.mime4j.field.DelegatingFieldParser: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.DelegatingFieldParser: org.apache.james.mime4j.field.FieldParser getParser(java.lang.String)>
<com.dropbox.client2.DropboxAPI$DeltaPage: com.dropbox.client2.DropboxAPI$DeltaPage extractFromJson(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor: void <init>(com.dropbox.client2.jsonextract.JsonExtractor)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void onDismiss()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void onDismiss()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onDismiss()>
<com.actionbarsherlock.internal.ActionBarSherlockNative: boolean dispatchPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: boolean callbackPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.PortWatcher: void delete()>
<com.jcraft.jsch.PortWatcher: void delPort(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.PortWatcher: void delete()>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.PortWatcher: void delete()>
<com.matburt.mobileorg.util.OrgUtils: boolean isNetworkOnline(android.content.Context)> --> <com.matburt.mobileorg.util.OrgUtils: boolean isWifiOnline(android.content.Context)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<com.commonsware.cwac.sacklist.SackOfViewsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.commonsware.cwac.sacklist.SackOfViewsAdapter: android.view.View newView(int,android.view.ViewGroup)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: boolean isOverflowReserved()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean isOverflowReserved()>
<org.apache.http.entity.mime.MultipartEntity: long getContentLength()> --> <org.apache.http.entity.mime.HttpMultipart: long getTotalLength()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: com.actionbarsherlock.internal.view.menu.MenuItemImpl getItem(int)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: com.actionbarsherlock.internal.view.menu.MenuItemImpl getItem(int)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: java.lang.Object getItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: com.actionbarsherlock.internal.view.menu.MenuItemImpl getItem(int)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isPayloadEditable()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isPayloadEditable()>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void FillBuff()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void measure(int,int)>
<com.commonsware.cwac.merge.MergeAdapter: void addAdapter(android.widget.ListAdapter)> --> <com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster: void add(android.widget.ListAdapter)>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: com.matburt.mobileorg.util.SelectionBuilder getQuery(android.content.Context)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getActiveTodos(android.content.ContentResolver)>
<com.matburt.mobileorg.Services.CalendarSyncService: void refreshPreferences()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getActiveTodos(android.content.ContentResolver)>
<com.jcraft.jsch.KeyPairRSA: void dispose()> --> <com.jcraft.jsch.KeyPair: void dispose()>
<com.jcraft.jsch.KeyPair: void finalize()> --> <com.jcraft.jsch.KeyPair: void dispose()>
<com.jcraft.jsch.KeyPairDSA: void dispose()> --> <com.jcraft.jsch.KeyPair: void dispose()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getPaddingTop()>
<org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)> --> <org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.UnstructuredField subject(java.lang.String)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeIfNecessary(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: java.lang.CharSequence getTitle()>
<com.actionbarsherlock.internal.ActionBarSherlockNative: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper: void finish()>
<com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList generateApplyEditNodes(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParentSafe(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit createParentNewheading(android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getParentSafe(java.lang.String,android.content.ContentResolver)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasureExactFormat(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int measureChildForCells(android.view.View,int,int,int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int measureChildForCells(android.view.View,int,int,int,int)>
<org.apache.http.impl.io.HttpRequestParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.message.LineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.message.LineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: boolean shouldIncludeItem(int,com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: android.view.LayoutInflater access$300(com.actionbarsherlock.internal.view.menu.MenuPopupHelper)>
<org.apache.james.mime4j.message.MessageWriter: void writeBytes(org.apache.james.mime4j.util.ByteSequence,java.io.OutputStream)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: int length()>
<org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.james.mime4j.util.ByteArrayBuffer,java.io.OutputStream)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: int length()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: void write0(byte[],int,int)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: int length()>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: int length()>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: int length()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: int length()>
<org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: int doReadLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.util.ByteArrayBuffer: int length()>
<org.apache.james.mime4j.storage.MemoryStorageProvider$MemoryStorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: int length()>
<org.apache.james.mime4j.parser.AbstractEntity: boolean parseField()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: int length()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: android.content.ContentResolver access$200(com.matburt.mobileorg.Gui.Outline.OutlineListView)>
<org.apache.james.mime4j.codec.EncoderUtil$Encoding: void <clinit>()> --> <org.apache.james.mime4j.codec.EncoderUtil$Encoding: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.address.parser.ASTaddress: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.ASTaddress,java.lang.Object)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void saveSettings()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: java.lang.String getCheckedDirectory()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void saveSettings()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: java.lang.String getCheckedDirectory()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: void saveSettings()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: java.lang.String getCheckedDirectory()>
<com.actionbarsherlock.widget.ActivityChooserView$2: void onGlobalLayout()> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean isShown()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setDataModel(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean isShown()>
<com.actionbarsherlock.app.SherlockListActivity: boolean onCreatePanelMenu(int,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockListActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.lang.String getSubType()>
<com.matburt.mobileorg.Gui.TabsAdapter: android.support.v4.app.Fragment getItem(int)> --> <com.matburt.mobileorg.Gui.TabsAdapter$TabInfo: java.lang.Class access$000(com.matburt.mobileorg.Gui.TabsAdapter$TabInfo)>
<com.actionbarsherlock.widget.ShareActionProvider: void setShareIntent(android.content.Intent)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void setIntent(android.content.Intent)>
<com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: int access$000(com.jcraft.jsch.ChannelSftp)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()> --> <org.apache.james.mime4j.parser.RawEntity: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.parser.MimeTokenStream: void doParse(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.parser.RawEntity: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMimeEntity()> --> <org.apache.james.mime4j.parser.RawEntity: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.field.address.parser.ASTlocal_part: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.ASTlocal_part,java.lang.Object)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInit(org.apache.james.mime4j.field.address.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void <init>(org.apache.james.mime4j.field.address.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.ASTaddress: void <init>(int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState: void <clinit>()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState$1: void <init>()>
<com.dropbox.client2.RESTUtility: java.lang.String buildURL(java.lang.String,int,java.lang.String,java.lang.String[])> --> <com.dropbox.client2.RESTUtility: java.lang.String urlencode(java.lang.String[])>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void saveEdits(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgEdit: long write(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: void addLogbook(long,long,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: long write(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: void generateApplyWriteEdits(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: long write(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit archiveNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: long write(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit archiveNodeToSibling(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: long write(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: void deleteNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: long write(android.content.ContentResolver)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView createTabView(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void setFocusable(boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean showOverflowMenu()> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void onSubUiVisibilityChanged(boolean)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encodeChunk(byte[],int,int)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encode(byte)>
<org.apache.http.impl.io.AbstractMessageWriter: void write(org.apache.http.HttpMessage)> --> <org.apache.http.impl.io.AbstractMessageWriter: void writeHeadLine(org.apache.http.HttpMessage)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void <init>(com.actionbarsherlock.internal.ActionBarSherlockCompat)>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: boolean verify(byte[])>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: boolean verify(byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: boolean verify(byte[])>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char BeginToken()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.IO: int getByte()>
<com.actionbarsherlock.app.SherlockListActivity: boolean onPreparePanel(int,android.view.View,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockListActivity: boolean onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setMax(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void refreshProgress(int,int,boolean)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setSecondaryProgress(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void refreshProgress(int,int,boolean)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgress(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void refreshProgress(int,int,boolean)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseContentDisposition(java.lang.String)>
<org.json.simple.parser.Yylex: org.json.simple.parser.Yytoken yylex()> --> <org.json.simple.parser.Yylex: java.lang.String yytext()>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.ChannelX11: void sendOpenConfirmation()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void selectionChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void sendAccessibilityEvent(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateInt(int,int,boolean)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: int getFeatures()>
<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.CharArrayBuffer: int indexOf(int)>
<org.apache.http.impl.io.ChunkedInputStream: int getChunkSize()> --> <org.apache.http.util.CharArrayBuffer: int indexOf(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_2()>
<org.apache.james.mime4j.codec.Base64InputStream: int decodePad(int,int,byte[],int,int)> --> <org.apache.james.mime4j.codec.Base64InputStream: void handleUnexpecedPad(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void <init>(org.apache.james.mime4j.field.address.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void <init>(org.apache.james.mime4j.field.address.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void <init>(org.apache.james.mime4j.field.address.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void <init>(org.apache.james.mime4j.field.address.parser.SimpleCharStream)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()> --> <org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.io.LineReaderInputStream getDataStream()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgress(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgress(int,boolean)>
<com.jcraft.jsch.JSch: com.jcraft.jsch.HostKeyRepository getHostKeyRepository()> --> <com.jcraft.jsch.KnownHosts: void <init>(com.jcraft.jsch.JSch)>
<com.jcraft.jsch.JSch: void setKnownHosts(java.lang.String)> --> <com.jcraft.jsch.KnownHosts: void <init>(com.jcraft.jsch.JSch)>
<com.jcraft.jsch.JSch: void setKnownHosts(java.io.InputStream)> --> <com.jcraft.jsch.KnownHosts: void <init>(com.jcraft.jsch.JSch)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: char BeginToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_4(int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInit(org.apache.james.mime4j.field.address.parser.SimpleCharStream)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void ReInitRounds()>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.http.entity.mime.MultipartEntity: void addPart(java.lang.String,org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.http.entity.mime.FormBodyPart: void <init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchTitleChanged(java.lang.CharSequence,int)>
<com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: java.lang.CharSequence getContentDescription()>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setCheckable(boolean)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder getAgendaEntry(int,int,android.content.Context)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setContentHeight(int)>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.TokenIterator: java.lang.String nextToken()>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.TokenIterator: java.lang.String nextToken()>
<com.jcraft.jsch.ChannelSession: void sendRequests()> --> <com.jcraft.jsch.RequestPtyReq: void setTSize(int,int,int,int)>
<com.dropbox.client2.android.AuthActivity: void onCreate(android.os.Bundle)> --> <com.dropbox.client2.android.AuthActivity: android.content.Intent getIntent()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getEndColumn()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: int getEndColumn()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void supportInvalidateOptionsMenu()> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: void invalidateOptionsMenu()>
<com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Channel: void setRecipient(int)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void setRecipient(int)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateFile(java.lang.String,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pull(com.matburt.mobileorg.OrgData.OrgFileParser,java.util.ArrayList,java.util.HashMap,java.util.HashMap)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Gui.FileDecryptionActivity: void onActivityResult(int,int,android.content.Intent)> --> <com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: void readGroup(android.util.AttributeSet)>
<com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)> --> <com.jcraft.jsch.ChannelX11: int revtable(byte)>
<org.apache.james.mime4j.codec.EncoderUtil: void <clinit>()> --> <org.apache.james.mime4j.codec.EncoderUtil: java.util.BitSet initChars(java.lang.String)>("()<>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void recycleAllViews()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: android.view.View getSelectedView()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: int pointToPosition(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: android.view.View getChildAt(int)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: android.content.ContentResolver getContentResolver()>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(java.lang.Object)> --> <oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest wrap(java.lang.Object)>
<org.apache.http.message.BasicHeaderElement: java.lang.String toString()> --> <org.apache.http.util.CharArrayBuffer: void append(java.lang.Object)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getPaddingRight()>
<org.apache.james.mime4j.field.contentdisposition.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ParseException: java.lang.String add_escapes(java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: java.util.List search(java.lang.String,java.lang.String,int,boolean)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink share(java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry addFromCopyRef(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry createFolder(java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: void delete(java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry restore(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DeltaPage delta(java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink media(java.lang.String,boolean)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry move(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Account accountInfo()> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: java.util.List revisions(java.lang.String,int)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry metadata(java.lang.String,int,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry copy(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$CreatedCopyRef createCopyRef(java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry commitChunkedUpload(java.lang.String,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getThumbnailStream(java.lang.String,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat)> --> <com.dropbox.client2.session.Session: java.util.Locale getLocale()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockActivity: void onCreate(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockActivity: void onCreate(android.os.Bundle)>
<com.matburt.mobileorg.Gui.SearchActivity: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockActivity: void onCreate(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockActivity: void onCreate(android.os.Bundle)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void handleDataChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void checkSelectionChanged()>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header[] getAllHeaders()> --> <org.apache.http.message.HeaderGroup: org.apache.http.Header[] getAllHeaders()>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.app.ActionBar$TabListener: void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.app.ActionBar$TabListener: void onTabSelected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean dispatchMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder$Callback: boolean onMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.view.MenuItem)>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.http.HttpResponse: int getStatusCode()>
<org.apache.http.message.BasicHeaderValueFormatter: void <clinit>()> --> <org.apache.http.message.BasicHeaderValueFormatter: void <init>()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem$1: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineItem)>
<org.apache.james.mime4j.message.Multipart: void <init>(org.apache.james.mime4j.message.Multipart)> --> <org.apache.james.mime4j.message.Multipart: void addBodyPart(org.apache.james.mime4j.message.BodyPart)>
<org.apache.james.mime4j.message.MessageBuilder: void startBodyPart()> --> <org.apache.james.mime4j.message.Multipart: void addBodyPart(org.apache.james.mime4j.message.BodyPart)>
<com.jcraft.jsch.Session: void disconnect()> --> <com.jcraft.jsch.ChannelX11: void removeFakedCookie(com.jcraft.jsch.Session)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> --> <com.jcraft.jsch.KeyPairDSA: int writeINTEGER(byte[],int,byte[])>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.view.MenuInflater: void inflate(int,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void <init>(android.content.Context,com.matburt.mobileorg.Synchronizers.SynchronizerInterface,com.matburt.mobileorg.Gui.SynchronizerNotificationCompat)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parseLine()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: int jj_ntk()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parse()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: int jj_ntk()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: java.lang.String value()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: int jj_ntk()>
<oauth.signpost.commonshttp.HttpRequestAdapter: java.lang.String getRequestUrl()> --> <org.apache.http.client.methods.HttpUriRequest: java.net.URI getURI()>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.MailboxList getFrom()> --> <org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.MailboxList getMailboxList(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard getWizard(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE,com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.matburt.mobileorg.Settings.SettingsActivity$1$1: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.content.ContentResolver getContentResolver()>
<com.matburt.mobileorg.Settings.SettingsActivity: void populateTodoKeywords()> --> <com.matburt.mobileorg.Settings.SettingsActivity: android.content.ContentResolver getContentResolver()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void parseLine()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: org.apache.james.mime4j.field.mimeversion.parser.Token jj_consume_token(int)>(1);     default: goto $r1 = $r0.<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: int[] jj_la1>
<com.actionbarsherlock.internal.widget.ActionBarContainer: boolean onTouchEvent(android.view.MotionEvent)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: boolean onTouchEvent(android.view.MotionEvent)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void setFocusable(boolean)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void buildConsumer()> --> <oauth.signpost.commonshttp.CommonsHttpOAuthConsumer: void <init>(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: void onPause()> --> <com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: void onResume()> --> <com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<com.matburt.mobileorg.OrgData.OrgFileParser: void init(com.matburt.mobileorg.OrgData.OrgFile)> --> <com.matburt.mobileorg.OrgData.OrgNodeParser: void <init>(java.util.ArrayList)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$4: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$EndTimePickerDialogFragment: void <init>(com.matburt.mobileorg.Gui.Capture.DateTableRow,android.app.TimePickerDialog$OnTimeSetListener)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.ViewFragment: void onActivityCreated(android.os.Bundle)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStopStringLiteralDfa_2(int,long)>
<org.apache.http.message.BasicHeaderElement: boolean equals(java.lang.Object)> --> <org.apache.http.util.LangUtils: boolean equals(java.lang.Object[],java.lang.Object[])>
<com.dropbox.client2.jsonextract.JsonList: com.dropbox.client2.jsonextract.JsonThing get(int)> --> <com.dropbox.client2.jsonextract.JsonList: java.lang.String pathConcatIndex(java.lang.String,int)>
<com.dropbox.client2.jsonextract.JsonList: java.lang.String access$000(java.lang.String,int)> --> <com.dropbox.client2.jsonextract.JsonList: java.lang.String pathConcatIndex(java.lang.String,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setTitle(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setTitle(java.lang.CharSequence)>
<oauth.signpost.AbstractOAuthConsumer: void collectBodyParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpRequest: java.lang.String getContentType()>
<com.jcraft.jsch.KeyPair: void writePublicKey(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getSelectedItemPosition()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: android.os.Parcelable onSaveInstanceState()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getSelectedItemPosition()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void parseLine()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.ConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> --> <com.jcraft.jsch.ChannelAgentForwarding: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelAgentForwarding: com.jcraft.jsch.Session getSession()>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.MimeTokenStream: java.io.InputStream getDecodedInputStream()>
<org.apache.james.mime4j.parser.MimeTokenStream: java.io.Reader getReader()> --> <org.apache.james.mime4j.parser.MimeTokenStream: java.io.InputStream getDecodedInputStream()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setSelectionInt(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void layout(int,boolean)>
<oauth.signpost.commonshttp.CommonsHttpOAuthProvider: void <init>(java.lang.String,java.lang.String,java.lang.String)> --> <org.apache.http.impl.client.DefaultHttpClient: void <init>()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.apache.http.impl.client.DefaultHttpClient: void <init>()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.apache.http.HttpResponse executeRequest(org.apache.http.client.methods.HttpUriRequest)> --> <org.apache.http.impl.client.DefaultHttpClient: void <init>()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <org.apache.http.impl.client.DefaultHttpClient: void <init>()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void ping_u1_url(java.lang.String)> --> <org.apache.http.impl.client.DefaultHttpClient: void <init>()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()> --> <org.apache.http.impl.client.DefaultHttpClient: void <init>()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)> --> <org.apache.http.impl.client.DefaultHttpClient: void <init>()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <org.apache.http.impl.client.DefaultHttpClient: void <init>()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: int getHeight()>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parseAll()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int second()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.SubMenu addSubMenu(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.SubMenu addSubMenu(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.SubMenu addSubMenu(int)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.SubMenu addInternal(android.view.SubMenu)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.SubMenu addSubMenu(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.SubMenu addInternal(android.view.SubMenu)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.SubMenu addInternal(android.view.SubMenu)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.SubMenu addInternal(android.view.SubMenu)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setExclusiveItemChecked(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setCheckedInt(boolean)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setChecked(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setCheckedInt(boolean)>
<com.dropbox.client2.jsonextract.JsonThing: java.lang.Object optionalExtract(com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonExtractor: java.lang.Object extract(com.dropbox.client2.jsonextract.JsonThing)>
<com.dropbox.client2.jsonextract.JsonList: java.util.ArrayList extract(com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonExtractor: java.lang.Object extract(com.dropbox.client2.jsonextract.JsonThing)>
<org.apache.james.mime4j.util.CharsetUtil: void <clinit>()> --> <org.apache.james.mime4j.util.CharsetUtil$Charset: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.apache.james.mime4j.util.CharsetUtil$1)>
<com.dropbox.client2.android.AndroidAuthSession: void startAuthentication(android.content.Context)> --> <com.dropbox.client2.android.AndroidAuthSession$1: void <init>(com.dropbox.client2.android.AndroidAuthSession)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: void setGroupEnabled(int,boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.view.MenuItem setEnabled(boolean)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeAddressLocalPart(java.lang.String)> --> <org.apache.james.mime4j.codec.EncoderUtil: boolean isDotAtomText(java.lang.String)>
<org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset getCharset()> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getCharset()>
<org.apache.james.mime4j.field.ContentTypeField: java.lang.String getCharset(org.apache.james.mime4j.field.ContentTypeField)> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getCharset()>
<org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: void addHeader(java.lang.String,java.lang.String)>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: void addHeader(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: int getIntValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: float getFraction()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: float getFraction()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader$1: void <init>(com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getEndLine()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getEndLine()>
<org.apache.james.mime4j.codec.CodecUtil: void encodeBase64(java.io.InputStream,java.io.OutputStream)> --> <org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream)>
<org.apache.james.mime4j.codec.CodecUtil: java.io.OutputStream wrapBase64(java.io.OutputStream)> --> <org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream)>
<com.actionbarsherlock.view.ActionProvider: void subUiVisibilityChanged(boolean)> --> <com.actionbarsherlock.view.ActionProvider$SubUiVisibilityListener: void onSubUiVisibilityChanged(boolean)>
<com.actionbarsherlock.widget.ActivityChooserView: boolean isShowingPopup()> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()>
<com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow access$100(com.actionbarsherlock.widget.ActivityChooserView)> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()>
<com.actionbarsherlock.widget.ActivityChooserView: boolean dismissPopup()> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()>
<com.actionbarsherlock.widget.ActivityChooserView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()>
<com.dropbox.client2.session.AbstractSession$2: void <init>(com.dropbox.client2.session.AbstractSession,org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.client.DefaultHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>
<com.matburt.mobileorg.Services.TimeclockDialog: void onStart()> --> <com.matburt.mobileorg.Services.TimeclockDialog: void parseElapsedTime(java.lang.String)>
<com.matburt.mobileorg.Settings.SettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.SettingsActivity: void init()>
<org.apache.james.mime4j.message.Entity: void dispose()> --> <org.apache.james.mime4j.message.Body: void dispose()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<com.dropbox.client2.session.AbstractSession: void setRequestTimeout(org.apache.http.client.methods.HttpUriRequest)> --> <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.apache.http.HttpResponse executeRequest(org.apache.http.client.methods.HttpUriRequest)> --> <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void ping_u1_url(java.lang.String)> --> <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<org.apache.http.params.HttpConnectionParamBean: void setSoTimeout(int)> --> <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)>
<com.jcraft.jsch.Channel: java.io.InputStream getInputStream()> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.Channel: java.io.InputStream getExtInputStream()> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int hour()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void postSynchronize()> --> <com.jcraft.jsch.Session: void disconnect()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Session: void disconnect()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Session: void disconnect()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStopStringLiteralDfa_2(int,long)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ParseException generateParseException()>
<com.actionbarsherlock.internal.app.ActionBarImpl$1: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorListenerAdapter: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$1: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet,java.util.ArrayList)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorListenerAdapter: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl$2: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorListenerAdapter: void <init>()>
<org.apache.james.mime4j.message.Entity: void setMultipart(org.apache.james.mime4j.message.Multipart,java.util.Map)> --> <org.apache.james.mime4j.message.Multipart: java.lang.String getSubType()>
<org.apache.james.mime4j.message.Entity: void setMultipart(org.apache.james.mime4j.message.Multipart)> --> <org.apache.james.mime4j.message.Multipart: java.lang.String getSubType()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()>
<oauth.signpost.AbstractOAuthConsumer: void completeOAuthParameters(oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpParameters: java.lang.String put(java.lang.String,java.lang.String,boolean)>
<oauth.signpost.http.HttpParameters: java.lang.String put(java.lang.String,java.lang.String)> --> <oauth.signpost.http.HttpParameters: java.lang.String put(java.lang.String,java.lang.String,boolean)>
<oauth.signpost.http.HttpParameters: void putAll(java.lang.String[],boolean)> --> <oauth.signpost.http.HttpParameters: java.lang.String put(java.lang.String,java.lang.String,boolean)>
<oauth.signpost.http.HttpParameters: java.util.SortedSet put(java.lang.String,java.util.SortedSet,boolean)> --> <oauth.signpost.http.HttpParameters: java.lang.String put(java.lang.String,java.lang.String,boolean)>
<com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Channel: void setRemoteWindowSize(long)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void setRemoteWindowSize(long)>
<oauth.signpost.exception.OAuthMessageSignerException: void <init>(java.lang.Exception)> --> <oauth.signpost.exception.OAuthException: void <init>(java.lang.Throwable)>
<com.actionbarsherlock.app.SherlockFragment: void onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: void <init>(android.view.Menu)>
<com.actionbarsherlock.internal.view.menu.SubMenuWrapper: void <init>(android.view.SubMenu)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: void <init>(android.view.Menu)>
<com.actionbarsherlock.app.SherlockDialogFragment: void onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: void <init>(android.view.Menu)>
<com.actionbarsherlock.app.SherlockDialogFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: void <init>(android.view.Menu)>
<com.actionbarsherlock.internal.ActionBarSherlockNative$ActionModeWrapper: com.actionbarsherlock.internal.view.menu.MenuWrapper getMenu()> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: void <init>(android.view.Menu)>
<com.actionbarsherlock.app.SherlockListFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: void <init>(android.view.Menu)>
<com.actionbarsherlock.app.SherlockFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: void <init>(android.view.Menu)>
<com.actionbarsherlock.internal.ActionBarSherlockNative: boolean dispatchCreateOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: void <init>(android.view.Menu)>
<com.actionbarsherlock.app.SherlockListFragment: void onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: void <init>(android.view.Menu)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void killMode()> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void removeView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void setTabContainer(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void removeView(android.view.View)>
<org.apache.http.entity.HttpEntityWrapper: org.apache.http.Header getContentEncoding()> --> <org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>
<com.dropbox.client2.session.AbstractSession$4: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>
<org.apache.http.impl.io.SocketInputBuffer: boolean isDataAvailable(int)> --> <org.apache.http.impl.io.SocketInputBuffer: boolean isSocketTimeoutException(java.io.InterruptedIOException)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean callbackPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void reopenMenu(boolean)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean callbackPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setCustomView(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setCustomView(android.view.View)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void refreshProgress(int,int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable: void setup(int,int,boolean)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onTitleChanged(java.lang.CharSequence,int)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchTitleChanged(java.lang.CharSequence,int)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onTitleChanged(java.lang.CharSequence,int)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchTitleChanged(java.lang.CharSequence,int)>
<com.actionbarsherlock.app.SherlockActivity: void onTitleChanged(java.lang.CharSequence,int)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchTitleChanged(java.lang.CharSequence,int)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onTitleChanged(java.lang.CharSequence,int)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchTitleChanged(java.lang.CharSequence,int)>
<com.actionbarsherlock.app.SherlockListActivity: void onTitleChanged(java.lang.CharSequence,int)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchTitleChanged(java.lang.CharSequence,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: android.content.Context access$300(com.matburt.mobileorg.Gui.Outline.OutlineListView)>
<org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeBase64(java.lang.String)> --> <org.apache.james.mime4j.codec.Base64InputStream: int read()>
<com.jcraft.jsch.ChannelShell: void init()> --> <com.jcraft.jsch.ChannelShell: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelShell: void start()> --> <com.jcraft.jsch.ChannelShell: com.jcraft.jsch.Session getSession()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void setWillNotDraw(boolean)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentTypeField contentType(java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeHeaderParameter(java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeHeaderParameter(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean isQwertyMode()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: char getShortcut()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean isQwertyMode()>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: boolean isQwertyMode()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean isQwertyMode()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean isQwertyMode()>
<com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void <init>(android.content.Context,com.dropbox.client2.DropboxAPI)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void setContext(android.content.Context)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>
<com.dropbox.client2.jsonextract.JsonExtractionException: java.lang.String summarizeValue(java.lang.Object)> --> <org.json.simple.JSONValue: java.lang.String toJSONString(java.lang.Object)>
<org.json.simple.JSONArray: java.lang.String toJSONString(java.util.List)> --> <org.json.simple.JSONValue: java.lang.String toJSONString(java.lang.Object)>
<org.json.simple.JSONObject: java.lang.String toJSONString(java.lang.String,java.lang.Object,java.lang.StringBuffer)> --> <org.json.simple.JSONValue: java.lang.String toJSONString(java.lang.Object)>
<com.commonsware.cwac.merge.MergeAdapter: void addViews(java.util.List,boolean)> --> <com.commonsware.cwac.merge.MergeAdapter: void addAdapter(android.widget.ListAdapter)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void addAgenda(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)> --> <com.commonsware.cwac.merge.MergeAdapter: void addAdapter(android.widget.ListAdapter)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void init(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void setGravity(int)>
<org.json.simple.ItemList: void addAll(java.lang.String,java.lang.String,boolean)> --> <org.json.simple.ItemList: void split(java.lang.String,java.lang.String,java.util.List,boolean)>
<org.json.simple.ItemList: void <init>(java.lang.String,java.lang.String,boolean)> --> <org.json.simple.ItemList: void split(java.lang.String,java.lang.String,java.util.List,boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runCaptureActivity(long,android.content.Context)> --> <com.matburt.mobileorg.util.PreferenceUtils: boolean useAdvancedCapturing()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Identity: byte[] getSignature(byte[])>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Identity: byte[] getSignature(byte[])>
<com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: void onResume()> --> <com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: void onPause()> --> <com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: android.preference.PreferenceScreen getPreferenceScreen()>
<com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable: void run()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void access$000(com.actionbarsherlock.internal.widget.IcsProgressBar,int,int,boolean,boolean)>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestSubsystem: boolean waitForReply()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getMeasuredWidth()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: int getMeasuredWidth()>
<com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey createHashedHostKey(java.lang.String,byte[])> --> <com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void fireOnSelected()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemSelectedListener: void onItemSelected(com.actionbarsherlock.internal.widget.IcsAdapterView,android.view.View,int,long)>
<com.jcraft.jsch.ChannelSession: void sendRequests()> --> <com.jcraft.jsch.ChannelSession: byte[] toByteArray(java.lang.Object)>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.ContentHandler: boolean startArray()>
<com.actionbarsherlock.app.SherlockFragmentActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchKeyEvent(android.view.KeyEvent)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchKeyEvent(android.view.KeyEvent)>
<com.actionbarsherlock.app.SherlockActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchKeyEvent(android.view.KeyEvent)>
<com.actionbarsherlock.app.SherlockListActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchKeyEvent(android.view.KeyEvent)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchKeyEvent(android.view.KeyEvent)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: java.util.List search(java.lang.String,java.lang.String,int,boolean)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink share(java.lang.String)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry addFromCopyRef(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry createFolder(java.lang.String)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: void delete(java.lang.String)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry restore(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink media(java.lang.String,boolean)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry move(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Account accountInfo()> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: java.util.List revisions(java.lang.String,int)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry metadata(java.lang.String,int,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry copy(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$CreatedCopyRef createCopyRef(java.lang.String)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry commitChunkedUpload(java.lang.String,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getThumbnailStream(java.lang.String,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat)> --> <com.dropbox.client2.DropboxAPI: void assertAuthenticated()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void closeMode()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void finishAnimation()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void killMode()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void finishAnimation()>
<org.apache.http.protocol.HttpRequestHandlerRegistry: org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String)> --> <org.apache.http.protocol.UriPatternMatcher: java.lang.Object lookup(java.lang.String)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAddrSpec(org.apache.james.mime4j.field.address.DomainList,org.apache.james.mime4j.field.address.parser.ASTaddr_spec)> --> <org.apache.james.mime4j.field.address.Builder: java.lang.String buildString(org.apache.james.mime4j.field.address.parser.SimpleNode,boolean)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Address buildAddress(org.apache.james.mime4j.field.address.parser.ASTaddress)> --> <org.apache.james.mime4j.field.address.Builder: java.lang.String buildString(org.apache.james.mime4j.field.address.parser.SimpleNode,boolean)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildNameAddr(org.apache.james.mime4j.field.address.parser.ASTname_addr)> --> <org.apache.james.mime4j.field.address.Builder: java.lang.String buildString(org.apache.james.mime4j.field.address.parser.SimpleNode,boolean)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.DomainList buildRoute(org.apache.james.mime4j.field.address.parser.ASTroute)> --> <org.apache.james.mime4j.field.address.Builder: java.lang.String buildString(org.apache.james.mime4j.field.address.parser.SimpleNode,boolean)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: void restoreInstanceState(android.os.Bundle)>
<org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.MailboxList flatten()> --> <org.apache.james.mime4j.field.address.Address: void addMailboxesTo(java.util.List)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean showOverflowMenu()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder,android.view.View,boolean)>
<com.matburt.mobileorg.Gui.ViewActivity: void setupRecursionSubmenu(com.actionbarsherlock.view.SubMenu)> --> <com.actionbarsherlock.view.SubMenu: com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.widget.ShareActionProvider: void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu)> --> <com.actionbarsherlock.view.SubMenu: com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void cancel()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void cancel()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void cancel()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void cancel()>
<com.jcraft.jsch.ChannelExec: void setErrStream(java.io.OutputStream,boolean)> --> <com.jcraft.jsch.ChannelExec: void setExtOutputStream(java.io.OutputStream,boolean)>
<com.matburt.mobileorg.Services.SyncService: void runSynchronizer()> --> <com.matburt.mobileorg.Services.SyncService: com.matburt.mobileorg.Synchronizers.Synchronizer getSynchronizer()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_1()>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void endTransaction()>
<org.apache.james.mime4j.message.MessageBuilder: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.BinaryBody binaryBody(java.io.InputStream)>
<org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(int)> --> <org.apache.james.mime4j.field.address.parser.BaseNode: void <init>()>
<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor,int)> --> <org.apache.http.protocol.BasicHttpProcessor: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getSuggestedMinimumWidth()>
<com.commonsware.cwac.merge.MergeAdapter: int getViewTypeCount()> --> <com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster: java.util.List getRawPieces()>
<com.commonsware.cwac.merge.MergeAdapter: int getItemViewType(int)> --> <com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster: java.util.List getRawPieces()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Animator: boolean isStarted()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: boolean isRunning()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: boolean isRunning()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: boolean isRunning()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStopStringLiteralDfa_0(int,long)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int measureChildView(android.view.View,int,int,int)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Util: java.lang.String diffString(java.lang.String,java.lang.String[])>
<com.jcraft.jsch.KeyPairDSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenDSA: byte[] getG()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.ArrayList access$000(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$AnimatorSetListener: void onAnimationCancel(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.ArrayList access$000(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.ArrayList access$000(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$DependencyListener: void startIfReady(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.ArrayList access$000(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.matburt.mobileorg.Settings.SynchronizerPreferences: android.view.View onCreateView(android.view.ViewGroup)> --> <com.matburt.mobileorg.Settings.SynchronizerPreferences$1: void <init>(com.matburt.mobileorg.Settings.SynchronizerPreferences)>
<com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> --> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: void <init>(org.apache.james.mime4j.storage.ThresholdStorageProvider)> --> <org.apache.james.mime4j.storage.ThresholdStorageProvider: int access$000(org.apache.james.mime4j.storage.ThresholdStorageProvider)>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: void write0(byte[],int,int)> --> <org.apache.james.mime4j.storage.ThresholdStorageProvider: int access$000(org.apache.james.mime4j.storage.ThresholdStorageProvider)>
<org.apache.james.mime4j.field.datetime.DateTime: java.lang.String toString()> --> <org.apache.james.mime4j.field.datetime.DateTime: int getHour()>
<org.apache.http.message.BasicHeaderElementIterator: void parseNextElement()> --> <org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()>
<com.actionbarsherlock.app.SherlockListActivity: void setContentView(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(int)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setContentView(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(int)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setContentView(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(int)>
<com.actionbarsherlock.app.SherlockActivity: void setContentView(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(int)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setContentView(int)> --> <com.actionbarsherlock.ActionBarSherlock: void setContentView(int)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void setTitle(int)> --> <com.actionbarsherlock.internal.view.StandaloneActionMode: void setTitle(java.lang.CharSequence)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void setShowDividers(int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void invalidate()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void setContentView(int)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void prepareButtons()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$4: void <init>(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestEnv: boolean waitForReply()>
<org.apache.http.impl.io.ChunkedInputStream: int read(byte[])> --> <org.apache.http.impl.io.ChunkedInputStream: int read(byte[],int,int)>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: void addHeader(org.apache.http.Header)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemSelected(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean callbackOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean onMenuItemSelected(int,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean callbackOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: java.util.List search(java.lang.String,java.lang.String,int,boolean)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink share(java.lang.String)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry addFromCopyRef(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry createFolder(java.lang.String)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: void delete(java.lang.String)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry restore(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink media(java.lang.String,boolean)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry move(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: java.util.List revisions(java.lang.String,int)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry metadata(java.lang.String,int,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry copy(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$CreatedCopyRef createCopyRef(java.lang.String)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry commitChunkedUpload(java.lang.String,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getThumbnailStream(java.lang.String,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$AccessType getAccessType()>
<org.apache.james.mime4j.parser.MimeTokenStream: void doParse(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.parser.MimeEntity: void skipHeader(java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void displayNewUserDialogs()> --> <com.matburt.mobileorg.util.PreferenceUtils: boolean isUpgradedVersion()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.james.mime4j.field.AddressListField: void parse()> --> <org.apache.commons.logging.Log: void debug(java.lang.Object)>
<org.apache.james.mime4j.field.ContentDispositionField: void parse()> --> <org.apache.commons.logging.Log: void debug(java.lang.Object)>
<org.apache.james.mime4j.util.CharsetUtil: void <clinit>()> --> <org.apache.commons.logging.Log: void debug(java.lang.Object)>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.commons.logging.Log: void debug(java.lang.Object)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()> --> <org.apache.commons.logging.Log: void debug(java.lang.Object)>
<org.apache.james.mime4j.field.DateTimeField: void parse()> --> <org.apache.commons.logging.Log: void debug(java.lang.Object)>
<org.apache.james.mime4j.field.MailboxField: void parse()> --> <org.apache.commons.logging.Log: void debug(java.lang.Object)>
<org.apache.james.mime4j.parser.AbstractEntity: void debug(org.apache.james.mime4j.parser.Event)> --> <org.apache.commons.logging.Log: void debug(java.lang.Object)>
<org.apache.james.mime4j.field.MailboxListField: void parse()> --> <org.apache.commons.logging.Log: void debug(java.lang.Object)>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Date parseDate(java.lang.String)> --> <org.apache.commons.logging.Log: void debug(java.lang.Object)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> --> <org.apache.http.message.BasicHeaderValueParser: boolean isOneOf(char,char[])>
<org.apache.http.entity.SerializableEntity: java.io.InputStream getContent()> --> <org.apache.http.entity.SerializableEntity: void createBytes(java.io.Serializable)>
<org.apache.http.entity.SerializableEntity: void <init>(java.io.Serializable,boolean)> --> <org.apache.http.entity.SerializableEntity: void createBytes(java.io.Serializable)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setAdapter(android.widget.ListAdapter)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void setAdapter(android.widget.ListAdapter)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setAdapter(android.widget.ListAdapter)>
<com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setAdapter(android.widget.ListAdapter)>
<com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster: void <init>(com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster)> --> <com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster: void <init>()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderViewInt(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderTitleInt(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderIconInt(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderTitleInt(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View)>
<org.apache.http.entity.AbstractHttpEntity: void setContentType(java.lang.String)> --> <org.apache.http.entity.AbstractHttpEntity: void setContentType(org.apache.http.Header)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void connect()> --> <com.dropbox.client2.DropboxAPI: void <init>(com.dropbox.client2.session.Session)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxLogin()> --> <com.dropbox.client2.DropboxAPI: void <init>(com.dropbox.client2.session.Session)>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.matburt.mobileorg.Gui.Wizard.DirectoryBrowser: java.lang.String getDirectoryName(int)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: byte getCommand()>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: byte getCommand()>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> --> <com.jcraft.jsch.Buffer: byte getCommand()>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: byte getCommand()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Buffer: byte getCommand()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Buffer: byte getCommand()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: byte getCommand()>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: byte getCommand()>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: byte getCommand()>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.Buffer: byte getCommand()>
<com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.Packet: void padding(int)>
<org.apache.james.mime4j.field.ContentTypeField: java.lang.String getCharset()> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getParameter(java.lang.String)>
<org.apache.james.mime4j.field.ContentTypeField: java.lang.String getBoundary()> --> <org.apache.james.mime4j.field.ContentTypeField: java.lang.String getParameter(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setCheckable(boolean)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void animateToMode(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void animateToVisibility(int)>
<org.json.simple.parser.Yylex: void <clinit>()> --> <org.json.simple.parser.Yylex: int[] zzUnpackAction()>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofFloat(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofFloat(float,float)>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void connect()> --> <com.jcraft.jsch.Session: void connect()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getChildHeight(android.view.View)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.util.List parse()> --> <org.apache.james.mime4j.field.language.parser.ParseException: void <init>(java.lang.Throwable)>
<com.commonsware.cwac.merge.MergeAdapter: void setActive(android.widget.ListAdapter,boolean)> --> <com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster: void setActive(android.widget.ListAdapter,boolean)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel: boolean access$802(com.actionbarsherlock.widget.ActivityChooserModel,boolean)>
<com.jcraft.jsch.PortWatcher: com.jcraft.jsch.PortWatcher addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)> --> <com.jcraft.jsch.PortWatcher: void <init>(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.ServerSocketFactory)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void finish()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void hide()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode$2: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.OrgData.OrgNode: void deleteNode(android.content.ContentResolver)>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: void connect()> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.session.Session getSession()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard$1: void onClick(android.view.View)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.session.Session getSession()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void handleDropboxResume()> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.session.Session getSession()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setChecked(boolean)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void insertRadioButton()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setCheckable(boolean)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void insertRadioButton()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void insertRadioButton()> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void addView(android.view.View)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void insertCheckBox()> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void addView(android.view.View)>
<org.apache.http.params.HttpProtocolParamBean: void setContentCharset(java.lang.String)> --> <org.apache.http.params.HttpProtocolParams: void setContentCharset(org.apache.http.params.HttpParams,java.lang.String)>
<org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)> --> <org.apache.james.mime4j.codec.Base64InputStream: void handleUnexpectedEof(int)>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.ContentHandler: void endJSON()>
<com.jcraft.jsch.Session: void disconnect()> --> <com.jcraft.jsch.JSch: boolean removeSession(com.jcraft.jsch.Session)>
<com.dropbox.client2.android.AuthActivity: void onCreate(android.os.Bundle)> --> <com.dropbox.client2.android.AuthActivity: void setTheme(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void access$300(com.matburt.mobileorg.Gui.Outline.OutlineActionMode,boolean)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void archiveNode(boolean)>
<org.apache.james.mime4j.message.MessageWriter: void writeBody(org.apache.james.mime4j.message.Body,java.io.OutputStream)> --> <org.apache.james.mime4j.message.MessageWriter: void writeMultipart(org.apache.james.mime4j.message.Multipart,java.io.OutputStream)>
<org.apache.james.mime4j.io.LimitedInputStream: int read()> --> <org.apache.james.mime4j.io.PositionInputStream: int read()>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void FillBuff()>
<com.dropbox.client2.exception.DropboxServerException: void <init>(org.apache.http.HttpResponse,java.lang.Object)> --> <com.dropbox.client2.exception.DropboxServerException$Error: void <init>(java.util.Map)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parseLine()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.Token jj_consume_token(int)>(1);     default: goto $r1 = $r0.<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: int[] jj_la1>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder before(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder after(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet,com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpServerConnection: org.apache.http.HttpRequest receiveRequestHeader()>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.http.protocol.ResponseDate: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void verifyResponse(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<oauth.signpost.commonshttp.HttpResponseAdapter: java.lang.String getReasonPhrase()> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.http.impl.AbstractHttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<oauth.signpost.commonshttp.HttpResponseAdapter: int getStatusCode()> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.apache.http.HttpResponse executeRequest(org.apache.http.client.methods.HttpUriRequest)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<com.dropbox.client2.exception.DropboxServerException: void <init>(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void ping_u1_url(java.lang.String)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<com.dropbox.client2.exception.DropboxServerException: boolean isValidWithNullBody(org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.http.impl.io.HttpResponseWriter: void writeHeadLine(org.apache.http.HttpMessage)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)> --> <org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,int)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void pushNode(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void pushNode(org.apache.james.mime4j.field.address.parser.Node)>
<org.apache.james.mime4j.parser.MimeEntity: void advanceToBoundary()> --> <org.apache.james.mime4j.parser.MimeEntity: java.io.InputStream getLimitedContentStream()>
<org.apache.james.mime4j.parser.MimeEntity: java.io.InputStream getContentStream()> --> <org.apache.james.mime4j.parser.MimeEntity: java.io.InputStream getLimitedContentStream()>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream: void write(int)> --> <com.dropbox.client2.ProgressListener$ProgressHttpEntity: long access$100(com.dropbox.client2.ProgressListener$ProgressHttpEntity)>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream: void write(byte[],int,int)> --> <com.dropbox.client2.ProgressListener$ProgressHttpEntity: long access$100(com.dropbox.client2.ProgressListener$ProgressHttpEntity)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: android.content.Context getContext()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: com.matburt.mobileorg.Gui.Capture.DateTableRow getDateTableRow(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void <init>(android.content.Context)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivity: android.content.Intent getIntent()>
<com.matburt.mobileorg.Gui.ViewActivity: void <init>()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void <init>()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void <init>()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void <init>()>
<com.matburt.mobileorg.Gui.Agenda.AgendasActivity: void <init>()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void <init>()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void <init>()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void <init>()>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void <init>()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void <init>()>
<org.apache.http.message.BasicHeader: java.lang.String toString()> --> <org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.widget.ActionBarView: java.lang.CharSequence getTitle()>
<com.actionbarsherlock.internal.app.ActionBarImpl: java.lang.CharSequence getTitle()> --> <com.actionbarsherlock.internal.widget.ActionBarView: java.lang.CharSequence getTitle()>
<com.dropbox.client2.DropboxAPI$ChunkedUploader: void upload(com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.ProgressListener$Adjusted: void <init>(com.dropbox.client2.ProgressListener,long,long)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setExpandedFormat(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void actionFormatChanged()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseIndexFile()> --> <com.matburt.mobileorg.OrgData.OrgFileParser: java.util.HashMap getFilesFromIndex(java.lang.String)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader$1: void run()> --> <com.actionbarsherlock.widget.ActivityChooserModel: void access$900(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void addListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void addListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void addListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void addListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: org.apache.james.mime4j.field.mimeversion.parser.ParseException generateParseException()> --> <org.apache.james.mime4j.field.mimeversion.parser.ParseException: void <init>(org.apache.james.mime4j.field.mimeversion.parser.Token,int[][],java.lang.String[])>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void updateTab(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void bindTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void init(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()>
<com.matburt.mobileorg.OrgData.OrgFileParser: void combineBlockAgendas()> --> <com.matburt.mobileorg.OrgData.OrgFileParser: void cloneChildren(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)>
<org.apache.james.mime4j.field.address.parser.SimpleNode: void dump(java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: java.lang.String toString(java.lang.String)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void <init>(android.content.Context,com.dropbox.client2.DropboxAPI)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$DropboxDirectoryBrowser: void setLocale()>
<com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> --> <org.ietf.jgss.GSSContext: void requestInteg(boolean)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onDestroy()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void onDestroy()>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void onDestroy()> --> <com.actionbarsherlock.app.SherlockFragmentActivity: void onDestroy()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean showOverflowMenu()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: boolean showOverflowMenu()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean showOverflowMenu()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: boolean showOverflowMenu()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean showOverflowMenu()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: boolean performClick()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean showOverflowMenu()>
<com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> --> <com.jcraft.jsch.ChannelExec: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarView$2: void onClick(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarView: com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter access$100(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: com.actionbarsherlock.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)> --> <com.actionbarsherlock.internal.view.menu.MenuView: void initialize(com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<com.matburt.mobileorg.Gui.ViewFragment: void displayError()> --> <com.matburt.mobileorg.Gui.ViewFragment: java.lang.String getString(int)>
<org.apache.james.mime4j.parser.AbstractEntity: java.lang.String message(org.apache.james.mime4j.parser.Event)> --> <org.apache.james.mime4j.parser.AbstractEntity: int getLineNumber()>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int measureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int measureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getTop()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getTop()>
<com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> --> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Cipher genCipher()>
<com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])> --> <com.jcraft.jsch.KeyPair: com.jcraft.jsch.Cipher genCipher()>
<oauth.signpost.http.HttpParameters: java.lang.String put(java.lang.String,java.lang.String,boolean)> --> <oauth.signpost.OAuth: java.lang.String percentEncode(java.lang.String)>
<oauth.signpost.OAuth: java.lang.String addQueryParameters(java.lang.String,java.lang.String[])> --> <oauth.signpost.OAuth: java.lang.String percentEncode(java.lang.String)>
<oauth.signpost.signature.PlainTextMessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.OAuth: java.lang.String percentEncode(java.lang.String)>
<oauth.signpost.OAuth: java.lang.String toHeaderElement(java.lang.String,java.lang.String)> --> <oauth.signpost.OAuth: java.lang.String percentEncode(java.lang.String)>
<oauth.signpost.OAuth: void formEncode(java.util.Collection,java.io.OutputStream)> --> <oauth.signpost.OAuth: java.lang.String percentEncode(java.lang.String)>
<oauth.signpost.signature.SignatureBaseString: java.lang.String generate()> --> <oauth.signpost.OAuth: java.lang.String percentEncode(java.lang.String)>
<oauth.signpost.http.HttpParameters: java.lang.String getAsQueryString(java.lang.Object)> --> <oauth.signpost.OAuth: java.lang.String percentEncode(java.lang.String)>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.OAuth: java.lang.String percentEncode(java.lang.String)>
<oauth.signpost.OAuth: java.lang.String prepareOAuthHeader(java.lang.String[])> --> <oauth.signpost.OAuth: java.lang.String percentEncode(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getRight()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getRight()>
<org.apache.james.mime4j.message.Entity: void setFilename(java.lang.String)> --> <org.apache.james.mime4j.field.ContentDispositionField: java.util.Map getParameters()>
<org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.descriptor.BodyDescriptor getBodyDescriptor()> --> <org.apache.james.mime4j.parser.EntityStateMachine: org.apache.james.mime4j.descriptor.BodyDescriptor getBodyDescriptor()>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.MimeTokenStream: int getState()>
<oauth.signpost.commonshttp.HttpRequestAdapter: java.lang.String getMethod()> --> <org.apache.http.client.methods.HttpUriRequest: org.apache.http.RequestLine getRequestLine()>
<org.apache.http.protocol.BasicHttpContext: void <init>()> --> <org.apache.http.protocol.BasicHttpContext: void <init>(org.apache.http.protocol.HttpContext)>
<org.apache.http.protocol.SyncBasicHttpContext: void <init>(org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.BasicHttpContext: void <init>(org.apache.http.protocol.HttpContext)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.Menu: void setGroupCheckable(int,boolean,boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeMenuPresenter(com.actionbarsherlock.internal.view.menu.MenuPresenter)>
<oauth.signpost.exception.OAuthNotAuthorizedException: void <init>(java.lang.String)> --> <oauth.signpost.exception.OAuthException: void <init>(java.lang.String)>
<oauth.signpost.exception.OAuthCommunicationException: void <init>(java.lang.String,java.lang.String)> --> <oauth.signpost.exception.OAuthException: void <init>(java.lang.String)>
<oauth.signpost.exception.OAuthNotAuthorizedException: void <init>()> --> <oauth.signpost.exception.OAuthException: void <init>(java.lang.String)>
<oauth.signpost.exception.OAuthMessageSignerException: void <init>(java.lang.String)> --> <oauth.signpost.exception.OAuthException: void <init>(java.lang.String)>
<oauth.signpost.exception.OAuthExpectationFailedException: void <init>(java.lang.String)> --> <oauth.signpost.exception.OAuthException: void <init>(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: void insertOrReplaceDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void resetCachedValues()>
<com.matburt.mobileorg.OrgData.OrgNodePayload: void set(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void resetCachedValues()>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpConnection: boolean isOpen()>
<com.matburt.mobileorg.Gui.Capture.LocationEntry$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: void access$200(com.matburt.mobileorg.Gui.Capture.LocationEntry,java.lang.String)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <clinit>()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void jj_la1_0()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.view.CollapsibleActionView: void onActionViewExpanded()>
<com.matburt.mobileorg.Services.SyncService$1: void start()> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void close()>
<com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,int,com.jcraft.jsch.SocketFactory)>
<com.matburt.mobileorg.Gui.ViewActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: int getOrder()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: char getAlphabeticShortcut()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: char getAlphabeticShortcut()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: char getAlphabeticShortcut()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parseLine()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parse()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parseAll()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parse()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: char BeginToken()>
<com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.ChannelSftp: void access$600(com.jcraft.jsch.ChannelSftp,long)>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.http.entity.mime.HttpMultipart: void <init>(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$6: void <init>(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<org.apache.james.mime4j.message.Message: void setDate(java.util.Date,java.util.TimeZone)> --> <org.apache.james.mime4j.message.Header: int removeFields(java.lang.String)>
<org.apache.james.mime4j.message.Message: void setMailbox(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.message.Header: int removeFields(java.lang.String)>
<org.apache.james.mime4j.message.Message: void setSubject(java.lang.String)> --> <org.apache.james.mime4j.message.Header: int removeFields(java.lang.String)>
<org.apache.james.mime4j.message.Message: void setAddressList(java.lang.String,java.util.Collection)> --> <org.apache.james.mime4j.message.Header: int removeFields(java.lang.String)>
<org.apache.james.mime4j.message.Message: void setMailboxList(java.lang.String,java.util.Collection)> --> <org.apache.james.mime4j.message.Header: int removeFields(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.Animator clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator clone()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.UserInfo: java.lang.String getPassphrase()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.UserInfo: java.lang.String getPassphrase()>
<org.apache.http.protocol.HttpRequestHandlerRegistry: void unregister(java.lang.String)> --> <org.apache.http.protocol.UriPatternMatcher: void unregister(java.lang.String)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void raw(java.io.InputStream)>
<com.dropbox.client2.exception.DropboxServerException: void <init>(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxServerException: java.lang.String getHeader(org.apache.http.HttpResponse,java.lang.String)>
<com.dropbox.client2.exception.DropboxServerException: boolean isValidWithNullBody(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxServerException: java.lang.String getHeader(org.apache.http.HttpResponse,java.lang.String)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: int loadUiOptionsFromManifest(android.app.Activity)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: java.lang.String cleanActivityName(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: int loadLogoFromManifest(android.app.Activity)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: java.lang.String cleanActivityName(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Plugin.SyncEditActivity: void <init>()> --> <com.matburt.mobileorg.Plugin.SyncEditActivity$2: void <init>(com.matburt.mobileorg.Plugin.SyncEditActivity)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void dump(java.lang.String)>(">
<com.actionbarsherlock.internal.widget.IcsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void setVerticalOffset(int)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void setOnItemLongClickListener(com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemLongClickListener)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void setLongClickable(boolean)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void announceStartSync()> --> <com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void setupNotification()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getPaddingTop()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getPaddingTop()>
<org.apache.http.impl.io.HttpRequestParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.util.CharArrayBuffer: void clear()>
<org.apache.http.impl.io.AbstractMessageWriter: void write(org.apache.http.HttpMessage)> --> <org.apache.http.util.CharArrayBuffer: void clear()>
<org.apache.http.impl.io.HttpResponseParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.util.CharArrayBuffer: void clear()>
<org.apache.http.impl.io.ChunkedInputStream: int getChunkSize()> --> <org.apache.http.util.CharArrayBuffer: void clear()>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)> --> <org.apache.http.util.CharArrayBuffer: void clear()>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.CharArrayBuffer: void clear()>
<com.dropbox.client2.jsonextract.JsonThing: boolean isInt32()> --> <com.dropbox.client2.jsonextract.JsonThing: int expectInt32()>
<com.dropbox.client2.jsonextract.JsonList: java.util.ArrayList extract(com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonList: int length()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: android.webkit.WebView access$300(com.matburt.mobileorg.Gui.Capture.PayloadFragment)>
<com.jcraft.jsch.ChannelExec: void start()> --> <com.jcraft.jsch.ChannelExec: void run()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean shouldShowShortcut()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean isShortcutsVisible()>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: boolean isShortcutsVisible()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean isShortcutsVisible()>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorageOutputStream: void close()> --> <javax.crypto.CipherOutputStream: void close()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ParseException generateParseException()> --> <org.apache.james.mime4j.field.address.parser.ParseException: void <init>(org.apache.james.mime4j.field.address.parser.Token,int[][],java.lang.String[])>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$BasicUploadRequest: void <init>(org.apache.http.client.methods.HttpUriRequest,com.dropbox.client2.session.Session)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.CapitalizingButton: void setTextCompat(java.lang.CharSequence)>
<com.actionbarsherlock.internal.widget.IcsSpinner: boolean performClick()> --> <com.actionbarsherlock.internal.widget.IcsSpinner$SpinnerPopup: void show()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: int measureContentWidth(android.widget.ListAdapter)>
<com.jcraft.jsch.JSch: void addIdentity(java.lang.String,byte[])> --> <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)>
<com.jcraft.jsch.JSch: void addIdentity(java.lang.String,java.lang.String,byte[])> --> <com.jcraft.jsch.IdentityFile: com.jcraft.jsch.IdentityFile newInstance(java.lang.String,java.lang.String,com.jcraft.jsch.JSch)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean)>
<org.apache.james.mime4j.message.MessageWriter: java.io.OutputStream encodeStream(java.io.OutputStream,java.lang.String,boolean)> --> <org.apache.james.mime4j.codec.CodecUtil: java.io.OutputStream wrapBase64(java.io.OutputStream)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void requestLayout()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeAllTabs()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void requestLayout()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeTabAt(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void requestLayout()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void updateTab(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void requestLayout()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,int,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void requestLayout()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setContentHeight(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void requestLayout()>
<com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)>
<org.apache.james.mime4j.parser.AbstractEntity: boolean parseField()> --> <org.apache.james.mime4j.io.MaxHeaderLimitException: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder before(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.ArrayList access$400(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.ArrayList access$400(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder after(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.ArrayList access$400(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet,com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: java.util.ArrayList access$400(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void collapseCurrent()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void collapseExpand(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void collapseExpand(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date: int getDay()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void <init>()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofObject(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator,java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofInt(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void <init>(java.lang.Object,java.lang.String)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofFloat(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofPropertyValuesHolder(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setIntValues(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setIntValues(int[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofInt(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setIntValues(int[])>
<org.apache.james.mime4j.codec.Base64InputStream: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.field.ContentTypeField: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.field.ContentDispositionField: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.message.BodyFactory: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.storage.DefaultStorageProvider: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.util.CharsetUtil: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.field.DateTimeField: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.field.MailboxListField: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.parser.AbstractEntity: void <init>(org.apache.james.mime4j.descriptor.BodyDescriptor,int,int,org.apache.james.mime4j.parser.MimeEntityConfig)> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.field.AddressListField: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.field.MailboxField: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.codec.DecoderUtil: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<org.apache.james.mime4j.util.MimeUtil: void <clinit>()> --> <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void setWidthLimit(int,boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void setWidthLimit(int,boolean)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void setWidthLimit(int,boolean)>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isNodeEditable()> --> <com.matburt.mobileorg.OrgData.OrgNode: boolean isNodeEditable(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: boolean isNodeRefilable()> --> <com.matburt.mobileorg.OrgData.OrgNode: boolean isNodeEditable(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onCreateActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)> --> <com.matburt.mobileorg.OrgData.OrgNode: boolean isNodeEditable(android.content.ContentResolver)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.parser.MimeEntity: boolean parseField()>
<oauth.signpost.OAuth: void formEncode(java.util.Collection,java.io.OutputStream)> --> <oauth.signpost.OAuth: java.lang.String safeToString(java.lang.Object)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList pull(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void announceProgressDownload(java.lang.String,int,int)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pull(com.matburt.mobileorg.OrgData.OrgFileParser,java.util.ArrayList,java.util.HashMap,java.util.HashMap)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void announceProgressDownload(java.lang.String,int,int)>
<org.apache.james.mime4j.storage.AbstractStorageProvider: org.apache.james.mime4j.storage.Storage store(java.io.InputStream)> --> <org.apache.james.mime4j.storage.AbstractStorageProvider: org.apache.james.mime4j.storage.StorageOutputStream createStorageOutputStream()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: org.apache.james.mime4j.field.address.parser.Node rootNode()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTaddress parseAddress()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: org.apache.james.mime4j.field.address.parser.Node rootNode()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTmailbox parseMailbox()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: org.apache.james.mime4j.field.address.parser.Node rootNode()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTaddress_list parseAddressList()> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: org.apache.james.mime4j.field.address.parser.Node rootNode()>
<oauth.signpost.signature.SignatureBaseString: java.lang.String generate()> --> <oauth.signpost.signature.SignatureBaseString: java.lang.String normalizeRequestParameters()>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: int access$100(org.apache.james.mime4j.codec.UnboundedFifoByteBuffer,int)> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: int decrement(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void dispatchPresenterUpdate(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void invalidate()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: boolean dispatchOnCreate()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <clinit>()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$4: void <init>()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void selectionChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isShown()>
<com.dropbox.client2.session.AbstractSession$DBClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)> --> <org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>
<org.apache.http.message.BasicTokenIterator: int findNext(int)> --> <org.apache.http.message.BasicTokenIterator: java.lang.String createToken(java.lang.String,int,int)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void handleTrustRelationship(android.content.Context)> --> <javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$VisibilityAnimListener: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$VisibilityAnimListener withFinalVisibility(int)>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatProtocolVersion(org.apache.http.ProtocolVersion,org.apache.http.message.LineFormatter)> --> <org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)> --> <org.apache.http.ProtocolVersion: int getMajor()>
<org.apache.http.ProtocolVersion: int compareToVersion(org.apache.http.ProtocolVersion)> --> <org.apache.http.ProtocolVersion: int getMajor()>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.ContentHandler: boolean primitive(java.lang.Object)>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header header(com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<com.matburt.mobileorg.Services.TimeclockService: void doTimeout()> --> <com.matburt.mobileorg.Services.TimeclockService: void updateTime()>
<com.matburt.mobileorg.Services.TimeclockService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.TimeclockService: void updateTime()>
<com.matburt.mobileorg.Services.TimeclockService: void showNotification(long)> --> <com.matburt.mobileorg.Services.TimeclockService: void updateTime()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void setTabContainer(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void addView(android.view.View)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList runSynchronizer(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.SynchronizerInterface: boolean isConnectable()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setChecked(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isExclusiveCheckable()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isExclusiveCheckable()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setExclusiveItemChecked(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isExclusiveCheckable()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setCheckable(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isExclusiveCheckable()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean isCollapsed()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.view.ViewParent getParent()>
<org.apache.james.mime4j.field.language.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.language.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: java.io.File getDirectory(int)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: java.lang.String getAbsolutePath(int)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: java.io.File getDirectory(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void loginUbuntuOne()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void signRequest(org.apache.http.HttpRequest)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()>
<oauth.signpost.signature.OAuthMessageSigner: java.lang.String base64Encode(byte[])> --> <org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: java.lang.ThreadLocal access$600()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateProgressBars(int)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.internal.widget.IcsProgressBar getCircularProgressBar(boolean)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: android.view.ViewGroup generateLayout()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.internal.widget.IcsProgressBar getCircularProgressBar(boolean)>
<com.matburt.mobileorg.Services.TimeclockDialog: void access$300(com.matburt.mobileorg.Services.TimeclockDialog,int,int)> --> <com.matburt.mobileorg.Services.TimeclockDialog: void saveClock(int,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem$2: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void access$100(com.matburt.mobileorg.Gui.Outline.OutlineItem,java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildIdUri(java.lang.Long)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildIdUri(java.lang.String)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runRecover()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeTabAt(int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void removeViewAt(int)>
<com.matburt.mobileorg.Services.CalendarSyncService: void assimilateCalendar()> --> <com.matburt.mobileorg.OrgData.CalendarEntry: com.matburt.mobileorg.OrgData.OrgNode convertToOrgNode()>
<com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor: com.dropbox.client2.DropboxAPI$DeltaEntry extract(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.DropboxAPI$DeltaEntry: void <init>(java.lang.String,java.lang.Object)>
<org.apache.james.mime4j.field.UnstructuredField: void parse()> --> <org.apache.james.mime4j.field.UnstructuredField: java.lang.String getBody()>
<com.jcraft.jsch.ChannelSftp: int getServerVersion()> --> <com.jcraft.jsch.ChannelSftp: boolean isConnected()>
<com.dropbox.client2.DropboxAPI$DropboxLink: void <init>(java.util.Map,boolean,com.dropbox.client2.DropboxAPI$1)> --> <com.dropbox.client2.DropboxAPI$DropboxLink: void <init>(java.util.Map,boolean)>
<com.dropbox.client2.DropboxAPI$DropboxLink: void <init>(java.util.Map)> --> <com.dropbox.client2.DropboxAPI$DropboxLink: void <init>(java.util.Map,boolean)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()>
<com.jcraft.jsch.KnownHosts: com.jcraft.jsch.MAC getHMACSHA1()> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.Random genRandom()> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.HostKey: java.lang.String getFingerPrint(com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.Cipher genCipher()> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.KeyPairDSA: void generate(int)> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.HASH genHash()> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_rsa(byte[])> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_dss(byte[])> --> <com.jcraft.jsch.JSch: java.lang.String getConfig(java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setListNavigationCallbacks(android.widget.SpinnerAdapter,com.actionbarsherlock.app.ActionBar$OnNavigationListener)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setDropdownAdapter(android.widget.SpinnerAdapter)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)> --> <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])> --> <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])> --> <org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)>
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine)> --> <org.apache.http.impl.DefaultHttpRequestFactory: boolean isOneOf(java.lang.String[],java.lang.String)>
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(java.lang.String,java.lang.String)> --> <org.apache.http.impl.DefaultHttpRequestFactory: boolean isOneOf(java.lang.String[],java.lang.String)>
<com.matburt.mobileorg.Services.CalendarSyncService$1: void start()> --> <com.matburt.mobileorg.Services.CalendarSyncService$1: void run()>
<org.apache.http.message.BasicListHeaderIterator: int findNext(int)> --> <org.apache.http.message.BasicListHeaderIterator: boolean filterHeader(int)>
<org.apache.james.mime4j.message.Message: void setDate(java.util.Date,java.util.TimeZone)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.DateTimeField date(java.lang.String,java.util.Date,java.util.TimeZone)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getCleanedPayload()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: void cleanPayload()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void run()>
<org.apache.http.message.BasicLineFormatter: void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)> --> <org.apache.http.RequestLine: java.lang.String getUri()>
<org.apache.http.message.BasicHttpRequest: void <init>(org.apache.http.RequestLine)> --> <org.apache.http.RequestLine: java.lang.String getUri()>
<org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.RequestLine: java.lang.String getUri()>
<com.dropbox.client2.DropboxAPI$CreatedCopyRef: com.dropbox.client2.DropboxAPI$CreatedCopyRef extractFromJson(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.DropboxAPI$CreatedCopyRef: void <init>(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: void setPERMISSIONS(int)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Proxy: java.io.InputStream getInputStream()>
<com.actionbarsherlock.internal.app.ActionBarImpl$2: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void requestLayout()>
<org.apache.james.mime4j.codec.Base64OutputStream: void writePad()> --> <org.apache.james.mime4j.codec.Base64OutputStream: void writeLineSeparator()>
<org.apache.james.mime4j.codec.Base64OutputStream: void close0()> --> <org.apache.james.mime4j.codec.Base64OutputStream: void writeLineSeparator()>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setAnchorView(android.view.View)>
<com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void setAnchorView(android.view.View)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: boolean hasValue()>
<com.actionbarsherlock.internal.widget.ActionBarView$SavedState$1: com.actionbarsherlock.internal.widget.ActionBarView$SavedState createFromParcel(android.os.Parcel)> --> <com.actionbarsherlock.internal.widget.ActionBarView$SavedState: void <init>(android.os.Parcel,com.actionbarsherlock.internal.widget.ActionBarView$1)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void handleDropboxResume()> --> <com.dropbox.client2.android.AndroidAuthSession: com.dropbox.client2.session.AccessTokenPair getAccessTokenPair()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStopStringLiteralDfa_2(int,long)>
<com.dropbox.client2.jsonextract.JsonBase: com.dropbox.client2.jsonextract.JsonExtractionException error(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonExtractionException: void <init>(java.lang.String,java.lang.String,java.lang.Object)>
<com.actionbarsherlock.ActionBarSherlock: boolean callbackCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock$OnCreateOptionsMenuListener: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pushCaptures()> --> <com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void updateNotification(java.lang.String)>
<com.matburt.mobileorg.Services.CalendarSyncService$1: void start()> --> <com.matburt.mobileorg.Services.CalendarSyncService: void access$100(com.matburt.mobileorg.Services.CalendarSyncService,java.lang.String[])>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$CreatedCopyRef createCopyRef(java.lang.String)> --> <com.dropbox.client2.DropboxAPI$CreatedCopyRef: com.dropbox.client2.DropboxAPI$CreatedCopyRef extractFromJson(com.dropbox.client2.jsonextract.JsonThing)>
<com.jcraft.jsch.Session: void send_newkeys()> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.Session: void disconnect()> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Logger: void log(int,java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: void initTitle()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onFinishInflate()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void initIndeterminateProgress()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setEmbeddedTabView(com.actionbarsherlock.internal.widget.ScrollingTabContainerView)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setCustomNavigationView(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.ActionBarView: void initProgress()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void addView(android.view.View)>
<org.apache.james.mime4j.io.LimitedInputStream: long skip(long)> --> <org.apache.james.mime4j.io.LimitedInputStream: int getBytesLeft()>
<org.apache.james.mime4j.io.LimitedInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.LimitedInputStream: int getBytesLeft()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.lang.String testConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.signature.SignatureBaseString: java.lang.String generate()>
<org.apache.http.impl.entity.StrictContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.HttpMessage: org.apache.http.ProtocolVersion getProtocolVersion()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void SkipLexicalActions(org.apache.james.mime4j.field.structured.parser.Token)>
<com.jcraft.jsch.ChannelSftp$1: void close()> --> <com.jcraft.jsch.ChannelSftp$1: void flush()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token getToken(int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int jj_ntk()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: void addDependency(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder before(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: void addDependency(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: void addDependency(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder after(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Node: void addDependency(com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Dependency)>
<org.apache.james.mime4j.field.address.parser.SimpleNode: java.lang.Object childrenAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.Node: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void closeOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchCloseOptionsMenu()>
<com.actionbarsherlock.app.SherlockActivity: void closeOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchCloseOptionsMenu()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void closeOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchCloseOptionsMenu()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void closeOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchCloseOptionsMenu()>
<com.actionbarsherlock.app.SherlockListActivity: void closeOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchCloseOptionsMenu()>
<org.apache.james.mime4j.message.Entity: java.lang.String getDispositionType()> --> <org.apache.james.mime4j.field.ContentDispositionField: java.lang.String getDispositionType()>
<org.apache.james.mime4j.message.Entity: void setFilename(java.lang.String)> --> <org.apache.james.mime4j.field.ContentDispositionField: java.lang.String getDispositionType()>
<org.apache.james.mime4j.parser.Event: void <clinit>()> --> <org.apache.james.mime4j.parser.Event: void <init>(java.lang.String)>
<com.dropbox.client2.DropboxAPI$ThumbFormat: void <clinit>()> --> <com.dropbox.client2.DropboxAPI$ThumbFormat: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getBeginColumn()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupDataSetObserver: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupDataSetObserver: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseContentId(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isScrollableForAccessibility()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isScrollableForAccessibility()>
<org.apache.james.mime4j.message.StorageTextBody: org.apache.james.mime4j.message.StorageTextBody copy()> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: void addReference()>
<org.apache.james.mime4j.message.StorageBinaryBody: org.apache.james.mime4j.message.StorageBinaryBody copy()> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: void addReference()>
<com.twofortyfouram.locale.MarketActivity$3: void onDismiss(android.content.DialogInterface)> --> <com.twofortyfouram.locale.MarketActivity: void finish()>
<com.twofortyfouram.locale.MarketActivity$2: void onClick(android.content.DialogInterface,int)> --> <com.twofortyfouram.locale.MarketActivity: void finish()>
<com.twofortyfouram.locale.MarketActivity$1: void onClick(android.content.DialogInterface,int)> --> <com.twofortyfouram.locale.MarketActivity: void finish()>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.OAuthProviderListener: void prepareRequest(oauth.signpost.http.HttpRequest)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_3()>
<com.matburt.mobileorg.OrgData.OrgEdit: java.lang.String getType()> --> <com.matburt.mobileorg.OrgData.OrgEdit$TYPE: java.lang.String name()>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encode(java.io.InputStream,java.io.OutputStream)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void initEncoding(java.io.OutputStream)>
<org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void <init>(java.io.OutputStream,boolean)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void initEncoding(java.io.OutputStream)>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: long[] getNodes(android.database.sqlite.SQLiteDatabase,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: com.matburt.mobileorg.util.SelectionBuilder getQuery(android.content.Context)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedTopNodeId()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateFileFromAlias(java.lang.String,android.content.ContentResolver)>
<org.apache.james.mime4j.field.address.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.address.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)>
<oauth.signpost.signature.QueryStringSigningStrategy: java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpParameters: boolean containsKey(java.lang.Object)>
<oauth.signpost.signature.AuthorizationHeaderSigningStrategy: java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpParameters: boolean containsKey(java.lang.Object)>
<oauth.signpost.AbstractOAuthConsumer: void completeOAuthParameters(oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpParameters: boolean containsKey(java.lang.Object)>
<com.actionbarsherlock.widget.ShareActionProvider: android.view.View onCreateActionView()> --> <com.actionbarsherlock.widget.ActivityChooserView: void setDefaultActionButtonContentDescription(int)>
<org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
<org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>
<com.dropbox.client2.jsonextract.JsonThing: java.lang.Object expect(java.lang.Class)> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.String typeNameForObject(java.lang.Object)>
<com.dropbox.client2.jsonextract.JsonThing: double expectFloat64()> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.String typeNameForObject(java.lang.Object)>
<com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonExtractionException unexpected()> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.String typeNameForObject(java.lang.Object)>
<com.dropbox.client2.jsonextract.JsonThing: int expectInt32()> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.String typeNameForObject(java.lang.Object)>
<com.dropbox.client2.jsonextract.JsonThing: long expectInt64()> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.String typeNameForObject(java.lang.Object)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean dismissPopupMenus()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean hideSubMenus()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean hideSubMenus()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean hideSubMenus()>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.impl.client.DefaultHttpClient: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)>
<com.matburt.mobileorg.Gui.ViewFragment: void display(java.lang.String)> --> <com.matburt.mobileorg.Gui.ViewFragment: void displayHtml(java.lang.String)>
<com.matburt.mobileorg.Gui.ViewFragment: void displayPayload(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.Gui.ViewFragment: void displayHtml(java.lang.String)>
<com.matburt.mobileorg.Gui.ViewFragment: void display(com.matburt.mobileorg.OrgData.OrgNode,int,android.content.ContentResolver)> --> <com.matburt.mobileorg.Gui.ViewFragment: void displayHtml(java.lang.String)>
<com.matburt.mobileorg.Gui.ViewFragment: void displayError()> --> <com.matburt.mobileorg.Gui.ViewFragment: void displayHtml(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: int findGroupIndex(int,int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int size()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem findItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int size()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int size()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean hasVisibleItems()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int size()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int size()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: int findItemIndex(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int size()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int size()>
<com.dropbox.client2.DropboxAPI$BasicUploadRequest: com.dropbox.client2.DropboxAPI$Entry upload()> --> <com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)>
<com.dropbox.client2.DropboxAPI$ChunkedUploadRequest: com.dropbox.client2.DropboxAPI$ChunkedUploadResponse upload()> --> <com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest)> --> <com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)>
<org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>
<org.apache.http.impl.SocketHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void browseTo(java.lang.String)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void <init>(android.content.Context,com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void browseTo(java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void setContentView(int)>
<org.apache.james.mime4j.parser.RawField: java.lang.String toString()> --> <org.apache.james.mime4j.parser.RawField: java.lang.String getName()>
<com.dropbox.client2.jsonextract.JsonMap: boolean isIdentLike(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonMap: boolean isEnglishLetter(char)>
<com.matburt.mobileorg.OrgData.CalendarEntriesParser: com.matburt.mobileorg.OrgData.CalendarEntry getEntryFromCursor(android.database.Cursor)> --> <com.matburt.mobileorg.OrgData.CalendarEntry: void <init>()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.dropbox.client2.session.WebAuthSession: java.util.Map setUpToken(java.lang.String)> --> <com.dropbox.client2.session.WebAuthSession: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploader getChunkedUploader(java.io.InputStream,long)> --> <com.dropbox.client2.DropboxAPI$ChunkedUploader: void <init>(com.dropbox.client2.DropboxAPI,java.io.InputStream,long)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setSelectedPositionInt(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ExpandBuff(boolean)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setWindowTitle(java.lang.CharSequence)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchTitleChanged(java.lang.CharSequence,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setWindowTitle(java.lang.CharSequence)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void initActionBar()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setWindowTitle(java.lang.CharSequence)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void addAgenda(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)> --> <com.commonsware.cwac.merge.MergeAdapter: void addView(android.view.View)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String)> --> <org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void ping_u1_url(java.lang.String)> --> <org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>
<com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()> --> <org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)> --> <org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.InputStream getUrl(java.lang.String)> --> <org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>
<com.jcraft.jsch.KnownHosts: void dump(java.io.OutputStream)> --> <com.jcraft.jsch.HostKey: java.lang.String getKey()>
<com.dropbox.client2.session.AbstractSession: java.lang.String buildOAuthHeader(com.dropbox.client2.session.AppKeyPair,com.dropbox.client2.session.AccessTokenPair)> --> <com.dropbox.client2.session.AbstractSession: java.lang.String encode(java.lang.String)>
<com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.ActionBarSherlock wrap(android.app.Activity,int)> --> <com.actionbarsherlock.ActionBarSherlock$Implementation: int api()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getPaddingRight()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getPaddingRight()>
<com.jcraft.jsch.Session: void setX11Port(int)> --> <com.jcraft.jsch.ChannelX11: void setPort(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.view.ActionMode: void invalidate()>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.protocol.ResponseDate: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.StatusLine: int getStatusCode()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void verifyResponse(org.apache.http.HttpResponse)> --> <org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.message.BasicHttpResponse: void setLocale(java.util.Locale)> --> <org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()> --> <org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.impl.AbstractHttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)> --> <org.apache.http.StatusLine: int getStatusCode()>
<oauth.signpost.commonshttp.HttpResponseAdapter: int getStatusCode()> --> <org.apache.http.StatusLine: int getStatusCode()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.apache.http.HttpResponse executeRequest(org.apache.http.client.methods.HttpUriRequest)> --> <org.apache.http.StatusLine: int getStatusCode()>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.message.BasicLineFormatter: void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)> --> <org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.message.BasicHttpResponse: void setReasonPhrase(java.lang.String)> --> <org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.StatusLine: int getStatusCode()>
<com.dropbox.client2.exception.DropboxServerException: void <init>(org.apache.http.HttpResponse)> --> <org.apache.http.StatusLine: int getStatusCode()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void ping_u1_url(java.lang.String)> --> <org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.StatusLine: int getStatusCode()>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <org.apache.http.StatusLine: int getStatusCode()>
<com.dropbox.client2.exception.DropboxServerException: boolean isValidWithNullBody(org.apache.http.HttpResponse)> --> <org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.StatusLine: int getStatusCode()>
<org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)> --> <org.apache.http.StatusLine: int getStatusCode()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void updateDrawableBounds(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingRight()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getPaddingRight()>
<com.jcraft.jsch.Session: void setX11Host(java.lang.String)> --> <com.jcraft.jsch.ChannelX11: void setHost(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder getAgendaBlockEntry(int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: com.matburt.mobileorg.Gui.Agenda.BlockAgenda getBlockAgenda(int,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: java.util.ArrayList getBlockAgendaQueryTitles(int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: com.matburt.mobileorg.Gui.Agenda.BlockAgenda getBlockAgenda(int,android.content.Context)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: com.matburt.mobileorg.Gui.Capture.DateTableRow getDateTableRow(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: void parseDate(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_3(int,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToTab(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$1: void <init>(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,android.view.View)>
<org.apache.james.mime4j.io.LimitedInputStream: long skip(long)> --> <org.apache.james.mime4j.io.PositionInputStream: long skip(long)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: void restoreFromBundle(android.os.Bundle)>
<com.jcraft.jsch.Session: void initDeflater(java.lang.String)> --> <com.jcraft.jsch.Compression: void init(int,int)>
<com.jcraft.jsch.Session: void initInflater(java.lang.String)> --> <com.jcraft.jsch.Compression: void init(int,int)>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void checkFreeSize(int)>
<org.apache.james.mime4j.parser.MimeParseEventException: void <init>(org.apache.james.mime4j.parser.Event)> --> <org.apache.james.mime4j.parser.Event: java.lang.String toString()>
<org.apache.james.mime4j.parser.AbstractEntity: java.lang.String message(org.apache.james.mime4j.parser.Event)> --> <org.apache.james.mime4j.parser.Event: java.lang.String toString()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.AddressList buildAddressList(org.apache.james.mime4j.field.address.parser.ASTaddress_list)> --> <org.apache.james.mime4j.field.address.parser.ASTaddress_list: org.apache.james.mime4j.field.address.parser.Node jjtGetChild(int)>
<com.jcraft.jsch.ChannelDirectTCPIP: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: boolean isConnected()>
<oauth.signpost.AbstractOAuthConsumer: void completeOAuthParameters(oauth.signpost.http.HttpParameters)> --> <oauth.signpost.signature.OAuthMessageSigner: java.lang.String getSignatureMethod()>
<com.google.gdata.util.common.base.UnicodeEscaper$1: java.lang.Appendable append(char)> --> <com.google.gdata.util.common.base.UnicodeEscaper$1: void outputChars(char[],int)>
<com.google.gdata.util.common.base.UnicodeEscaper$1: java.lang.Appendable append(java.lang.CharSequence,int,int)> --> <com.google.gdata.util.common.base.UnicodeEscaper$1: void outputChars(char[],int)>
<com.matburt.mobileorg.OrgData.OrgEdit: void <init>(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgEdit$TYPE,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void setOldValue(com.matburt.mobileorg.OrgData.OrgNode)>
<com.matburt.mobileorg.OrgData.OrgEdit: void <init>(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgEdit$TYPE,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void setOldValue(com.matburt.mobileorg.OrgData.OrgNode)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void <init>(org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void <init>(org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void <init>(org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void <init>(org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream)>
<org.apache.james.mime4j.message.StorageTextBody: org.apache.james.mime4j.message.SingleBody copy()> --> <org.apache.james.mime4j.message.StorageTextBody: org.apache.james.mime4j.message.StorageTextBody copy()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$1: java.lang.Object initialValue()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$1: java.util.ArrayList initialValue()>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: void init()>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: void init()>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_rsa(byte[])> --> <com.jcraft.jsch.SignatureRSA: void init()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureRSA: void init()>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenRSA: byte[] getEQ()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.JSch: void addSession(com.jcraft.jsch.Session)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>
<org.apache.james.mime4j.util.StringArrayMap: java.lang.String[] getValues(java.lang.String)> --> <org.apache.james.mime4j.util.StringArrayMap: java.lang.String[] asStringArray(java.lang.Object)>
<org.apache.james.mime4j.util.StringArrayMap: java.util.Map asMap(java.util.Map)> --> <org.apache.james.mime4j.util.StringArrayMap: java.lang.String[] asStringArray(java.lang.Object)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStopStringLiteralDfa_3(int,long)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersHorizontal(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getWidth()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawHorizontalDivider(android.graphics.Canvas,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: int getWidth()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: void shift()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.Buffer: void shift()>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Buffer: void shift()>
<com.actionbarsherlock.widget.ActivityChooserView: void onDetachedFromWindow()> --> <com.actionbarsherlock.widget.ActivityChooserModel: void unregisterObserver(java.lang.Object)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setDataModel(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserModel: void unregisterObserver(java.lang.Object)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$3: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: com.matburt.mobileorg.Gui.Capture.PayloadFragment$OnPayloadModifiedListener access$200(com.matburt.mobileorg.Gui.Capture.PayloadFragment)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: com.matburt.mobileorg.Gui.Capture.PayloadFragment$OnPayloadModifiedListener access$200(com.matburt.mobileorg.Gui.Capture.PayloadFragment)>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String formatDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String typeToFormated(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.regex.Pattern getTimestampMatcher(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String typeToFormated(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.matburt.mobileorg.OrgData.OrgFile: void addFile(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: long addFileNode(long,android.content.ContentResolver)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.entity.BasicHttpEntity: void setContent(java.io.InputStream)>
<com.matburt.mobileorg.Services.TimeclockService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.TimeclockService: void setTimeoutAlarm(int,int)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: void setModifiable(boolean)>
<com.commonsware.cwac.merge.MergeAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.commonsware.cwac.merge.MergeAdapter: java.util.List getPieces()>
<com.commonsware.cwac.merge.MergeAdapter: java.lang.Object getItem(int)> --> <com.commonsware.cwac.merge.MergeAdapter: java.util.List getPieces()>
<com.commonsware.cwac.merge.MergeAdapter: java.lang.Object[] getSections()> --> <com.commonsware.cwac.merge.MergeAdapter: java.util.List getPieces()>
<com.commonsware.cwac.merge.MergeAdapter: int getCount()> --> <com.commonsware.cwac.merge.MergeAdapter: java.util.List getPieces()>
<com.commonsware.cwac.merge.MergeAdapter: long getItemId(int)> --> <com.commonsware.cwac.merge.MergeAdapter: java.util.List getPieces()>
<com.commonsware.cwac.merge.MergeAdapter: android.widget.ListAdapter getAdapter(int)> --> <com.commonsware.cwac.merge.MergeAdapter: java.util.List getPieces()>
<com.commonsware.cwac.merge.MergeAdapter: int getPositionForSection(int)> --> <com.commonsware.cwac.merge.MergeAdapter: java.util.List getPieces()>
<com.commonsware.cwac.merge.MergeAdapter: int getSectionForPosition(int)> --> <com.commonsware.cwac.merge.MergeAdapter: java.util.List getPieces()>
<com.commonsware.cwac.merge.MergeAdapter: boolean isEnabled(int)> --> <com.commonsware.cwac.merge.MergeAdapter: java.util.List getPieces()>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void FillBuff()>
<com.actionbarsherlock.internal.app.ActionBarImpl: int getSelectedNavigationIndex()> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getDropdownSelectedPosition()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void initActionBar()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void initActionBar()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.app.ActionBar getActionBar()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void initActionBar()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void initActionBar()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void setContentView(int)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void initActionBar()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void initActionBar()>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: int getIntValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: int getIntValue()>
<com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: boolean dispatchOnCreate()>
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)> --> <org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)> --> <org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double)> --> <org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)> --> <org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<com.matburt.mobileorg.Plugin.SyncEditActivity: void <init>()> --> <com.matburt.mobileorg.Plugin.SyncEditActivity$1: void <init>(com.matburt.mobileorg.Plugin.SyncEditActivity)>
<org.json.simple.parser.Yylex: void yypushback(int)> --> <org.json.simple.parser.Yylex: void zzScanError(int)>
<org.json.simple.parser.Yylex: org.json.simple.parser.Yytoken yylex()> --> <org.json.simple.parser.Yylex: void zzScanError(int)>
<org.apache.james.mime4j.field.ContentTypeField: java.lang.String getMimeType(org.apache.james.mime4j.field.ContentTypeField,org.apache.james.mime4j.field.ContentTypeField)> --> <org.apache.james.mime4j.field.ContentTypeField: boolean isMimeType(java.lang.String)>
<com.jcraft.jsch.Util: boolean glob(byte[],byte[])> --> <com.jcraft.jsch.Util: boolean glob0(byte[],int,byte[],int)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: boolean isInputMethodNotNeeded()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: boolean access$1100(com.actionbarsherlock.internal.widget.IcsListPopupWindow)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: boolean isInputMethodNotNeeded()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseMimeVersion(java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: int getMinorVersion()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList runSynchronizer(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.SynchronizerInterface: boolean isConfigured()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void start()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.internal.view.menu.MenuBuilder access$200(com.actionbarsherlock.internal.ActionBarSherlockCompat)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Session: void sendKeepAliveMsg()>
<com.actionbarsherlock.app.SherlockActivity: void supportInvalidateOptionsMenu()> --> <com.actionbarsherlock.app.SherlockActivity: void invalidateOptionsMenu()>
<org.apache.james.mime4j.message.Entity: java.lang.String getFilename()> --> <org.apache.james.mime4j.field.ContentDispositionField: java.lang.String getFilename()>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String nodeToHTMLRecursive(com.matburt.mobileorg.OrgData.OrgNode,int)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String nodeToHTMLRecursive(com.matburt.mobileorg.OrgData.OrgNode,int)>
<com.matburt.mobileorg.util.OrgNode2Html: java.lang.String toHTML(com.matburt.mobileorg.OrgData.OrgNode,int)> --> <com.matburt.mobileorg.util.OrgNode2Html: java.lang.String nodeToHTMLRecursive(com.matburt.mobileorg.OrgData.OrgNode,int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setWindowTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setTitleImpl(java.lang.CharSequence)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setTitleImpl(java.lang.CharSequence)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void init(java.io.OutputStream,int,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: int getWidth()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: int getWidth()>
<org.apache.http.entity.mime.MultipartEntity: boolean isRepeatable()> --> <org.apache.http.entity.mime.FormBodyPart: org.apache.james.mime4j.message.Body getBody()>
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine)> --> <org.apache.http.message.BasicHttpEntityEnclosingRequest: void <init>(org.apache.http.RequestLine)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean isReservingOverflow()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean isReservingOverflow()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchCloseOptionsMenu()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean isReservingOverflow()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchOpenOptionsMenu()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean isReservingOverflow()>
<org.apache.james.mime4j.field.address.Address: java.lang.String getDisplayString()> --> <org.apache.james.mime4j.field.address.Address: java.lang.String getDisplayString(boolean)>
<org.apache.james.mime4j.field.address.Address: java.lang.String toString()> --> <org.apache.james.mime4j.field.address.Address: java.lang.String getDisplayString(boolean)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int measureHeightOfChildren(int,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: int getDividerHeight()>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.OAuthConsumer: void setTokenWithSecret(java.lang.String,java.lang.String)>
<oauth.signpost.AbstractOAuthProvider: java.lang.String retrieveRequestToken(oauth.signpost.OAuthConsumer,java.lang.String)> --> <oauth.signpost.OAuthConsumer: void setTokenWithSecret(java.lang.String,java.lang.String)>
<org.json.simple.parser.Yylex: org.json.simple.parser.Yytoken yylex()> --> <org.json.simple.parser.Yytoken: void <init>(int,java.lang.Object)>
<org.json.simple.parser.JSONParser: void nextToken()> --> <org.json.simple.parser.Yytoken: void <init>(int,java.lang.Object)>
<com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()> --> <com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo: void <init>(com.actionbarsherlock.widget.ActivityChooserModel,android.content.pm.ResolveInfo)>
<org.apache.james.mime4j.util.CharsetUtil: java.nio.charset.Charset getCharset(java.lang.String)> --> <org.apache.commons.logging.Log: void info(java.lang.Object)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void end()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void addListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void addListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.KeyExchange: java.lang.String getKeyType()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void openOptionsMenu()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void closeOptionsMenu()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setSupportSecondaryProgress(int)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onPostResume()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setSupportProgressBarVisibility(boolean)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void invalidateOptionsMenu()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onPanelClosed(int,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setContentView(int)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onPause()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onStop()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setContentView(android.view.View)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setSupportProgress(int)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onCreateOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void requestWindowFeature(long)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onTitleChanged(java.lang.CharSequence,int)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setSupportProgressBarIndeterminate(boolean)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onMenuOpened(int,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setSupportProgressBarIndeterminateVisibility(boolean)> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onDestroy()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<org.apache.james.mime4j.parser.AbstractEntity: boolean parseField()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: byte byteAt(int)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()> --> <org.apache.james.mime4j.util.ByteArrayBuffer: byte byteAt(int)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: boolean onTouch(android.view.View,android.view.MotionEvent)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int getScrollX()>
<org.apache.james.mime4j.message.Entity: void setText(org.apache.james.mime4j.message.TextBody)> --> <org.apache.james.mime4j.message.Entity: void setText(org.apache.james.mime4j.message.TextBody,java.lang.String)>
<com.matburt.mobileorg.Gui.ViewActivity: void setupRecursionSubmenu(com.actionbarsherlock.view.SubMenu)> --> <com.matburt.mobileorg.Gui.ViewActivity: android.content.res.Resources getResources()>
<com.matburt.mobileorg.Services.CalendarComptabilityWrappers: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Services.CalendarComptabilityWrappers$intCalendarAlerts: void <init>(com.matburt.mobileorg.Services.CalendarComptabilityWrappers)>
<com.jcraft.jsch.ChannelExec: java.io.InputStream getErrStream()> --> <com.jcraft.jsch.ChannelExec: java.io.InputStream getExtInputStream()>
<com.matburt.mobileorg.OrgData.OrgProvider: com.matburt.mobileorg.util.SelectionBuilder buildSelectionFromUri(android.net.Uri)> --> <com.matburt.mobileorg.util.SelectionBuilder: void <init>()>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: com.matburt.mobileorg.util.SelectionBuilder getQuery(android.content.Context)> --> <com.matburt.mobileorg.util.SelectionBuilder: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getChildCount()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int zone()>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.SubMenu setIcon(int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setIcon(int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet setDuration(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: com.actionbarsherlock.internal.nineoldandroids.animation.Animator setDuration(long)>
<com.actionbarsherlock.widget.ActivityChooserView: void setActivityChooserModel(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean dismissPopup()>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean dismissPopup()>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean dismissPopup()>
<com.actionbarsherlock.widget.ActivityChooserView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.widget.ActivityChooserView: boolean dismissPopup()>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void setFilenameEncoding(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String getHome()> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: int getServerVersion()> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String realpath(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp$1: void write(byte[],int,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void read(byte[],int,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void throwStatusError(com.jcraft.jsch.Buffer,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void lcd(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpException: void <init>(int,java.lang.String)>
<org.json.simple.JSONValue: java.lang.String toJSONString(java.lang.Object)> --> <org.json.simple.JSONObject: java.lang.String toJSONString(java.util.Map)>
<org.json.simple.JSONObject: java.lang.String toJSONString()> --> <org.json.simple.JSONObject: java.lang.String toJSONString(java.util.Map)>
<com.dropbox.client2.exception.DropboxIOException: void <init>(java.io.IOException)> --> <com.dropbox.client2.exception.DropboxException: void <init>(java.lang.Throwable)>
<com.dropbox.client2.RESTUtility: com.dropbox.client2.DropboxAPI$RequestAndResponse streamRequest(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <com.dropbox.client2.exception.DropboxException: void <init>(java.lang.Throwable)>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxException: void <init>(java.lang.Throwable)>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <com.dropbox.client2.exception.DropboxException: void <init>(java.lang.Throwable)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void <init>()>
<com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> --> <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>
<com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> --> <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>
<com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> --> <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: boolean isMatched(java.lang.String)> --> <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>
<com.jcraft.jsch.KnownHosts: com.jcraft.jsch.HostKey[] getHostKey(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.HostKey: boolean isMatched(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder getQueryFromSettings()>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void setMtime(java.lang.String,int)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chown(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chmod(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void chgrp(int,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)>
<com.matburt.mobileorg.Services.SyncService$1: void start()> --> <com.matburt.mobileorg.Services.SyncService$1: void run()>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofInt(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofKeyframe(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe[])>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void access$000(com.actionbarsherlock.internal.widget.IcsAdapterView,android.os.Parcelable)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void onRestoreInstanceState(android.os.Parcelable)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void onRestoreInstanceState(android.os.Parcelable)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void setupLocation()> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildrenStringArray(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getSiblingsStringArray(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildrenStringArray(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void addChild(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildrenStringArray(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.TabsAdapter: void notifyDataSetChanged()>
<com.dropbox.client2.session.WebAuthSession: com.dropbox.client2.session.WebAuthSession$WebAuthInfo getAuthInfo()> --> <com.dropbox.client2.session.WebAuthSession: com.dropbox.client2.session.WebAuthSession$WebAuthInfo getAuthInfo(java.lang.String)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void onConfigurationChanged(android.content.res.Configuration)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void onFinishInflate()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: android.view.View findViewById(int)>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncNode(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.util.MultiMap,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getCleanedName()>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS stat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS lstat(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: java.lang.String isUnique(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)> --> <org.json.JSONArray: int length()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_2()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofKeyframe(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: java.lang.Class getType()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setKeyframes(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: java.lang.Class getType()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: int getVisibility()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: int getVisibility()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void addTagEntry(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getTags(android.content.ContentResolver)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void refreshProgress(int,int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable: void <init>(com.actionbarsherlock.internal.widget.IcsProgressBar,int,int,boolean)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initTitle()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: android.view.View getChildAt(int)>
<com.actionbarsherlock.app.SherlockActivity: void setSupportProgressBarIndeterminateVisibility(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarIndeterminateVisibility(boolean)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void setSupportProgressBarIndeterminateVisibility(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarIndeterminateVisibility(boolean)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setSupportProgressBarIndeterminateVisibility(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarIndeterminateVisibility(boolean)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void setSupportProgressBarIndeterminateVisibility(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarIndeterminateVisibility(boolean)>
<com.actionbarsherlock.app.SherlockListActivity: void setSupportProgressBarIndeterminateVisibility(boolean)> --> <com.actionbarsherlock.ActionBarSherlock: void setProgressBarIndeterminateVisibility(boolean)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$1: void start()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()>
<com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.Compression: byte[] compress(byte[],int,int[])>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList pull(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseIndexFile()>
<com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream,boolean)> --> <com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: java.lang.Object getItem(int)> --> <com.actionbarsherlock.widget.ActivityChooserModel: android.content.pm.ResolveInfo getActivity(int)>
<com.actionbarsherlock.widget.ShareActionProvider: void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu)> --> <com.actionbarsherlock.widget.ActivityChooserModel: android.content.pm.ResolveInfo getActivity(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void ReInit(org.apache.james.mime4j.field.datetime.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void ReInit(org.apache.james.mime4j.field.datetime.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void ReInit(org.apache.james.mime4j.field.datetime.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void ReInit(org.apache.james.mime4j.field.datetime.parser.SimpleCharStream)>
<com.matburt.mobileorg.Services.TimeclockDialog: void endTimeclock()> --> <com.matburt.mobileorg.Services.TimeclockDialog: void finish()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setHorizontalScrollBarEnabled(boolean)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void access$400(com.matburt.mobileorg.Gui.Capture.LocationEntry,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: void setupSpinner(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void init(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.Gui.Capture.LocationFragment,java.util.ArrayList,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: void setupSpinner(java.lang.String)>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ParseException: void <init>(java.lang.String)>
<com.dropbox.client2.RESTUtility: void updateClientProxy(org.apache.http.client.HttpClient,com.dropbox.client2.session.Session)> --> <org.apache.http.client.HttpClient: org.apache.http.params.HttpParams getParams()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parseLine()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList pull(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseChecksumFile()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.widget.LinearLayout access$800(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.widget.LinearLayout access$800(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.app.SherlockListActivity: boolean onMenuItemSelected(int,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockListActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void access$000(com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void saveConfig()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: boolean performClick()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void playSoundEffect(int)>
<com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)>
<com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)>
<com.jcraft.jsch.ChannelSession: void start()> --> <com.jcraft.jsch.Buffer: void skip(int)>
<com.jcraft.jsch.Channel$1: void flush()> --> <com.jcraft.jsch.Buffer: void skip(int)>
<com.jcraft.jsch.ChannelDirectTCPIP: void start()> --> <com.jcraft.jsch.Buffer: void skip(int)>
<com.jcraft.jsch.Session: void encode(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.Buffer: void skip(int)>
<com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> --> <com.jcraft.jsch.Buffer: void skip(int)>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.Buffer: void skip(int)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Buffer: void skip(int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.Buffer: void skip(int)>
<com.jcraft.jsch.ChannelSftp: void fill(com.jcraft.jsch.Buffer,int)> --> <com.jcraft.jsch.Buffer: void skip(int)>
<com.jcraft.jsch.Packet: void padding(int)> --> <com.jcraft.jsch.Buffer: void skip(int)>
<org.apache.http.entity.mime.FormBodyPart: void <init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.http.entity.mime.FormBodyPart: void setBody(org.apache.james.mime4j.message.Body)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: boolean hasVisibleItems()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean isVisible()>
<com.dropbox.client2.DropboxAPI$ChunkedUploader: void upload(com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploadRequest chunkedUploadRequest(java.io.InputStream,long,com.dropbox.client2.ProgressListener,long,java.lang.String)>
<com.jcraft.jsch.ChannelSession: void setEnv(byte[],byte[])> --> <com.jcraft.jsch.ChannelSession: java.util.Hashtable getEnv()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setLogo(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setLogo(int)>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: void <init>(com.dropbox.client2.session.AbstractSession$1)> --> <com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: void <init>()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void flagActionItems()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void flagActionItems()>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void flagActionItems()>
<com.matburt.mobileorg.Services.CalendarSyncService: void tryToInsertNode(com.matburt.mobileorg.util.MultiMap,com.matburt.mobileorg.OrgData.OrgNodeDate,java.lang.String,com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.util.MultiMap: void remove(long,java.lang.Object)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry: void updateLocations(java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: void removeChildren(com.matburt.mobileorg.Gui.Capture.LocationEntry)>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: void setHeader(java.lang.String,java.lang.String)>
<org.apache.http.protocol.ResponseDate: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: void setHeader(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofFloat(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: void <init>(float)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_8()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_9()>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.parser.MimeEntity: void monitor(org.apache.james.mime4j.parser.Event)>
<com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildChildrenUri(long)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: android.net.Uri buildChildrenUri(java.lang.String)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void setVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void setVisibility(int)>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelDirectTCPIP: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: com.jcraft.jsch.Session getSession()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxFileInfo getThumbnail(java.lang.String,java.io.OutputStream,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getThumbnailStream(java.lang.String,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void prepareButtons()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$2: void <init>(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.matburt.mobileorg.OrgData.OrgProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> --> <com.matburt.mobileorg.OrgData.OrgProvider: android.content.Context getContext()>
<com.matburt.mobileorg.OrgData.OrgProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> --> <com.matburt.mobileorg.OrgData.OrgProvider: android.content.Context getContext()>
<com.matburt.mobileorg.OrgData.OrgProvider: boolean onCreate()> --> <com.matburt.mobileorg.OrgData.OrgProvider: android.content.Context getContext()>
<com.matburt.mobileorg.OrgData.OrgProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> --> <com.matburt.mobileorg.OrgData.OrgProvider: android.content.Context getContext()>
<com.actionbarsherlock.widget.ActivityChooserView: void onMeasure(int,int)> --> <com.actionbarsherlock.widget.ActivityChooserView: void measureChild(android.view.View,int,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void refresh()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void expandNodes(java.util.ArrayList)>
<com.actionbarsherlock.widget.ActivityChooserModel: void sortActivities()> --> <com.actionbarsherlock.widget.ActivityChooserModel: void notifyChanged()>
<com.actionbarsherlock.widget.ActivityChooserModel: void loadActivitiesLocked()> --> <com.actionbarsherlock.widget.ActivityChooserModel: void notifyChanged()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitWhenNarrow(boolean)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void prepareButtons()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$1: void <init>(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void UpdateLineColumn(char)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parameter()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.lang.String value()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: android.app.Activity access$600(com.actionbarsherlock.internal.ActionBarSherlockCompat)>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> --> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> --> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
<com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> --> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
<com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> --> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
<com.jcraft.jsch.ChannelSftp: void sendINIT()> --> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
<com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.ChannelSftp: void putHEAD(byte,int)>
<com.matburt.mobileorg.Gui.Wizard.FolderAdapter$2: void onCheckedChanged(android.widget.CompoundButton,boolean)> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: int access$100(com.matburt.mobileorg.Gui.Wizard.FolderAdapter)>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void setInputStream(java.io.InputStream)>
<org.apache.james.mime4j.parser.MimeTokenStream: void stop()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: void truncate()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: android.view.ViewGroup generateLayout()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean requestFeature(int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: void restoreActionViewStates(android.os.Bundle)>
<com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void <init>(com.actionbarsherlock.widget.ActivityChooserView,com.actionbarsherlock.widget.ActivityChooserView$1)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void setupTagEntries(java.util.ArrayList)> --> <com.matburt.mobileorg.Gui.Capture.TagTableRow: void setLast()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView access$300(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,com.actionbarsherlock.app.ActionBar$Tab,boolean)>
<org.json.simple.parser.Yylex: org.json.simple.parser.Yytoken yylex()> --> <org.json.simple.parser.Yylex: java.lang.String yytext()>();     case 3: goto $i5 = Phi($i5, $i5_8, $i5_8, $i5_8, $i5_8, $i5_8, $i5_8, $i5_8, $i5_8, $i5_8, $i5_8, $i5_8, $i5_8, $i5_8);     case 4: goto $r7_2 = $r0.<org.json.simple.parser.Yylex: java.lang.StringBuffer sb>;     case 5: goto $r10_7 = new org.json.simple.parser.Yytoken;     case 6: goto $r10 = new org.json.simple.parser.Yytoken;     case 7: goto $r10_8 = new org.json.simple.parser.Yytoken;     case 8: goto $r10_5 = new org.json.simple.parser.Yytoken;     case 9: goto $r10_10 = new org.json.simple.parser.Yytoken;     case 10: goto $r10_6 = new org.json.simple.parser.Yytoken;     case 11: goto $r7_1 = $r0.<org.json.simple.parser.Yylex: java.lang.StringBuffer sb>;     case 12: goto $r7_5 = $r0.<org.json.simple.parser.Yylex: java.lang.StringBuffer sb>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelX11: void disconnect()>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.ChannelX11: void disconnect()>
<org.apache.james.mime4j.field.DateTimeField: void parse()> --> <org.apache.james.mime4j.field.DateTimeField: java.lang.String getBody()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <clinit>()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void jj_la1_0()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void <clinit>()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.IntEvaluator: void <init>()>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncFile(java.lang.String)> --> <com.matburt.mobileorg.Services.CalendarSyncService: void syncNode(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.util.MultiMap,java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void loginUbuntuOne()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()>
<com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy: long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HeaderElementIterator: org.apache.http.HeaderElement nextElement()>
<com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void <init>(android.content.Context,com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void setContext(android.content.Context)>
<org.json.simple.ItemList: java.lang.String toString()> --> <org.json.simple.ItemList: java.lang.String toString(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void doRefreshProgress(int,int,boolean,boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void onProgressRefresh(float,boolean)>
<com.dropbox.client2.session.Session$ProxyInfo: void <init>(java.lang.String)> --> <com.dropbox.client2.session.Session$ProxyInfo: void <init>(java.lang.String,int)>
<org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.SocketHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.field.ContentTypeField: java.lang.String getMimeType(org.apache.james.mime4j.field.ContentTypeField,org.apache.james.mime4j.field.ContentTypeField)> --> <org.apache.james.mime4j.field.ContentTypeField: boolean isMultipart()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void invalidate()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList runSynchronizer(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void pushCaptures()>
<org.apache.james.mime4j.field.UnstructuredField: void parse()> --> <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWords(java.lang.String)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildNameAddr(org.apache.james.mime4j.field.address.parser.ASTname_addr)> --> <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWords(java.lang.String)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Address buildAddress(org.apache.james.mime4j.field.address.parser.ASTaddress)> --> <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWords(java.lang.String)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> --> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.session.Session: java.lang.String getContentServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getContentServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry commitChunkedUpload(java.lang.String,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getContentServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploadRequest chunkedUploadRequest(java.io.InputStream,long,com.dropbox.client2.ProgressListener,long,java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getContentServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getThumbnailStream(java.lang.String,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat)> --> <com.dropbox.client2.session.Session: java.lang.String getContentServer()>
<org.apache.james.mime4j.parser.MimeEntity: void clearMimeStream()> --> <org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: void <init>(java.io.InputStream,int)>
<org.apache.james.mime4j.parser.MimeEntity: void <init>(org.apache.james.mime4j.io.LineNumberSource,org.apache.james.mime4j.io.BufferedLineReaderInputStream,org.apache.james.mime4j.descriptor.BodyDescriptor,int,int,org.apache.james.mime4j.parser.MimeEntityConfig)> --> <org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: void <init>(java.io.InputStream,int)>
<org.apache.james.mime4j.parser.MimeEntity: void createMimeStream()> --> <org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: void <init>(java.io.InputStream,int)>
<org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.io.LineReaderInputStreamAdaptor: void <init>(java.io.InputStream,int)>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <javax.crypto.Mac: byte[] doFinal(byte[])>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: int getEndLine()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: int getEndLine()>
<com.actionbarsherlock.internal.ActionBarSherlockNative: void <init>(android.app.Activity,int)> --> <com.actionbarsherlock.ActionBarSherlock: void <init>(android.app.Activity,int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void <init>(android.app.Activity,int)> --> <com.actionbarsherlock.ActionBarSherlock: void <init>(android.app.Activity,int)>
<org.apache.james.mime4j.field.contenttype.parser.ParseException: void <init>(java.lang.Throwable)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.Throwable)>
<org.apache.james.mime4j.field.language.parser.ParseException: void <init>(java.lang.Throwable)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.Throwable)>
<org.apache.james.mime4j.field.structured.parser.ParseException: void <init>(java.lang.Throwable)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.Throwable)>
<org.apache.james.mime4j.field.address.parser.ParseException: void <init>(java.lang.Throwable)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.Throwable)>
<org.apache.james.mime4j.field.mimeversion.parser.ParseException: void <init>(java.lang.Throwable)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.Throwable)>
<org.apache.james.mime4j.field.datetime.parser.ParseException: void <init>(java.lang.Throwable)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.Throwable)>
<org.apache.james.mime4j.field.contentdisposition.parser.ParseException: void <init>(java.lang.Throwable)> --> <org.apache.james.mime4j.field.ParseException: void <init>(java.lang.Throwable)>
<org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.AddressList parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.AddressList buildAddressList(org.apache.james.mime4j.field.address.parser.ASTaddress_list)>
<com.jcraft.jsch.Channel$PassiveInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream)> --> <com.jcraft.jsch.Channel$MyPipedInputStream: void <init>(com.jcraft.jsch.Channel,java.io.PipedOutputStream)>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)>
<com.actionbarsherlock.app.SherlockListActivity: boolean onCreateOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchCreateOptionsMenu(android.view.Menu)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onCreateOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchCreateOptionsMenu(android.view.Menu)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: boolean onCreateOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchCreateOptionsMenu(android.view.Menu)>
<com.actionbarsherlock.app.SherlockFragmentActivity: boolean onCreatePanelMenu(int,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchCreateOptionsMenu(android.view.Menu)>
<com.actionbarsherlock.app.SherlockActivity: boolean onCreateOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: boolean dispatchCreateOptionsMenu(android.view.Menu)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: android.app.Dialog access$000(com.matburt.mobileorg.Gui.Outline.OutlineItem)>
<org.apache.http.impl.AbstractHttpClientConnection: void <init>()> --> <org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()>
<com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void setVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void clearAnimation()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void announceProgressDownload(java.lang.String,int,int)> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void announceProgressUpdate(int,java.lang.String)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void announceSyncDone()> --> <com.matburt.mobileorg.Synchronizers.Synchronizer: void announceProgressUpdate(int,java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard$3: void start()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard$3: void run()>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <org.xmlpull.v1.XmlPullParser: java.lang.String getName()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <org.xmlpull.v1.XmlPullParser: java.lang.String getName()>
<com.matburt.mobileorg.Settings.SettingsActivity: void <init>()> --> <com.matburt.mobileorg.Settings.SettingsActivity$1: void <init>(com.matburt.mobileorg.Settings.SettingsActivity)>
<org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWords(java.lang.String)> --> <org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWord(java.lang.String,int,int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void backup(int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void backup(int)>
<org.json.simple.parser.Yylex: void yypushback(int)> --> <org.json.simple.parser.Yylex: int yylength()>
<com.jcraft.jsch.Util: java.lang.String[] split(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
<com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
<com.jcraft.jsch.KnownHosts: void setKnownHosts(java.io.InputStream)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[],int,int)>
<oauth.signpost.signature.QueryStringSigningStrategy: java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpRequest: void setRequestUrl(java.lang.String)>
<com.jcraft.jsch.Session: void send_newkeys()> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.Session: void disconnect()> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Logger: boolean isEnabled(int)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine advance()> --> <org.apache.james.mime4j.descriptor.MutableBodyDescriptor: java.lang.String getMimeType()>
<org.apache.james.mime4j.parser.AbstractEntity: java.lang.String toString()> --> <org.apache.james.mime4j.descriptor.MutableBodyDescriptor: java.lang.String getMimeType()>
<com.matburt.mobileorg.Gui.Capture.TagTableRow: void setTags(java.lang.String,java.util.ArrayList)> --> <com.matburt.mobileorg.Gui.Capture.TagTableRow: android.view.View findViewById(int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setExclusiveItemChecked(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: int getGroupId()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setMeasuredDimension(int,int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateInt(int,int,boolean)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void onIntChanged(int,int)>
<org.apache.james.mime4j.field.address.MailboxList: void print()> --> <org.apache.james.mime4j.field.address.MailboxList: int size()>
<org.apache.james.mime4j.field.MailboxField: void parse()> --> <org.apache.james.mime4j.field.address.MailboxList: int size()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int pos()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean hasData()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int pos()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int pos()>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int pos()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: void calculateBoundaryLen()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int pos()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: void skipBoundary()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int pos()>
<com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor: com.dropbox.client2.DropboxAPI$DeltaEntry extract(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonList expectList()>
<com.dropbox.client2.DropboxAPI$DeltaPage: com.dropbox.client2.DropboxAPI$DeltaPage extractFromJson(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonList expectList()>
<com.dropbox.client2.jsonextract.JsonList$Extractor: java.util.List extract(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonList expectList()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Buffer: byte[] getString(int[],int[])>
<com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)>
<com.actionbarsherlock.app.SherlockFragmentActivity: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)>
<com.actionbarsherlock.app.SherlockListActivity: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.ActionBarSherlock: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void animateToMode(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void animateToVisibility(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.view.View getChildAt(int)>
<org.apache.http.protocol.HttpRequestHandlerRegistry: void setHandlers(java.util.Map)> --> <org.apache.http.protocol.UriPatternMatcher: void setHandlers(java.util.Map)>
<com.jcraft.jsch.JSchPartialAuthException: void <init>()> --> <com.jcraft.jsch.JSchException: void <init>()>
<com.jcraft.jsch.JSchAuthCancelException: void <init>()> --> <com.jcraft.jsch.JSchException: void <init>()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder,android.view.View,boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: void setCallback(com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void addListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void addListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void addListener(com.actionbarsherlock.internal.nineoldandroids.animation.Animator$AnimatorListener)>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.descriptor.MutableBodyDescriptor newBodyDescriptor(org.apache.james.mime4j.descriptor.BodyDescriptor)> --> <org.apache.james.mime4j.parser.MimeEntityConfig: boolean isMaximalBodyDescriptor()>
<org.apache.http.entity.mime.content.InputStreamBody: void writeTo(java.io.OutputStream,int)> --> <org.apache.http.entity.mime.content.InputStreamBody: void writeTo(java.io.OutputStream)>
<com.matburt.mobileorg.Gui.ViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.ViewFragment$InternalWebViewClient: void <init>(com.matburt.mobileorg.Gui.ViewFragment)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.ViewFragment$InternalWebViewClient: void <init>(com.matburt.mobileorg.Gui.ViewFragment)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void <init>(com.actionbarsherlock.internal.widget.IcsSpinner,android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void setPromptPosition(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void handleDropboxResume()> --> <com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Account accountInfo()>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.impl.DefaultConnectionReuseStrategy: org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$1)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncFile(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: android.database.Cursor getFileSchedule(java.lang.String,boolean,android.content.ContentResolver)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.language.parser.Token)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char[] GetSuffix(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: char[] GetSuffix(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveNfa_2(int,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: java.lang.Object getItem(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: com.actionbarsherlock.app.ActionBar$Tab getTab()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener: void onClick(android.view.View)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: com.actionbarsherlock.app.ActionBar$Tab getTab()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onItemSelected(com.actionbarsherlock.internal.widget.IcsAdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: com.actionbarsherlock.app.ActionBar$Tab getTab()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void ReInit(org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager)> --> <org.apache.james.mime4j.field.language.parser.Token: void <init>()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.language.parser.Token: void <init>()>
<org.apache.james.mime4j.field.language.parser.Token: org.apache.james.mime4j.field.language.parser.Token newToken(int)> --> <org.apache.james.mime4j.field.language.parser.Token: void <init>()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.language.parser.Token: void <init>()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void <init>(org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager)> --> <org.apache.james.mime4j.field.language.parser.Token: void <init>()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.language.parser.Token: void <init>()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.language.parser.Token: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void setTranslationY(float)>
<com.jcraft.jsch.ChannelSftp: void access$900(com.jcraft.jsch.ChannelSftp,byte[],long,int)> --> <com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int)>
<oauth.signpost.AbstractOAuthConsumer: void <init>(java.lang.String,java.lang.String)> --> <oauth.signpost.AbstractOAuthConsumer: void setSigningStrategy(oauth.signpost.signature.SigningStrategy)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void removeAgendaBlockEntry(int)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void removeAgendaEntry(int,int,android.content.Context)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.ParseException generateParseException()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.apache.http.auth.AuthScope: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.Token jj_consume_token(int)>(4);     default: goto $r4 = $r0.<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: int[] jj_la1>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void addr_spec()> --> <org.apache.james.mime4j.field.address.parser.ASTaddr_spec: void <init>(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void ReInit(org.apache.james.mime4j.field.language.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void <init>(org.apache.james.mime4j.field.language.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void SwitchTo(int)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: android.view.ViewParent getParent()>
<org.apache.http.UnsupportedHttpVersionException: void <init>()> --> <org.apache.http.ProtocolException: void <init>()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int resolveSizeAndState(int,int,int)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: void setContext(android.content.Context)>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.Buffer access$700(com.jcraft.jsch.ChannelSftp)>
<com.actionbarsherlock.internal.widget.ActionBarView: void configPresenters(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void <init>(com.actionbarsherlock.widget.ActivityChooserModel,com.actionbarsherlock.widget.ActivityChooserModel$1)> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void <init>(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: boolean isShowing()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.http.impl.io.HttpRequestWriter: void writeHeadLine(org.apache.http.HttpMessage)> --> <org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatRequestLine(org.apache.http.RequestLine,org.apache.http.message.LineFormatter)> --> <org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)>
<org.apache.james.mime4j.util.StringArrayMap: java.util.Enumeration asStringEnum(java.lang.Object)> --> <org.apache.james.mime4j.util.StringArrayMap$1: void <init>(java.lang.Object)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getHour()>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpProgressMonitor: void init(int,java.lang.String,java.lang.String,long)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpProgressMonitor: void init(int,java.lang.String,java.lang.String,long)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.SftpProgressMonitor: void init(int,java.lang.String,java.lang.String,long)>
<com.jcraft.jsch.ChannelSftp: void get(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.SftpProgressMonitor: void init(int,java.lang.String,java.lang.String,long)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.SftpProgressMonitor: void init(int,java.lang.String,java.lang.String,long)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void ReInit(java.io.InputStream,java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.lang.String,long,java.util.Date,java.util.Date,java.util.Date)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.util.Map)>
<org.apache.james.mime4j.message.Entity: void setFilename(java.lang.String)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentDispositionField contentDisposition(java.lang.String,java.util.Map)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parse(com.matburt.mobileorg.OrgData.OrgFile,java.io.BufferedReader,android.content.Context)> --> <com.matburt.mobileorg.util.PreferenceUtils: boolean getCombineBlockAgendas()>
<oauth.signpost.OAuth: oauth.signpost.http.HttpParameters decodeForm(java.lang.String)> --> <oauth.signpost.OAuth: java.lang.String percentDecode(java.lang.String)>
<oauth.signpost.http.HttpParameters: java.lang.String getFirst(java.lang.Object,boolean)> --> <oauth.signpost.OAuth: java.lang.String percentDecode(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setObjectValues(java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofObject(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator,java.lang.Object[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setObjectValues(java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofObject(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator,java.lang.Object[])>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.ViewParent getParent()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.ViewParent getParent()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.ViewParent getParent()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.ViewParent getParent()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.ViewParent getParent()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.ViewParent getParent()>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getNodeId(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getId()>
<com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: void onStart(android.content.Intent,int)> --> <com.matburt.mobileorg.Gui.Widget.MobileOrgWidget$MobileOrgWidgetService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setEnabled(boolean)>
<org.apache.james.mime4j.message.Multipart: void setEpilogue(java.lang.String)> --> <org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.lang.String)>
<org.apache.http.entity.mime.MinimalField: org.apache.james.mime4j.util.ByteSequence getRaw()> --> <org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.lang.String)>
<org.apache.james.mime4j.message.Multipart: void setPreamble(java.lang.String)> --> <org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.lang.String)>
<org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParsedField parse(java.lang.String)> --> <org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.lang.String)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.lang.String)>
<org.apache.james.mime4j.parser.MimeEntity: void skipHeader(java.lang.String)> --> <org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.lang.String)>
<org.apache.james.mime4j.message.MessageWriter: org.apache.james.mime4j.util.ByteSequence getBoundary(org.apache.james.mime4j.field.ContentTypeField)> --> <org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.jcraft.jsch.Session: void setPortForwardingR(java.lang.String,int,java.lang.String,java.lang.Object[])> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void addPort(com.jcraft.jsch.Session,java.lang.String,int,java.lang.String,java.lang.Object[])>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date: int getMonth()>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelDirectTCPIP: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void eof()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int obs_zone()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int getMilitaryZoneOffset(char)>
<org.apache.http.impl.io.SocketInputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.SocketInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)>
<com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.MenuItem setOnActionExpandListener(com.actionbarsherlock.view.MenuItem$OnActionExpandListener)> --> <com.actionbarsherlock.internal.view.menu.MenuItemWrapper$1: void <init>(com.actionbarsherlock.internal.view.menu.MenuItemWrapper)>
<com.matburt.mobileorg.Gui.ViewActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.ViewActivity: android.content.ContentResolver getContentResolver()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStopStringLiteralDfa_0(int,long)>
<org.apache.james.mime4j.parser.MimeTokenStream: void doParse(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.parser.MimeEntityConfig: boolean isCountLineNumbers()>
<com.jcraft.jsch.ChannelDirectTCPIP: void <init>()> --> <com.jcraft.jsch.Channel: void <init>()>
<com.jcraft.jsch.ChannelX11: void <init>()> --> <com.jcraft.jsch.Channel: void <init>()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()> --> <com.jcraft.jsch.Channel: void <init>()>
<com.jcraft.jsch.ChannelAgentForwarding: void <init>()> --> <com.jcraft.jsch.Channel: void <init>()>
<com.jcraft.jsch.ChannelSession: void <init>()> --> <com.jcraft.jsch.Channel: void <init>()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void buildConsumer()> --> <oauth.signpost.commonshttp.CommonsHttpOAuthConsumer: void setMessageSigner(oauth.signpost.signature.OAuthMessageSigner)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: android.content.res.Resources getResources()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.graphics.drawable.Drawable getIcon()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: android.content.res.Resources getResources()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxUnlinkedException: void <init>()>
<com.dropbox.client2.DropboxAPI: void assertAuthenticated()> --> <com.dropbox.client2.exception.DropboxUnlinkedException: void <init>()>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()> --> <org.apache.http.impl.HttpConnectionMetricsImpl: void incrementResponseCount()>
<org.apache.http.impl.AbstractHttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)> --> <org.apache.http.impl.HttpConnectionMetricsImpl: void incrementResponseCount()>
<org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,org.apache.james.mime4j.field.address.DomainList,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,org.apache.james.mime4j.field.address.DomainList,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.address.Mailbox: void <init>(org.apache.james.mime4j.field.address.DomainList,java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,org.apache.james.mime4j.field.address.DomainList,java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,org.apache.james.mime4j.field.address.DomainList,java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserModel: int getActivityIndex(android.content.pm.ResolveInfo)>
<org.apache.james.mime4j.field.address.parser.ASTangle_addr: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.ASTangle_addr,java.lang.Object)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)> --> <com.actionbarsherlock.app.SherlockFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)> --> <com.actionbarsherlock.app.SherlockFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)>
<com.actionbarsherlock.app.SherlockFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> --> <com.actionbarsherlock.app.SherlockFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)> --> <com.actionbarsherlock.app.SherlockFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)>
<oauth.signpost.AbstractOAuthProvider: void handleUnexpectedResponse(int,oauth.signpost.http.HttpResponse)> --> <oauth.signpost.exception.OAuthCommunicationException: void <init>(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Gui.CertificateConflictActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.CertificateConflictActivity: android.view.View findViewById(int)>
<com.dropbox.client2.DropboxAPI$ChunkedUploader: void upload(com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$ChunkedUploadResponse: java.lang.String getUploadId()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isVisible()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isVisible()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean hasVisibleItems()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isVisible()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isVisible()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isVisible()>
<com.dropbox.client2.ProgressListener$ProgressHttpEntity: void writeTo(java.io.OutputStream)> --> <com.dropbox.client2.ProgressListener$ProgressHttpEntity$CountingOutputStream: void <init>(com.dropbox.client2.ProgressListener$ProgressHttpEntity,java.io.OutputStream)>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.Header: java.lang.String getValue()>
<org.apache.http.message.BasicHttpEntityEnclosingRequest: boolean expectContinue()> --> <org.apache.http.Header: java.lang.String getValue()>
<org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.Header: java.lang.String getValue()>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.Header: java.lang.String getValue()>
<org.apache.http.impl.entity.StrictContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.Header: java.lang.String getValue()>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: void <init>(org.apache.http.HttpResponse)> --> <org.apache.http.Header: java.lang.String getValue()>
<org.apache.http.message.BasicTokenIterator: int findNext(int)> --> <org.apache.http.Header: java.lang.String getValue()>
<oauth.signpost.commonshttp.HttpRequestAdapter: java.util.Map getAllHeaders()> --> <org.apache.http.Header: java.lang.String getValue()>
<oauth.signpost.commonshttp.HttpRequestAdapter: java.lang.String getContentType()> --> <org.apache.http.Header: java.lang.String getValue()>
<com.dropbox.client2.exception.DropboxServerException: java.lang.String getHeader(org.apache.http.HttpResponse,java.lang.String)> --> <org.apache.http.Header: java.lang.String getValue()>
<org.apache.http.message.HeaderGroup: org.apache.http.Header getCondensedHeader(java.lang.String)> --> <org.apache.http.Header: java.lang.String getValue()>
<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)> --> <org.apache.http.Header: java.lang.String getValue()>
<com.dropbox.client2.DropboxAPI$DropboxFileInfo: com.dropbox.client2.DropboxAPI$Entry parseXDropboxMetadata(org.apache.http.HttpResponse)> --> <org.apache.http.Header: java.lang.String getValue()>
<org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()> --> <org.apache.http.Header: java.lang.String getValue()>
<org.apache.http.message.BasicLineFormatter: void doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)> --> <org.apache.http.Header: java.lang.String getValue()>
<oauth.signpost.commonshttp.HttpRequestAdapter: java.lang.String getHeader(java.lang.String)> --> <org.apache.http.Header: java.lang.String getValue()>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.http.Header: java.lang.String getValue()>
<org.apache.http.impl.DefaultConnectionReuseStrategy: org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)> --> <org.apache.http.message.BasicTokenIterator: void <init>(org.apache.http.HeaderIterator)>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getOlpId(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getOrgNodePathFromTopLevel(long,android.content.ContentResolver)>
<org.apache.http.impl.AbstractHttpServerConnection: boolean isStale()> --> <org.apache.http.impl.AbstractHttpServerConnection: boolean isEof()>
<com.matburt.mobileorg.Plugin.SyncEditActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Plugin.BundleScrubber: boolean scrub(android.content.Intent)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>
<org.apache.james.mime4j.field.AddressListField: org.apache.james.mime4j.field.address.AddressList getAddressList()> --> <org.apache.james.mime4j.field.AddressListField: void parse()>
<org.apache.james.mime4j.field.AddressListField: org.apache.james.mime4j.field.address.parser.ParseException getParseException()> --> <org.apache.james.mime4j.field.AddressListField: void parse()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runSynchronize(android.view.View)>
<org.json.simple.parser.JSONParser: java.util.Map createObjectContainer(org.json.simple.parser.ContainerFactory)> --> <org.json.simple.JSONObject: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setClickable(boolean)>
<org.apache.http.impl.SocketHttpClientConnection: void setSocketTimeout(int)> --> <org.apache.http.impl.SocketHttpClientConnection: void assertOpen()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void dispatchInvalidateOptionsMenu()> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean dispatchPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void setTarget(java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void setTarget(java.lang.Object)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setEnabled(boolean)> --> <com.actionbarsherlock.internal.widget.CapitalizingButton: void setEnabled(boolean)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: java.lang.String getActionMode()>
<org.apache.http.impl.io.ChunkedOutputStream: void write(int)> --> <org.apache.http.impl.io.ChunkedOutputStream: void flushCache()>
<org.apache.http.impl.io.ChunkedOutputStream: void finish()> --> <org.apache.http.impl.io.ChunkedOutputStream: void flushCache()>
<org.apache.http.impl.io.ChunkedOutputStream: void flush()> --> <org.apache.http.impl.io.ChunkedOutputStream: void flushCache()>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ExpandBuff(boolean)>
<com.twofortyfouram.locale.MarketActivity: android.app.Dialog onCreateDialog(int)> --> <com.twofortyfouram.locale.MarketActivity$2: void <init>(com.twofortyfouram.locale.MarketActivity)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: android.view.View createSSHConfig()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void setupDoneButton(android.view.View)>
<org.apache.james.mime4j.field.ContentTypeField: void <clinit>()> --> <org.apache.james.mime4j.field.ContentTypeField$1: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addTab(com.actionbarsherlock.app.ActionBar$Tab,boolean)>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: int nodeArity()>
<com.actionbarsherlock.internal.widget.ActionBarView: void configPresenters(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void updateMenuView(boolean)>
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int)> --> <org.apache.http.message.BasicHttpResponse: java.lang.String getReason(int)>
<org.apache.http.message.BasicHttpResponse: void setStatusCode(int)> --> <org.apache.http.message.BasicHttpResponse: java.lang.String getReason(int)>
<org.apache.http.message.BasicHttpResponse: void setLocale(java.util.Locale)> --> <org.apache.http.message.BasicHttpResponse: java.lang.String getReason(int)>
<org.apache.http.protocol.BasicHttpProcessor: java.lang.Object clone()> --> <org.apache.http.protocol.BasicHttpProcessor: void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor)>
<org.apache.http.protocol.BasicHttpProcessor: org.apache.http.protocol.BasicHttpProcessor copy()> --> <org.apache.http.protocol.BasicHttpProcessor: void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor)>
<org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader)> --> <org.apache.http.util.VersionInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.jcraft.jsch.KeyPairRSA: byte[] getPrivateKey()> --> <com.jcraft.jsch.KeyPairRSA: int countLength(int)>
<com.actionbarsherlock.widget.ShareActionProvider: android.view.View onCreateActionView()> --> <com.actionbarsherlock.widget.ActivityChooserView: void setActivityChooserModel(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: java.lang.String toString()>
<org.json.simple.JSONValue: void writeJSONString(java.lang.Object,java.io.Writer)> --> <org.json.simple.JSONArray: void writeJSONString(java.util.List,java.io.Writer)>
<org.json.simple.JSONArray: void writeJSONString(java.io.Writer)> --> <org.json.simple.JSONArray: void writeJSONString(java.util.List,java.io.Writer)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setNumericShortcut(char)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin: void clear()>
<com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread: void start()> --> <com.dropbox.client2.session.AbstractSession$DBClientConnManager: void closeExpiredConnections()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>
<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)> --> <org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)> --> <org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setId(int)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <com.dropbox.client2.session.AbstractSession$3: void <init>(com.dropbox.client2.session.AbstractSession)>
<com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> --> <com.jcraft.jsch.ChannelAgentForwarding: void <init>()>
<org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()> --> <org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>
<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)> --> <org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>
<org.apache.http.message.BasicTokenIterator: int findNext(int)> --> <org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void animateValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void calculateValue(float)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: int getBeginLine()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void archiveNode(boolean)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit archiveNode(android.content.ContentResolver)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void setOnItemLongClickListener(com.actionbarsherlock.internal.widget.IcsAdapterView$OnItemLongClickListener)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean isLongClickable()>
<com.jcraft.jsch.Channel: void setExtOutputStream(java.io.OutputStream,boolean)> --> <com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream,boolean)>
<com.jcraft.jsch.Channel: java.io.InputStream getExtInputStream()> --> <com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream,boolean)>
<com.jcraft.jsch.Channel: void setExtOutputStream(java.io.OutputStream)> --> <com.jcraft.jsch.IO: void setExtOutputStream(java.io.OutputStream,boolean)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(byte[])> --> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
<com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)>
<org.apache.http.entity.mime.content.StringBody: void writeTo(java.io.OutputStream,int)> --> <org.apache.http.entity.mime.content.StringBody: void writeTo(java.io.OutputStream)>
<org.apache.james.mime4j.storage.CipherStorageProvider: javax.crypto.spec.SecretKeySpec getSecretKeySpec()> --> <javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView$2: void <init>(com.actionbarsherlock.internal.widget.ActionBarView)>
<org.apache.james.mime4j.field.contentdisposition.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.TokenMgrError: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void SwitchTo(int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.TokenMgrError: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.util.List doParse()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: org.apache.james.mime4j.field.language.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: java.lang.String language()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: org.apache.james.mime4j.field.language.parser.Token jj_consume_token(int)>
<com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier: void start()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void access$200(com.actionbarsherlock.internal.widget.IcsAdapterView)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl,com.actionbarsherlock.view.ActionMode$Callback)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: int getLeft()>
<org.apache.http.impl.io.SocketOutputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.SocketOutputBuffer: void init(java.io.OutputStream,int,org.apache.http.params.HttpParams)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView$2: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineListView)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> --> <com.jcraft.jsch.Session: void addChannel(com.jcraft.jsch.Channel)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Session: void addChannel(com.jcraft.jsch.Channel)>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.Session: void addChannel(com.jcraft.jsch.Channel)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void main(java.lang.String[])> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parseLine()>
<oauth.signpost.OAuth: java.lang.String formEncode(java.util.Collection)> --> <oauth.signpost.OAuth: void formEncode(java.util.Collection,java.io.OutputStream)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getFileStream(java.lang.String,java.lang.String)> --> <com.dropbox.client2.DropboxAPI$DropboxInputStream: void <init>(org.apache.http.client.methods.HttpUriRequest,org.apache.http.HttpResponse)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxInputStream getThumbnailStream(java.lang.String,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat)> --> <com.dropbox.client2.DropboxAPI$DropboxInputStream: void <init>(org.apache.http.client.methods.HttpUriRequest,org.apache.http.HttpResponse)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit archiveNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void <init>(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgEdit$TYPE,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit archiveNodeToSibling(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void <init>(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgEdit$TYPE,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: void deleteNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgEdit: void <init>(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgEdit$TYPE,android.content.ContentResolver)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveNfa_3(int,int)>
<org.apache.http.message.BasicHeaderValueFormatter: int estimateHeaderElementLen(org.apache.http.HeaderElement)> --> <org.apache.http.HeaderElement: org.apache.http.NameValuePair getParameter(int)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)> --> <org.apache.http.HeaderElement: org.apache.http.NameValuePair getParameter(int)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void writeAgendaBlockEntry(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder,int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void removeBlockAgendaEntry(int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: int addBlockAgenda(android.content.Context,java.lang.String)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void replaceAgenda(com.matburt.mobileorg.Gui.Agenda.BlockAgenda,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: void removeAgenda(int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: java.util.ArrayList getAgendasTitles(android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: com.matburt.mobileorg.Gui.Agenda.BlockAgenda getBlockAgenda(int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.BlockAgenda: java.util.ArrayList readAgendas(android.content.Context)>
<org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.field.address.Mailbox: java.lang.String getLocalPart()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void run()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void start()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void run()>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.ChannelDirectTCPIP: int getRecipient()>
<oauth.signpost.OAuth: java.lang.String addQueryParameters(java.lang.String,java.util.Map)> --> <oauth.signpost.OAuth: java.lang.String addQueryParameters(java.lang.String,java.lang.String[])>
<oauth.signpost.signature.QueryStringSigningStrategy: java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.OAuth: java.lang.String addQueryParameters(java.lang.String,java.lang.String[])>
<oauth.signpost.AbstractOAuthProvider: java.lang.String retrieveRequestToken(oauth.signpost.OAuthConsumer,java.lang.String)> --> <oauth.signpost.OAuth: java.lang.String addQueryParameters(java.lang.String,java.lang.String[])>
<org.apache.james.mime4j.message.MessageWriter: void writeEntity(org.apache.james.mime4j.message.Entity,java.io.OutputStream)> --> <org.apache.james.mime4j.message.MessageWriter: java.io.OutputStream encodeStream(java.io.OutputStream,java.lang.String,boolean)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.content.Context getContext()>
<org.apache.james.mime4j.field.address.AddressList: void print()> --> <org.apache.james.mime4j.field.address.Address: java.lang.String toString()>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseIndexFile()> --> <com.matburt.mobileorg.OrgData.OrgFileParser: java.util.ArrayList getPrioritiesFromIndex(java.lang.String)>
<org.apache.http.entity.AbstractHttpEntity: void consumeContent()> --> <org.apache.http.entity.AbstractHttpEntity: boolean isStreaming()>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setUpChild(android.view.View)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: boolean isEnabled()>
<com.jcraft.jsch.jcraft.Compression: void <init>()> --> <com.jcraft.jzlib.ZStream: void <init>()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void onIntChanged(int,int)> --> <com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateProgressBars(int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: void <init>(java.lang.String,int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setIntValues(int[])>
<com.matburt.mobileorg.Services.CalendarSyncService: com.matburt.mobileorg.util.MultiMap getCalendarEntries(java.lang.String)> --> <com.matburt.mobileorg.OrgData.CalendarEntriesParser: void <init>(com.matburt.mobileorg.Services.CalendarComptabilityWrappers$intEvents,android.database.Cursor)>
<com.matburt.mobileorg.Services.CalendarSyncService: void assimilateCalendar()> --> <com.matburt.mobileorg.OrgData.CalendarEntriesParser: void <init>(com.matburt.mobileorg.Services.CalendarComptabilityWrappers$intEvents,android.database.Cursor)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void invalidateDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void performCollapse()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabAdapter: void <init>(com.actionbarsherlock.internal.widget.ScrollingTabContainerView,com.actionbarsherlock.internal.widget.ScrollingTabContainerView$1)>
<org.apache.james.mime4j.field.address.parser.ASTmailbox: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.ASTmailbox,java.lang.Object)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_2()>
<org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeBaseQuotedPrintable(java.lang.String)> --> <org.apache.james.mime4j.codec.QuotedPrintableInputStream: int read()>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.MimeTokenStream: int next()>
<com.google.gdata.util.common.base.UnicodeEscaper: java.lang.String escapeSlow(java.lang.String,int)> --> <com.google.gdata.util.common.base.UnicodeEscaper: int nextEscapeIndex(java.lang.CharSequence,int,int)>
<com.google.gdata.util.common.base.UnicodeEscaper: java.lang.String escape(java.lang.String)> --> <com.google.gdata.util.common.base.UnicodeEscaper: int nextEscapeIndex(java.lang.CharSequence,int,int)>
<com.google.gdata.util.common.base.UnicodeEscaper$1: java.lang.Appendable append(java.lang.CharSequence,int,int)> --> <com.google.gdata.util.common.base.UnicodeEscaper: int nextEscapeIndex(java.lang.CharSequence,int,int)>
<org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWord(java.lang.String,int,int)> --> <org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>
<org.apache.james.mime4j.storage.DefaultStorageProvider: void initialize()> --> <org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>
<org.apache.james.mime4j.codec.ByteQueue: void clear()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: void <init>()>
<org.apache.james.mime4j.codec.ByteQueue: void <init>()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: void <init>()>
<org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.parser.MimeTokenStream createMaximalDescriptorStream()> --> <org.apache.james.mime4j.parser.MimeTokenStream: void <init>(org.apache.james.mime4j.parser.MimeEntityConfig)>
<org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.parser.MimeTokenStream createStrictValidationStream()> --> <org.apache.james.mime4j.parser.MimeTokenStream: void <init>(org.apache.james.mime4j.parser.MimeEntityConfig)>
<org.apache.james.mime4j.parser.MimeStreamParser: void <init>(org.apache.james.mime4j.parser.MimeEntityConfig)> --> <org.apache.james.mime4j.parser.MimeTokenStream: void <init>(org.apache.james.mime4j.parser.MimeEntityConfig)>
<org.apache.james.mime4j.parser.MimeTokenStream: void <init>()> --> <org.apache.james.mime4j.parser.MimeTokenStream: void <init>(org.apache.james.mime4j.parser.MimeEntityConfig)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void <init>(android.app.Dialog)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void init(android.view.View)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void <init>(android.app.Activity,int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void init(android.view.View)>
<org.json.simple.parser.Yylex: int[] zzUnpackRowMap()> --> <org.json.simple.parser.Yylex: int zzUnpackRowMap(java.lang.String,int,int[])>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfaWithStates_0(int,int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)>
<com.matburt.mobileorg.OrgData.OrgProvider: com.matburt.mobileorg.util.SelectionBuilder buildSelectionFromUri(android.net.Uri)> --> <com.matburt.mobileorg.OrgData.OrgContract$Search: java.lang.String getSearchTerm(android.net.Uri)>
<com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList generateApplyEditNodes(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getNodeId(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: void updateAllNodes(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getNodeId(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgEdit: void <init>(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgEdit$TYPE,java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getNodeId(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode findOriginalNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getNodeId(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgEdit: void <init>(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgEdit$TYPE,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getNodeId(android.content.ContentResolver)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char BeginToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_1(int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfaWithStates_3(int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char readChar()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runHelp(android.view.View)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void startActivity(android.content.Intent)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runShowWizard(android.view.View)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void startActivity(android.content.Intent)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runExpandableOutline(long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void startActivity(android.content.Intent)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runAgenda()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void startActivity(android.content.Intent)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runShowSettings(android.view.View)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void startActivity(android.content.Intent)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void init(com.matburt.mobileorg.OrgData.OrgFile)> --> <com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: void <init>(com.matburt.mobileorg.OrgData.OrgFileParser)>
<org.apache.james.mime4j.message.Entity: java.lang.String getFilename()> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.parser.Field obtainField(java.lang.String)>
<org.apache.james.mime4j.message.Entity: java.lang.String getDispositionType()> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.parser.Field obtainField(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable: void start()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable access$102(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar$RefreshProgressRunnable)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void access$100(com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void loginUbuntuOne()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$4: java.lang.Object initialValue()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$4: java.util.ArrayList initialValue()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: com.matburt.mobileorg.Gui.Capture.DateTableRow getDateTableRow(java.lang.String,com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void setDateTableRowListener(com.matburt.mobileorg.Gui.Capture.DateTableRow$DateTableRowListener)>
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[])> --> <org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setPromptId(int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setPrompt(java.lang.CharSequence)>
<org.apache.james.mime4j.storage.TempFileStorageProvider: org.apache.james.mime4j.storage.StorageOutputStream createStorageOutputStream()> --> <org.apache.james.mime4j.storage.TempFileStorageProvider$TempFileStorageOutputStream: void <init>(java.io.File)>
<com.jcraft.jsch.ChannelSubsystem: void start()> --> <com.jcraft.jsch.RequestX11: void <init>()>
<com.jcraft.jsch.ChannelSession: void sendRequests()> --> <com.jcraft.jsch.RequestX11: void <init>()>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encode(java.io.InputStream,java.io.OutputStream)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void completeEncoding()>
<org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void close()> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void completeEncoding()>
<com.dropbox.client2.DropboxAPI$ChunkedUploader: void upload(com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$ChunkedUploadResponse: long getOffset()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig$2: void <init>(com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig)>
<com.actionbarsherlock.ActionBarSherlock: void <clinit>()> --> <com.actionbarsherlock.ActionBarSherlock: void registerImplementation(java.lang.Class)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_2(int,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)>
<org.apache.james.mime4j.field.datetime.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)> --> <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>
<org.apache.http.entity.mime.FormBodyPart: void <init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.james.mime4j.message.Header: void <init>()>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.james.mime4j.message.Header: void <init>()>
<org.apache.james.mime4j.message.SimpleContentHandler: void startHeader()> --> <org.apache.james.mime4j.message.Header: void <init>()>
<org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Header obtainHeader()> --> <org.apache.james.mime4j.message.Header: void <init>()>
<org.apache.james.mime4j.message.MessageBuilder: void startHeader()> --> <org.apache.james.mime4j.message.Header: void <init>()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: void close()> --> <org.apache.james.mime4j.storage.StorageOutputStream: void close()>
<org.apache.james.mime4j.storage.StorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage()> --> <org.apache.james.mime4j.storage.StorageOutputStream: void close()>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorageOutputStream: void close()> --> <org.apache.james.mime4j.storage.StorageOutputStream: void close()>
<org.apache.james.mime4j.storage.TempFileStorageProvider$TempFileStorageOutputStream: void close()> --> <org.apache.james.mime4j.storage.StorageOutputStream: void close()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: android.content.Context getContext()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void recycleAllViews()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin: void put(int,android.view.View)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin: void put(int,android.view.View)>
<com.actionbarsherlock.internal.widget.IcsSpinner: int getBaseline()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin: void put(int,android.view.View)>
<com.matburt.mobileorg.util.FileUtils: java.io.BufferedWriter getWriter(boolean)> --> <com.matburt.mobileorg.util.FileUtils: java.lang.String getStorageMode()>
<com.matburt.mobileorg.util.FileUtils: void remove()> --> <com.matburt.mobileorg.util.FileUtils: java.lang.String getStorageMode()>
<com.matburt.mobileorg.util.FileUtils: java.io.File getFile()> --> <com.matburt.mobileorg.util.FileUtils: java.lang.String getStorageMode()>
<com.matburt.mobileorg.util.FileUtils: java.io.BufferedReader getReader()> --> <com.matburt.mobileorg.util.FileUtils: java.lang.String getStorageMode()>
<com.matburt.mobileorg.util.FileUtils: java.lang.String getBasePath()> --> <com.matburt.mobileorg.util.FileUtils: java.lang.String getStorageMode()>
<com.jcraft.jsch.ChannelSession: void sendRequests()> --> <com.jcraft.jsch.RequestEnv: void setEnv(byte[],byte[])>
<com.commonsware.cwac.merge.MergeAdapter$CascadeDataSetObserver: void onChanged()> --> <com.commonsware.cwac.merge.MergeAdapter: void notifyDataSetChanged()>
<com.commonsware.cwac.merge.MergeAdapter: void setActive(android.widget.ListAdapter,boolean)> --> <com.commonsware.cwac.merge.MergeAdapter: void notifyDataSetChanged()>
<com.commonsware.cwac.merge.MergeAdapter: void setActive(android.view.View,boolean)> --> <com.commonsware.cwac.merge.MergeAdapter: void notifyDataSetChanged()>
<com.jcraft.jsch.PortWatcher: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void setOrgPort(int)>
<com.matburt.mobileorg.Services.SyncService: void runSynchronizer()> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void <init>(android.content.Context)>
<com.matburt.mobileorg.OrgData.OrgProvider: boolean onCreate()> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void <init>(android.content.Context)>
<com.matburt.mobileorg.Gui.FileDecryptionActivity: void onActivityResult(int,int,android.content.Intent)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void <init>(android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void <init>(android.content.Context)>
<com.matburt.mobileorg.Settings.SettingsActivity: void init()> --> <com.matburt.mobileorg.Settings.SettingsActivity: java.lang.String getString(int)>
<oauth.signpost.AbstractOAuthConsumer: void <init>(java.lang.String,java.lang.String)> --> <oauth.signpost.signature.AuthorizationHeaderSigningStrategy: void <init>()>
<com.dropbox.client2.jsonextract.JsonMap: com.dropbox.client2.jsonextract.JsonThing getOrNull(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonThing: void <init>(java.lang.Object,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonList: com.dropbox.client2.jsonextract.JsonThing get(int)> --> <com.dropbox.client2.jsonextract.JsonThing: void <init>(java.lang.Object,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonList$WrapperIterator: com.dropbox.client2.jsonextract.JsonThing next()> --> <com.dropbox.client2.jsonextract.JsonThing: void <init>(java.lang.Object,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonMap: com.dropbox.client2.jsonextract.JsonThing get(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonThing: void <init>(java.lang.Object,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonMap$WrappedEntry: void <init>(java.lang.String,java.util.Map$Entry)> --> <com.dropbox.client2.jsonextract.JsonThing: void <init>(java.lang.Object,java.lang.String)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.apache.http.client.CredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)>
<org.apache.james.mime4j.parser.MimeTokenStream: void parseHeadless(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.parser.MimeTokenStream: void doParse(java.io.InputStream,java.lang.String)>
<org.apache.james.mime4j.parser.MimeTokenStream: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.MimeTokenStream: void doParse(java.io.InputStream,java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgDatabase: void prepareOrgdataInsert()> --> <com.matburt.mobileorg.OrgData.OrgDatabase: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<com.matburt.mobileorg.OrgData.OrgProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> --> <com.matburt.mobileorg.OrgData.OrgDatabase: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<com.matburt.mobileorg.OrgData.OrgDatabase: void beginTransaction()> --> <com.matburt.mobileorg.OrgData.OrgDatabase: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<com.matburt.mobileorg.OrgData.OrgProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<com.matburt.mobileorg.OrgData.OrgProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> --> <com.matburt.mobileorg.OrgData.OrgDatabase: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<com.matburt.mobileorg.OrgData.OrgDatabase: void endTransaction()> --> <com.matburt.mobileorg.OrgData.OrgDatabase: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<com.matburt.mobileorg.OrgData.OrgDatabase: void fastInsertNodePayload(java.lang.Long,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: android.database.sqlite.SQLiteDatabase getWritableDatabase()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onMenuItemSelected(int,com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.app.SherlockActivity: void onPostResume()> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: boolean onCreateOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void setSupportProgressBarVisibility(boolean)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void requestWindowFeature(long)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void setContentView(int)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void closeOptionsMenu()> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void setSupportSecondaryProgress(int)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void invalidateOptionsMenu()> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void onTitleChanged(java.lang.CharSequence,int)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void onStop()> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: boolean onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void setSupportProgressBarIndeterminateVisibility(boolean)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: boolean onMenuOpened(int,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void openOptionsMenu()> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void setSupportProgress(int)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void onPause()> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void onPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void onDestroy()> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void setContentView(android.view.View)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void setSupportProgressBarIndeterminate(boolean)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockActivity: void onPanelClosed(int,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)> --> <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.KeyPairRSA: void <init>(com.jcraft.jsch.JSch)>
<com.dropbox.client2.DropboxAPI: java.util.List search(java.lang.String,java.lang.String,int,boolean)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink share(java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry addFromCopyRef(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry createFolder(java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: void delete(java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry restore(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DeltaPage delta(java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink media(java.lang.String,boolean)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry move(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Account accountInfo()> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: java.util.List revisions(java.lang.String,int)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry metadata(java.lang.String,int,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry copy(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$CreatedCopyRef createCopyRef(java.lang.String)> --> <com.dropbox.client2.session.Session: java.lang.String getAPIServer()>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setBackgroundResource(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$2: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.app.SherlockActivity: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void displayNewUserDialogs()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runShowWizard(android.view.View)>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: void <init>()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: void <init>(int)>
<org.apache.james.mime4j.codec.ByteQueue: void clear()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: void <init>(int)>
<org.apache.james.mime4j.codec.ByteQueue: void <init>(int)> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: void <init>(int)>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Session: void initDeflater(java.lang.String)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Session: void initDeflater(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String toString()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String getEndTimeFormated()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void setupDates()> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void removeDateEntries()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeItemAtInt(int,boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeGroup(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeItemAtInt(int,boolean)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeItemAt(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeItemAtInt(int,boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void refresh()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: int getFirstVisiblePosition()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: int getFirstVisiblePosition()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void ensureCheckedItemVisible()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: int getFirstVisiblePosition()>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onActivityResult(int,int,android.content.Intent)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void setPubFile(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxDirectoryBrowser: java.lang.Object getDir(int)>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)>
<org.apache.http.impl.AbstractHttpClientConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.HttpConnectionMetricsImpl: void <init>(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)>
<org.apache.http.impl.AbstractHttpServerConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.HttpConnectionMetricsImpl: void <init>(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)>
<org.apache.james.mime4j.MimeIOException: void <init>(org.apache.james.mime4j.MimeException)> --> <org.apache.james.mime4j.MimeIOException: java.lang.Throwable initCause(java.lang.Throwable)>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.SubMenu setHeaderView(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderViewInt(android.view.View)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void scheduleAccessibilityEventSender()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: boolean postDelayed(java.lang.Runnable,long)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onActivityCreated(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: void onActivityCreated(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void onActivityCreated(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: void onActivityCreated(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onActivityCreated(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: void onActivityCreated(android.os.Bundle)>
<com.matburt.mobileorg.Gui.ViewFragment: void onActivityCreated(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: void onActivityCreated(android.os.Bundle)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onActivityCreated(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockFragment: void onActivityCreated(android.os.Bundle)>
<org.apache.http.protocol.BasicHttpProcessor: void clearInterceptors()> --> <org.apache.http.protocol.BasicHttpProcessor: void clearRequestInterceptors()>
<com.commonsware.cwac.merge.MergeAdapter$CascadeDataSetObserver: void onInvalidated()> --> <com.commonsware.cwac.merge.MergeAdapter: void notifyDataSetInvalidated()>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDropdownSelectedPosition(int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setSelection(int)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setSelection(int)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void onClick(android.content.DialogInterface,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setSelection(int)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setSelection(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void performCollapse()> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setSelection(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: int getCheckedItemPosition()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void collapseCurrent()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: int getCheckedItemPosition()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void ensureCheckedItemVisible()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: int getCheckedItemPosition()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: long getCheckedNodeId()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: int getCheckedItemPosition()>
<com.matburt.mobileorg.Synchronizers.DropboxSynchronizer$1: void run()> --> <com.matburt.mobileorg.Synchronizers.DropboxSynchronizer: android.content.Context access$000(com.matburt.mobileorg.Synchronizers.DropboxSynchronizer)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,int)> --> <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> --> <com.jcraft.jsch.ChannelSftp$RequestQueue: void add(int,long,int)>
<com.jcraft.jsch.ChannelAgentForwarding: void start()> --> <com.jcraft.jsch.ChannelAgentForwarding: void disconnect()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView$1: void <init>(com.actionbarsherlock.internal.widget.ActionBarContextView,com.actionbarsherlock.view.ActionMode)>
<org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void backup(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: void backup(int)>
<com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.widget.ActivityChooserView$1: void <init>(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void SwitchTo(int)> --> <org.apache.james.mime4j.field.address.parser.TokenMgrError: void <init>(java.lang.String,int)>
<org.apache.james.mime4j.field.address.parser.TokenMgrError: void <init>(boolean,int,int,int,java.lang.String,char,int)> --> <org.apache.james.mime4j.field.address.parser.TokenMgrError: void <init>(java.lang.String,int)>
<com.jcraft.jsch.ChannelX11: void <init>()> --> <com.jcraft.jsch.ChannelX11: void setLocalPacketSize(int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofKeyframe(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofObject(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator,java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void <init>(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$1)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void <init>(java.lang.String)>
<com.dropbox.client2.jsonextract.JsonMap$WrappedEntry: java.lang.Object getValue()> --> <com.dropbox.client2.jsonextract.JsonMap$WrappedEntry: com.dropbox.client2.jsonextract.JsonThing getValue()>
<com.jcraft.jsch.Session: void setConfig(java.util.Properties)> --> <com.jcraft.jsch.Session: void setConfig(java.util.Hashtable)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.HashMap getAndParseIndexFile()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: void setTodos(java.util.ArrayList,android.content.ContentResolver)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState$1: java.lang.Object[] newArray(int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState$1: com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState[] newArray(int)>
<org.apache.james.mime4j.field.ContentDispositionField$1: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.ContentDispositionField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<com.matburt.mobileorg.Services.CalendarSyncService: void access$400(com.matburt.mobileorg.Services.CalendarSyncService)> --> <com.matburt.mobileorg.Services.CalendarSyncService: void assimilateCalendar()>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.lang.String buildLoginUrl()>
<com.matburt.mobileorg.Gui.Agenda.BlockAgenda: com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder getAgendaBlockEntry(int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: void <init>(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder getAgendaEntry(int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: void <init>(java.lang.String)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder getQueryFromSettings()> --> <com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: void <init>(java.lang.String)>
<com.jcraft.jsch.ChannelExec: void init()> --> <com.jcraft.jsch.ChannelExec: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.ChannelExec: void start()> --> <com.jcraft.jsch.ChannelExec: com.jcraft.jsch.Session getSession()>
<com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])> --> <com.jcraft.jsch.KnownHosts: int check(java.lang.String,byte[])>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(java.io.InputStream)> --> <org.apache.james.mime4j.storage.StorageProvider: org.apache.james.mime4j.storage.Storage store(java.io.InputStream)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.BinaryBody binaryBody(java.io.InputStream)> --> <org.apache.james.mime4j.storage.StorageProvider: org.apache.james.mime4j.storage.Storage store(java.io.InputStream)>
<org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.storage.StorageProvider: org.apache.james.mime4j.storage.Storage store(java.io.InputStream)>
<org.apache.http.message.BasicHeader: org.apache.http.HeaderElement[] getElements()> --> <org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(java.lang.String,org.apache.http.message.HeaderValueParser)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>
<org.apache.http.util.CharArrayBuffer: int indexOf(int)> --> <org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean performExpand()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean isCollapsed()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void performCollapse()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean isCollapsed()>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.message.LineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.http.impl.io.HttpResponseParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> --> <org.apache.http.message.LineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int skip(int)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int skip(int)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: void skipBoundary()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int skip(int)>
<com.matburt.mobileorg.Services.CalendarSyncService: com.matburt.mobileorg.util.MultiMap getCalendarEntries(java.lang.String)> --> <com.matburt.mobileorg.Services.CalendarSyncService: void refreshPreferences()>
<com.matburt.mobileorg.Services.CalendarSyncService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.CalendarSyncService: void refreshPreferences()>
<com.matburt.mobileorg.Services.CalendarSyncService: void onCreate()> --> <com.matburt.mobileorg.Services.CalendarSyncService: void refreshPreferences()>
<org.apache.james.mime4j.parser.MimeEntity: void createMimeStream()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: void ensureCapacity(int)>
<com.actionbarsherlock.widget.ActivityChooserView$1: void onChanged()> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter access$000(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.widget.ActivityChooserView$1: void onInvalidated()> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter access$000(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter access$000(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter access$000(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter access$000(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setDataModel(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter access$000(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.widget.ActivityChooserView: android.view.View findViewById(int)>
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)> --> <org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> --> <org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()> --> <org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>
<org.apache.http.impl.AbstractHttpClientConnection: boolean isResponseAvailable(int)> --> <org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>
<org.apache.http.impl.AbstractHttpClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)> --> <org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>
<org.apache.http.impl.AbstractHttpClientConnection: void flush()> --> <org.apache.http.impl.AbstractHttpClientConnection: void assertOpen()>
<org.apache.james.mime4j.io.LimitedInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.PositionInputStream: int read(byte[],int,int)>
<com.jcraft.jsch.Buffer: void putString(byte[])> --> <com.jcraft.jsch.Buffer: void putString(byte[],int,int)>
<com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> --> <com.jcraft.jsch.Buffer: void putString(byte[],int,int)>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: java.lang.Object getItem(int)> --> <com.actionbarsherlock.widget.ActivityChooserModel: android.content.pm.ResolveInfo getDefaultActivity()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getCount()> --> <com.actionbarsherlock.widget.ActivityChooserModel: android.content.pm.ResolveInfo getDefaultActivity()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: android.content.pm.ResolveInfo getDefaultActivity()> --> <com.actionbarsherlock.widget.ActivityChooserModel: android.content.pm.ResolveInfo getDefaultActivity()>
<com.matburt.mobileorg.Gui.FileDecryptionActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.FileDecryptionActivity: boolean isAvailable()>
<com.actionbarsherlock.app.SherlockListActivity: void onPanelClosed(int,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPanelClosed(int,android.view.Menu)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onPanelClosed(int,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPanelClosed(int,android.view.Menu)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onPanelClosed(int,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPanelClosed(int,android.view.Menu)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onPanelClosed(int,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPanelClosed(int,android.view.Menu)>
<com.actionbarsherlock.app.SherlockActivity: void onPanelClosed(int,android.view.Menu)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchPanelClosed(int,android.view.Menu)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putUrl(java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.apache.http.HttpResponse executeRequest(org.apache.http.client.methods.HttpUriRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.InputStream getUrl(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.apache.http.HttpResponse executeRequest(org.apache.http.client.methods.HttpUriRequest)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: int getBeginColumn()>
<com.dropbox.client2.DropboxAPI$ChunkedUploader: void <init>(com.dropbox.client2.DropboxAPI,java.io.InputStream,long)> --> <com.dropbox.client2.DropboxAPI$ChunkedUploader: void <init>(com.dropbox.client2.DropboxAPI,java.io.InputStream,long,int)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploader getChunkedUploader(java.io.InputStream,long,int)> --> <com.dropbox.client2.DropboxAPI$ChunkedUploader: void <init>(com.dropbox.client2.DropboxAPI,java.io.InputStream,long,int)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: android.app.DatePickerDialog$OnDateSetListener access$200(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<com.jcraft.jsch.ChannelSession: void sendRequests()> --> <com.jcraft.jsch.RequestAgentForwarding: void <init>()>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.nio.charset.Charset determineCharset(java.lang.String)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void ReInit(org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void ReInit(org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void ReInit(org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void ReInit(org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream)>
<org.apache.james.mime4j.util.StringArrayMap: void addValue(java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.util.StringArrayMap: void addMapValue(java.util.Map,java.lang.String,java.lang.String)>
<com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxServerException: void <init>(org.apache.http.HttpResponse,java.lang.Object)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat$ActionModeCallbackWrapper: void onDestroyActionMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void removeAllViews()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void killMode()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void removeAllViews()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[])> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: org.apache.james.mime4j.field.language.parser.ParseException generateParseException()> --> <org.apache.james.mime4j.field.language.parser.ParseException: void <init>(org.apache.james.mime4j.field.language.parser.Token,int[][],java.lang.String[])>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.PayloadFragment: void restoreInstanceState(android.os.Bundle)>
<org.apache.james.mime4j.message.MessageWriter: void writeEntity(org.apache.james.mime4j.message.Entity,java.io.OutputStream)> --> <org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Body getBody()>
<com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int access$1200(com.actionbarsherlock.internal.widget.ActionBarView)>
<org.apache.james.mime4j.parser.AbstractEntity: void warn(org.apache.james.mime4j.parser.Event)> --> <org.apache.commons.logging.Log: boolean isWarnEnabled()>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void fillBuffer()> --> <org.apache.commons.logging.Log: boolean isWarnEnabled()>
<org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWord(java.lang.String,int,int)> --> <org.apache.commons.logging.Log: boolean isWarnEnabled()>
<org.apache.james.mime4j.message.BodyFactory: java.nio.charset.Charset toJavaCharset(java.lang.String,boolean)> --> <org.apache.commons.logging.Log: boolean isWarnEnabled()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void handleDropboxResume()> --> <com.dropbox.client2.android.AndroidAuthSession: java.lang.String finishAuthentication()>
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int)> --> <org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.message.BasicHttpResponse: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)> --> <org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.impl.DefaultHttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)> --> <org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)> --> <org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.message.BasicHttpResponse: void setStatusCode(int)> --> <org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.message.BasicHttpResponse: void setLocale(java.util.Locale)> --> <org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.message.BasicHttpResponse: void setReasonPhrase(java.lang.String)> --> <org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)> --> <org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time: int getMinute()>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.params.HttpProtocolParams: void setUserAgent(org.apache.http.params.HttpParams,java.lang.String)>
<org.apache.http.params.HttpProtocolParamBean: void setUserAgent(java.lang.String)> --> <org.apache.http.params.HttpProtocolParams: void setUserAgent(org.apache.http.params.HttpParams,java.lang.String)>
<com.jcraft.jsch.ChannelAgentForwarding: void <init>()> --> <com.jcraft.jsch.ChannelAgentForwarding: void setLocalPacketSize(int)>
<com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.Gui.Capture.EditActivityController getController(android.content.Intent,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.Gui.Capture.EditActivityController getController(java.lang.String,long,java.lang.String,android.content.Intent,android.content.ContentResolver,java.lang.String)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.InputStream)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int,int)>
<org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()> --> <org.apache.http.FormattedHeader: org.apache.http.util.CharArrayBuffer getBuffer()>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)> --> <org.apache.http.FormattedHeader: org.apache.http.util.CharArrayBuffer getBuffer()>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()> --> <org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorage: void <init>(byte[],int,org.apache.james.mime4j.storage.Storage)>
<com.dropbox.client2.session.TokenPair: boolean equals(java.lang.Object)> --> <com.dropbox.client2.session.TokenPair: boolean equals(com.dropbox.client2.session.TokenPair)>
<oauth.signpost.signature.SignatureBaseString: java.lang.String generate()> --> <oauth.signpost.exception.OAuthMessageSignerException: void <init>(java.lang.Exception)>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.exception.OAuthMessageSignerException: void <init>(java.lang.Exception)>
<com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])> --> <com.jcraft.jsch.KnownHosts: java.lang.String deleteSubString(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Services.TimeclockDialog: void access$000(com.matburt.mobileorg.Services.TimeclockDialog)> --> <com.matburt.mobileorg.Services.TimeclockDialog: void endTimeclock()>
<org.apache.james.mime4j.field.address.parser.ASTaddress_list: java.lang.Object jjtAccept(org.apache.james.mime4j.field.address.parser.AddressListParserVisitor,java.lang.Object)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserVisitor: java.lang.Object visit(org.apache.james.mime4j.field.address.parser.ASTaddress_list,java.lang.Object)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void completeEncoding()> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void flushOutput()>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void write(byte)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void flushOutput()>
<org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void flush()> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void flushOutput()>
<org.apache.http.impl.io.ChunkedInputStream: void nextChunk()> --> <org.apache.http.impl.io.ChunkedInputStream: void parseTrailerHeaders()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void connect()> --> <com.jcraft.jsch.Session: void setConfig(java.util.Properties)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.InputStream,java.lang.String,int,int,int)>
<com.jcraft.jsch.KeyPairDSA: byte[] getPrivateKey()> --> <com.jcraft.jsch.KeyPairDSA: int countLength(int)>
<com.jcraft.jsch.ChannelX11: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelX11: boolean equals(byte[],byte[])>
<com.jcraft.jsch.Session: int setPortForwardingL(int,java.lang.String,int)> --> <com.jcraft.jsch.Session: int setPortForwardingL(java.lang.String,int,java.lang.String,int)>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.KeyExchange: com.jcraft.jsch.HASH getHash()>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity$SynchServiceReceiver: void <init>(com.matburt.mobileorg.Gui.Agenda.AgendaActivity,com.matburt.mobileorg.Gui.Agenda.AgendaActivity$1)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaActivity$SynchServiceReceiver: void <init>(com.matburt.mobileorg.Gui.Agenda.AgendaActivity)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: void <init>(com.actionbarsherlock.internal.view.menu.MenuPopupHelper,com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper$ExpandedIndexObserver: void <init>(com.actionbarsherlock.internal.view.menu.MenuPopupHelper,com.actionbarsherlock.internal.view.menu.MenuPopupHelper$1)>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: int access$000(org.apache.james.mime4j.codec.UnboundedFifoByteBuffer,int)> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: int increment(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean dismissPopupMenus()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean hideOverflowMenu()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean hideOverflowMenu()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean hideOverflowMenu()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean hideOverflowMenu()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: boolean hideOverflowMenu()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean hideOverflowMenu()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: boolean hideOverflowMenu()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean hideOverflowMenu()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setDataModel(com.actionbarsherlock.widget.ActivityChooserModel)> --> <com.actionbarsherlock.widget.ActivityChooserView: android.database.DataSetObserver access$1200(com.actionbarsherlock.widget.ActivityChooserView)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void escape(byte)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void write(byte)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void softBreak()> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void write(byte)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void plain(byte)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void write(byte)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void lineBreak()> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void write(byte)>
<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)> --> <org.apache.http.util.ByteArrayBuffer: void expand(int)>
<org.apache.http.util.ByteArrayBuffer: void append(int)> --> <org.apache.http.util.ByteArrayBuffer: void expand(int)>
<org.apache.http.util.ByteArrayBuffer: void append(char[],int,int)> --> <org.apache.http.util.ByteArrayBuffer: void expand(int)>
<com.actionbarsherlock.internal.ActionBarSherlockNative: boolean dispatchCreateOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.internal.ActionBarSherlockNative: boolean callbackCreateOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.SignatureDSA: void setPubKey(byte[],byte[],byte[],byte[])>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context)>
<com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> --> <com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.actionbarsherlock.widget.ShareActionProvider: android.view.View onCreateActionView()> --> <com.actionbarsherlock.widget.ActivityChooserView: void setProvider(com.actionbarsherlock.view.ActionProvider)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setSubtitle(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: android.content.Context access$700(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setIcon(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: android.content.Context access$700(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setTitle(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: android.content.Context access$700(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setContentDescription(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: android.content.Context access$700(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setText(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: android.content.Context access$700(com.actionbarsherlock.internal.app.ActionBarImpl)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void UpdateLineColumn(char)>
<oauth.signpost.commonshttp.CommonsHttpOAuthConsumer: void <init>(java.lang.String,java.lang.String)> --> <oauth.signpost.AbstractOAuthConsumer: void <init>(java.lang.String,java.lang.String)>
<oauth.signpost.basic.DefaultOAuthConsumer: void <init>(java.lang.String,java.lang.String)> --> <oauth.signpost.AbstractOAuthConsumer: void <init>(java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.MailboxListField$1: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.MailboxListField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<com.jcraft.jsch.IdentityFile: boolean decrypt()> --> <com.jcraft.jsch.IdentityFile: boolean decrypt_rsa()>
<org.apache.http.message.AbstractHttpMessage: void addHeader(org.apache.http.Header)> --> <org.apache.http.message.HeaderGroup: void addHeader(org.apache.http.Header)>
<org.apache.http.message.AbstractHttpMessage: void addHeader(java.lang.String,java.lang.String)> --> <org.apache.http.message.HeaderGroup: void addHeader(org.apache.http.Header)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void cloneChildren(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: long fastInsertNode(com.matburt.mobileorg.OrgData.OrgNode)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void combineBlockAgendas()> --> <com.matburt.mobileorg.OrgData.OrgDatabase: long fastInsertNode(com.matburt.mobileorg.OrgData.OrgNode)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parseHeading(java.lang.String,int)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: long fastInsertNode(com.matburt.mobileorg.OrgData.OrgNode)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.view.MenuItem: android.view.View getActionView()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.view.MenuItem: android.view.View getActionView()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseLocation(java.lang.String)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: void setFoldingPreserved(boolean)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void addPage(int)> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: void addView(android.view.View)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void addPage(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: void addView(android.view.View)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getSelectedItemPosition()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void fireOnSelected()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getSelectedItemPosition()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void handleDataChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getSelectedItemPosition()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: java.lang.Object getSelectedItem()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getSelectedItemPosition()>
<com.dropbox.client2.jsonextract.JsonThing: java.lang.Object expect(java.lang.Class)> --> <com.dropbox.client2.jsonextract.JsonThing: java.lang.String typeNameForClass(java.lang.Class)>
<org.apache.james.mime4j.field.address.DomainList: java.lang.Object get(int)> --> <org.apache.james.mime4j.field.address.DomainList: java.lang.String get(int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<org.apache.http.message.BasicHeaderIterator: java.lang.Object next()> --> <org.apache.http.message.BasicHeaderIterator: org.apache.http.Header nextHeader()>
<org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpRequestHandler: void handle(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<org.apache.james.mime4j.field.ContentDispositionField: void <clinit>()> --> <org.apache.james.mime4j.field.ContentDispositionField$1: void <init>()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuLogin()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void disableAllNextActions(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxLogin()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void disableAllNextActions(int)>
<org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)> --> <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>
<com.actionbarsherlock.ActionBarSherlock: boolean callbackOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.ActionBarSherlock$OnOptionsItemSelectedListener: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.widget.ActivityChooserView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getMaxActivityCount()>
<com.matburt.mobileorg.Services.CalendarSyncService: void syncFile(java.lang.String)> --> <com.matburt.mobileorg.Services.CalendarSyncService: void removeCalendarEntries(com.matburt.mobileorg.util.MultiMap)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void saveCurrentPage()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int getCurrentPage()>
<com.jcraft.jsch.Session: void disconnect()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session)>
<com.jcraft.jsch.jce.HMACMD596: void update(int)> --> <com.jcraft.jsch.jce.HMACMD596: void update(byte[],int,int)>
<com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.KnownHosts: void remove(java.lang.String,java.lang.String,byte[])>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void setSubtitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setSubtitle(java.lang.CharSequence)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setSubtitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setSubtitle(java.lang.CharSequence)>
<com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState: void <init>(android.os.Parcel,com.actionbarsherlock.internal.widget.IcsProgressBar$1)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar$SavedState: void <init>(android.os.Parcel)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void init()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getOrgNodeChildren(long,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: java.util.ArrayList getChildren(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getOrgNodeChildren(long,android.content.ContentResolver)>
<com.dropbox.client2.DropboxAPI$DropboxLink: void <init>(java.util.Map,com.dropbox.client2.DropboxAPI$1)> --> <com.dropbox.client2.DropboxAPI$DropboxLink: void <init>(java.util.Map)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeGroup(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int findGroupIndex(int)>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String toString()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String getStartTimeFormated()>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)>
<org.apache.james.mime4j.field.address.Address: org.apache.james.mime4j.field.address.Address parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTaddress parseAddress()>
<oauth.signpost.commonshttp.CommonsHttpOAuthProvider: oauth.signpost.http.HttpRequest createRequest(java.lang.String)> --> <oauth.signpost.commonshttp.HttpRequestAdapter: void <init>(org.apache.http.client.methods.HttpUriRequest)>
<oauth.signpost.commonshttp.CommonsHttpOAuthConsumer: oauth.signpost.http.HttpRequest wrap(java.lang.Object)> --> <oauth.signpost.commonshttp.HttpRequestAdapter: void <init>(org.apache.http.client.methods.HttpUriRequest)>
<org.apache.http.message.BasicTokenIterator: java.lang.String nextToken()> --> <org.apache.http.message.BasicTokenIterator: int findNext(int)>
<org.apache.http.message.BasicTokenIterator: void <init>(org.apache.http.HeaderIterator)> --> <org.apache.http.message.BasicTokenIterator: int findNext(int)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: java.lang.String getTitle()>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: com.matburt.mobileorg.OrgData.OrgNode getEditedOrgNode()> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: java.lang.String getTitle()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestWindowChange: boolean waitForReply()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: android.app.Dialog createTodoDialog()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getTodos(android.content.ContentResolver)>
<com.matburt.mobileorg.Settings.SettingsActivity: void populateTodoKeywords()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getTodos(android.content.ContentResolver)>
<com.matburt.mobileorg.Services.CalendarSyncService: void refreshPreferences()> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getTodos(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void updateDisplay(java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getTodos(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void init(com.matburt.mobileorg.OrgData.OrgFile)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getTodos(android.content.ContentResolver)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: void browseTo(java.lang.String)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$UbuntuOneDirectoryBrowser: boolean isCurrentDirectoryRoot()>
<com.google.gdata.util.common.base.UnicodeEscaper: java.lang.String escape(java.lang.String)> --> <com.google.gdata.util.common.base.UnicodeEscaper: java.lang.String escapeSlow(java.lang.String,int)>
<org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.HttpProtocolParams: void setUseExpectContinue(org.apache.http.params.HttpParams,boolean)> --> <org.apache.http.params.HttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>
<org.apache.james.mime4j.field.address.Mailbox: void <init>(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.field.address.Mailbox: org.apache.james.mime4j.field.address.DomainList getRoute()>
<oauth.signpost.commonshttp.HttpRequestAdapter: java.lang.String getHeader(java.lang.String)> --> <org.apache.http.client.methods.HttpUriRequest: org.apache.http.Header getFirstHeader(java.lang.String)>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <com.dropbox.client2.exception.DropboxIOException: void <init>(java.lang.String)>
<com.jcraft.jsch.jce.AES256CBC: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.jcraft.jsch.jce.AES192CBC: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.jcraft.jsch.jce.AES192CTR: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.jcraft.jsch.jce.BlowfishCBC: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.jcraft.jsch.jce.AES256CTR: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorage: java.io.InputStream getInputStream()> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorageOutputStream: void <init>(org.apache.james.mime4j.storage.StorageOutputStream,java.lang.String,javax.crypto.spec.SecretKeySpec)> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.jcraft.jsch.jce.AES128CBC: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.jcraft.jsch.jce.AES128CTR: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>
<org.apache.http.entity.mime.FormBodyPart: void generateContentDisp(org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.http.entity.mime.FormBodyPart: java.lang.String getName()>
<org.apache.http.params.BasicHttpParams: void setParameters(java.lang.String[],java.lang.Object)> --> <org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>
<org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,org.apache.james.mime4j.util.ByteSequence,int,int)> --> <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,byte[],int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$5: java.lang.Object initialValue()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$5: java.util.ArrayList initialValue()>
<org.apache.http.message.BasicLineParser: org.apache.http.Header parseHeader(java.lang.String,org.apache.http.message.LineParser)> --> <org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)> --> <org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int)> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void <init>(com.jcraft.jsch.KnownHosts,java.lang.String,int,byte[])> --> <com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])>
<com.jcraft.jsch.KnownHosts: void addInvalidLine(java.lang.String)> --> <com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])>
<com.jcraft.jsch.HostKey: void <init>(java.lang.String,byte[])> --> <com.jcraft.jsch.HostKey: void <init>(java.lang.String,int,byte[])>
<com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)>
<com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void saveConfig()> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: void updateWidget(int,android.appwidget.AppWidgetManager,android.content.Context)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetProvider: void updateWidget(int,android.appwidget.AppWidgetManager,android.content.Context)>
<com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void execute(java.lang.Runnable)> --> <com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void onPostExecute(java.lang.Runnable)>
<com.jcraft.jsch.SftpException: java.lang.String toString()> --> <com.jcraft.jsch.SftpException: java.lang.String getMessage()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Channel: void connect()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.jcraft.jsch.Channel: void connect()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean removeCallbacks(java.lang.Runnable)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToTab(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean removeCallbacks(java.lang.Runnable)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void performCollapse()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean removeCallbacks(java.lang.Runnable)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void <init>()> --> <com.matburt.mobileorg.Gui.ViewFragment: void <init>()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void write(byte[],int,int)>
<com.jcraft.jsch.Channel: void write(byte[])> --> <com.jcraft.jsch.Channel: void write(byte[],int,int)>
<org.apache.http.HttpHost: int hashCode()> --> <org.apache.http.util.LangUtils: int hashCode(int,int)>
<org.apache.http.util.LangUtils: int hashCode(int,java.lang.Object)> --> <org.apache.http.util.LangUtils: int hashCode(int,int)>
<org.apache.http.util.LangUtils: int hashCode(int,boolean)> --> <org.apache.http.util.LangUtils: int hashCode(int,int)>
<org.json.simple.parser.JSONParser: void parse(java.io.Reader,org.json.simple.parser.ContentHandler,boolean)> --> <org.json.simple.parser.ContentHandler: boolean startObjectEntry(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void showErrorNotification(java.lang.Exception)> --> <com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void errorNotification(java.lang.String)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList runSynchronizer(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.Gui.SynchronizerNotificationCompat: void errorNotification(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStopStringLiteralDfa_1(int,long)>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void switchToEdit()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String get()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String get()>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getPayload()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String get()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: java.lang.String getPayload()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String get()>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void showBlockAgenda(int)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void addAgenda(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.ActionProvider getActionProvider()>
<org.json.simple.JSONArray: java.lang.String toString()> --> <org.json.simple.JSONArray: java.lang.String toJSONString()>
<com.dropbox.client2.exception.DropboxServerException: void <init>(org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxServerException: java.lang.Throwable fillInStackTrace()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void setOnTouchListener(android.view.View$OnTouchListener)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setAdapter(android.widget.SpinnerAdapter)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void checkSelectionChanged()>
<com.jcraft.jsch.ChannelSftp: void <init>()> --> <com.jcraft.jsch.ChannelSftp: void setLocalPacketSize(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void parseAll()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void parse()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void parseLine()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void parse()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseMimeVersion(java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void parse()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int getWidth()>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildMailbox(org.apache.james.mime4j.field.address.parser.ASTmailbox)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAddrSpec(org.apache.james.mime4j.field.address.parser.ASTaddr_spec)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Address buildAddress(org.apache.james.mime4j.field.address.parser.ASTaddress)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAddrSpec(org.apache.james.mime4j.field.address.parser.ASTaddr_spec)>
<com.actionbarsherlock.widget.ActivityChooserView$2: void onGlobalLayout()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void dismiss()>
<com.actionbarsherlock.widget.ActivityChooserView: boolean dismissPopup()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void dismiss()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void dismiss()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void dismiss()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupDataSetObserver: void onInvalidated()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void dismiss()>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: android.app.Dialog createTodoDialog()> --> <com.matburt.mobileorg.util.PreferenceUtils: java.util.ArrayList getSelectedTodos()>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentTypeField contentType(java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentTypeField contentType(java.lang.String)>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.ContentTypeField contentType(java.lang.String)>
<com.jcraft.jsch.IdentityFile: boolean setPassphrase(byte[])> --> <com.jcraft.jsch.IdentityFile: boolean decrypt()>
<org.apache.http.impl.AbstractHttpClientConnection: void flush()> --> <org.apache.http.impl.AbstractHttpClientConnection: void doFlush()>
<com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Settings.Synchronizers.SDCardSettingsActivity: android.preference.Preference findPreference(java.lang.CharSequence)>
<org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.DefaultHttpClientConnection: void assertNotOpen()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean tryShow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: android.widget.ListView getListView()>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: android.widget.ListView getListView()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <org.apache.http.entity.InputStreamEntity: void setChunked(boolean)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploadRequest chunkedUploadRequest(java.io.InputStream,long,com.dropbox.client2.ProgressListener,long,java.lang.String)> --> <org.apache.http.entity.InputStreamEntity: void setChunked(boolean)>
<com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: void addPreferencesFromResource(int)>
<com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.Synchronizers.ScpSettingsActivity: void addPreferencesFromResource(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date date()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int day()>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <com.dropbox.client2.RESTUtility: boolean isRequestRepeatable(org.apache.http.HttpRequest)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: int jjStartNfaWithStates_0(int,int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe clone()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void ensureTabsExist()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.widget.ShareActionProvider: void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void getWindowVisibleDisplayFrame(android.graphics.Rect)>
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)> --> <org.apache.james.mime4j.codec.EncoderUtil: org.apache.james.mime4j.codec.EncoderUtil$Encoding determineEncoding(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)>
<org.apache.james.mime4j.storage.MultiReferenceStorage: void addReference()> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: void incrementCounter()>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void initLocationView()> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: void setupLocation()>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.Session: boolean isConnected()>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Session: boolean isConnected()>
<com.jcraft.jsch.Channel: boolean isConnected()> --> <com.jcraft.jsch.Session: boolean isConnected()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)> --> <com.actionbarsherlock.view.Menu: com.actionbarsherlock.view.MenuItem add(java.lang.CharSequence)>
<com.jcraft.jsch.ChannelSftp: void disconnect()> --> <com.jcraft.jsch.ChannelSession: void disconnect()>
<com.actionbarsherlock.internal.widget.CapitalizingTextView: void setTextCompat(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.widget.CapitalizingTextView: void setText(java.lang.CharSequence)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.internal.widget.CapitalizingTextView: void setText(java.lang.CharSequence)>
<com.jcraft.jsch.KeyPairDSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenDSA: byte[] getX()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void <init>(org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void SwitchTo(int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void ReInit(org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void SwitchTo(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void removeGroup(int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe clone()>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit createParentNewheading(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit createParentNewheading(android.content.ContentResolver,java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgDatabase: long fastInsertNode(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgDatabase: void prepareOrgdataInsert()>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void onCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.ActionBar: void setTitle(int)>
<com.jcraft.jsch.KeyPairRSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenRSA: byte[] getD()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.internal.widget.CapitalizingTextView: void setEllipsize(android.text.TextUtils$TruncateAt)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date date()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Date: void <init>(java.lang.String,int,int)>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.HeaderIterator headerIterator(java.lang.String)> --> <org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void setVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void clearAnimation()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setCustomView(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setCustomView(android.view.View)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.address.parser.Token: org.apache.james.mime4j.field.address.parser.Token newToken(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void address()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void group_body()>();     case 5: goto $r3_1 = $r0.<org.apache.james.mime4j.field.address.parser.AddressListParser: int[] jj_la1>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator ofObject(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator,java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void setEvaluator(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator)>
<org.apache.http.protocol.ResponseServer: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.HttpProtocolParams: java.lang.String getContentCharset(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.HttpProtocolParams: java.lang.String getUserAgent(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
<org.apache.http.params.DefaultedHttpParams: java.lang.Object getParameter(java.lang.String)> --> <org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setTitleImpl(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: com.actionbarsherlock.view.MenuItem setTitle(java.lang.CharSequence)>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <org.xmlpull.v1.XmlPullParser: int getEventType()>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: void <init>(java.io.InputStream,int,int)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: void <init>(java.io.InputStream,int)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: void <init>(java.io.InputStream,int,int)>
<org.apache.james.mime4j.parser.MimeTokenStream: void doParse(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: void <init>(java.io.InputStream,int,int)>
<org.apache.james.mime4j.parser.MimeEntity: void createMimeStream()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: void <init>(java.io.InputStream,int,int)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMimeEntity()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: void <init>(java.io.InputStream,int,int)>
<org.apache.james.mime4j.field.MailboxField: void <clinit>()> --> <org.apache.james.mime4j.field.MailboxField$1: void <init>()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void setAdapter(android.widget.SpinnerAdapter)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver: void <init>(com.actionbarsherlock.internal.widget.IcsAdapterView)>
<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> --> <org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>
<org.apache.http.message.BufferedHeader: java.lang.String getValue()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>
<org.apache.http.impl.io.ChunkedInputStream: int getChunkSize()> --> <org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Session: void send_kexinit()>
<com.jcraft.jsch.Session: void rekey()> --> <com.jcraft.jsch.Session: void send_kexinit()>
<com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Session: void send_kexinit()>
<org.apache.james.mime4j.message.Message: void setSender(org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.message.Message: void setMailbox(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runShowSettings(android.view.View)>
<com.matburt.mobileorg.OrgData.OrgEdit$TYPE: void <clinit>()> --> <com.matburt.mobileorg.OrgData.OrgEdit$TYPE: void <init>(java.lang.String,int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxList()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void setDoneButton(android.widget.Button)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void setDoneButton(android.widget.Button)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: android.view.View createSDcardFolderSelector()> --> <com.matburt.mobileorg.Gui.Wizard.FolderAdapter: void setDoneButton(android.widget.Button)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void restorePresenterStates(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void dispatchRestoreInstanceState(android.os.Bundle)>
<com.actionbarsherlock.internal.app.ActionBarImpl$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout access$000(com.actionbarsherlock.internal.app.ActionBarImpl)>
<com.jcraft.jsch.ChannelSession: void sendRequests()> --> <com.jcraft.jsch.RequestEnv: void <init>()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow,com.actionbarsherlock.internal.widget.IcsListPopupWindow$1)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider: void <init>(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void refreshDates()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String getEndTime()>
<com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String getEndTimeFormated()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate: java.lang.String getEndTime()>
<org.apache.james.mime4j.codec.DecoderUtil: java.lang.String decodeEncodedWords(java.lang.String)> --> <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofFloat(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofFloat(float)>
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: char readChar()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void FillBuff()>
<com.jcraft.jsch.SftpATTRS: java.lang.String toString()> --> <com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parseHeading(java.lang.String,int)> --> <com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: void add(int,long,java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void init(com.matburt.mobileorg.OrgData.OrgFile)> --> <com.matburt.mobileorg.OrgData.OrgFileParser$ParseStack: void add(int,long,java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: android.view.View findViewById(int)>
<com.jcraft.jsch.KeyPair: boolean decrypt(byte[])> --> <com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])>
<org.apache.james.mime4j.message.MessageWriter: void writeMultipart(org.apache.james.mime4j.message.Multipart,java.io.OutputStream)> --> <org.apache.james.mime4j.message.Multipart: org.apache.james.mime4j.util.ByteSequence getEpilogueRaw()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setIcon(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setLogo(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void setIcon(android.graphics.drawable.Drawable)>
<com.jcraft.jsch.jce.DH: void setF(byte[])> --> <com.jcraft.jsch.jce.DH: void setF(java.math.BigInteger)>
<com.jcraft.jsch.Session: void setX11Cookie(java.lang.String)> --> <com.jcraft.jsch.ChannelX11: void setCookie(java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setSubtitle(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setSubtitle(java.lang.CharSequence)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parse()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.Token jj_consume_token(int)>(3);     default: goto $r3 = $r0.<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: int[] jj_la1>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onRestoreInstanceState(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockActivity: void onRestoreInstanceState(android.os.Bundle)>
<org.apache.http.protocol.BasicHttpProcessor: void setInterceptors(java.util.List)> --> <org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor)>
<com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Settings.DirectoryBrowser$LocalDirectoryBrowser: void setLocale()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getLeft()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getLeft()>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Identity: byte[] getPublicKeyBlob()>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Identity: byte[] getPublicKeyBlob()>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.DH: byte[] getK()>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.DH: byte[] getK()>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.DH: byte[] getK()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void ReInit(org.apache.james.mime4j.field.language.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void ReInit(org.apache.james.mime4j.field.language.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void ReInit(org.apache.james.mime4j.field.language.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: void ReInit(org.apache.james.mime4j.field.language.parser.SimpleCharStream)>
<org.apache.http.message.BasicHttpRequest: org.apache.http.RequestLine getRequestLine()> --> <org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)>
<com.jcraft.jsch.ChannelSession: void setEnv(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSession: void setEnv(byte[],byte[])>
<com.jcraft.jsch.Request: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Request: void setReply(boolean)>
<com.jcraft.jsch.JSch: void removeAllIdentity()> --> <com.jcraft.jsch.JSch: void removeIdentity(java.lang.String)>
<com.jcraft.jsch.ChannelSubsystem: void start()> --> <com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel,java.lang.String,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_10()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3R_12()>
<com.matburt.mobileorg.Plugin.SyncEditActivity: void finish()> --> <com.matburt.mobileorg.Plugin.SyncEditActivity: void setResult(int)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void requestWindowFeature(long)> --> <com.actionbarsherlock.ActionBarSherlock: boolean requestFeature(int)>
<com.actionbarsherlock.app.SherlockListActivity: void requestWindowFeature(long)> --> <com.actionbarsherlock.ActionBarSherlock: boolean requestFeature(int)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void requestWindowFeature(long)> --> <com.actionbarsherlock.ActionBarSherlock: boolean requestFeature(int)>
<com.actionbarsherlock.app.SherlockActivity: void requestWindowFeature(long)> --> <com.actionbarsherlock.ActionBarSherlock: boolean requestFeature(int)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void requestWindowFeature(long)> --> <com.actionbarsherlock.ActionBarSherlock: boolean requestFeature(int)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void getAndParseFile(com.matburt.mobileorg.OrgData.OrgFile,com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.OrgData.OrgFile: long removeFile(android.content.ContentResolver)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void pushCaptures()> --> <com.matburt.mobileorg.OrgData.OrgFile: long removeFile(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void deleteFileNode()> --> <com.matburt.mobileorg.OrgData.OrgFile: long removeFile(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void init(com.matburt.mobileorg.OrgData.OrgFile)> --> <com.matburt.mobileorg.OrgData.OrgFile: long removeFile(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: int updateNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: android.content.ContentValues getContentValues()>
<com.matburt.mobileorg.OrgData.OrgNode: long addNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: android.content.ContentValues getContentValues()>
<org.json.simple.JSONValue: void writeJSONString(java.lang.Object,java.io.Writer)> --> <org.json.simple.JSONStreamAware: void writeJSONString(java.io.Writer)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()> --> <org.apache.james.mime4j.field.address.parser.ASTdomain: void <init>(int)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void updateDisplay(java.lang.String,java.lang.String,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getPriorities(android.content.ContentResolver)>
<org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void parseContentType(java.lang.String)>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.james.mime4j.message.Header: java.util.List getFields()>
<com.actionbarsherlock.internal.widget.ActionBarView$HomeView: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: java.lang.String parse()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: java.lang.String doParse()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: int getBeginLine()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void setSelection(int)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: android.content.Context getContext()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runHelp(android.view.View)>
<org.apache.http.entity.mime.MultipartEntity: boolean isRepeatable()> --> <org.apache.http.entity.mime.HttpMultipart: java.util.List getBodyParts()>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.http.entity.mime.HttpMultipart: java.util.List getBodyParts()>
<org.apache.http.entity.mime.HttpMultipart: long getTotalLength()> --> <org.apache.http.entity.mime.HttpMultipart: java.util.List getBodyParts()>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseContentDisposition(java.lang.String)> --> <org.apache.james.mime4j.MimeException: java.lang.Throwable fillInStackTrace()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setFloatValues(float[])>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.parser.Field getField()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_4(int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void jjCheckNAddStates(int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void jjCheckNAddTwoStates(int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void jjCheckNAddStates(int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.storage.MultiReferenceStorage: void delete()> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: boolean decrementCounter()>
<com.actionbarsherlock.app.SherlockFragment: void onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.app.SherlockFragment: void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockFragment: void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockFragment: void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void handleChangedCertificate()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitle()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleForItemView(com.actionbarsherlock.internal.view.menu.MenuView$ItemView)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitle()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setSubMenu(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitle()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitle()>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void onFinishInflate()> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: android.view.View findViewById(int)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean expandActionView()> --> <com.actionbarsherlock.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionExpand(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.view.menu.MenuItemWrapper$1: boolean onMenuItemActionExpand(android.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionExpand(com.actionbarsherlock.view.MenuItem)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void dispatchMenuVisibilityChanged(boolean)> --> <com.actionbarsherlock.app.ActionBar$OnMenuVisibilityListener: void onMenuVisibilityChanged(boolean)>
<com.actionbarsherlock.internal.app.ActionBarWrapper: void onMenuVisibilityChanged(boolean)> --> <com.actionbarsherlock.app.ActionBar$OnMenuVisibilityListener: void onMenuVisibilityChanged(boolean)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: android.view.View createSDcardFolderSelector()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SDCardWizard: void setupDoneButton(android.view.View)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: void <init>(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void <init>(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$1)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void <init>(java.lang.String,float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void <init>(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$1)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: void <init>(java.lang.String,int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void <init>(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$1)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void <init>(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void <init>(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$1)>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestAgentForwarding: boolean waitForReply()>
<oauth.signpost.commonshttp.CommonsHttpOAuthProvider: void closeConnection(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse)> --> <oauth.signpost.http.HttpResponse: java.lang.Object unwrap()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: int findInsertIndex(java.util.ArrayList,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getOrdering()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void onMeasure(int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void <init>(org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void <init>(org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void <init>(org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void <init>(org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream)>
<org.apache.james.mime4j.message.MessageBuilder: void field(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParsedField parse(org.apache.james.mime4j.util.ByteSequence)>
<org.apache.james.mime4j.message.SimpleContentHandler: void field(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParsedField parse(org.apache.james.mime4j.util.ByteSequence)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.ActionBarContainer: void <init>(android.content.Context,android.util.AttributeSet)>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: boolean onContextItemSelected(android.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void refresh()> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void showBlockAgendaFragment(int)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: android.support.v4.app.FragmentActivity getActivity()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void dispatchRestoreInstanceState(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter: int getId()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void dispatchSaveInstanceState(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuPresenter: int getId()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig$1: void <init>(com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig)>
<com.jcraft.jsch.jcraft.HMACMD5: void <init>()> --> <com.jcraft.jsch.jcraft.HMAC: void <init>()>
<com.jcraft.jsch.jcraft.HMACSHA1: void <init>()> --> <com.jcraft.jsch.jcraft.HMAC: void <init>()>
<com.dropbox.client2.DropboxAPI: java.util.List search(java.lang.String,java.lang.String,int,boolean)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink share(java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry addFromCopyRef(java.lang.String,java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry createFolder(java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: void delete(java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry restore(java.lang.String,java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DeltaPage delta(java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxLink media(java.lang.String,boolean)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry move(java.lang.String,java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Account accountInfo()> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: java.util.List revisions(java.lang.String,int)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry metadata(java.lang.String,int,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry copy(java.lang.String,java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$CreatedCopyRef createCopyRef(java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)>
<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(java.lang.String)> --> <org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: void setHeader(java.lang.String,java.lang.String)> --> <org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)> --> <org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.entity.AbstractHttpEntity: void setContentType(java.lang.String)> --> <org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.message.HeaderGroup: org.apache.http.Header getCondensedHeader(java.lang.String)> --> <org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.message.AbstractHttpMessage: void addHeader(java.lang.String,java.lang.String)> --> <org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>
<org.apache.http.entity.mime.content.FileBody: void <init>(java.io.File,java.lang.String)> --> <org.apache.http.entity.mime.content.AbstractContentBody: void <init>(java.lang.String)>
<org.apache.http.entity.mime.content.StringBody: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset)> --> <org.apache.http.entity.mime.content.AbstractContentBody: void <init>(java.lang.String)>
<org.apache.http.entity.mime.content.InputStreamBody: void <init>(java.io.InputStream,java.lang.String,java.lang.String)> --> <org.apache.http.entity.mime.content.AbstractContentBody: void <init>(java.lang.String)>
<org.apache.http.impl.DefaultHttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine)> --> <org.apache.http.RequestLine: java.lang.String getMethod()>
<org.apache.http.protocol.RequestTargetHost: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.RequestLine: java.lang.String getMethod()>
<org.apache.http.message.BasicHttpRequest: void <init>(org.apache.http.RequestLine)> --> <org.apache.http.RequestLine: java.lang.String getMethod()>
<org.apache.http.protocol.RequestConnControl: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.RequestLine: java.lang.String getMethod()>
<org.apache.http.message.BasicLineFormatter: void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)> --> <org.apache.http.RequestLine: java.lang.String getMethod()>
<oauth.signpost.commonshttp.HttpRequestAdapter: java.lang.String getMethod()> --> <org.apache.http.RequestLine: java.lang.String getMethod()>
<org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)> --> <org.apache.http.RequestLine: java.lang.String getMethod()>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestAgentForwarding: void write(com.jcraft.jsch.Packet)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildNameAddr(org.apache.james.mime4j.field.address.parser.ASTname_addr)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAngleAddr(org.apache.james.mime4j.field.address.parser.ASTangle_addr)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildMailbox(org.apache.james.mime4j.field.address.parser.ASTmailbox)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAngleAddr(org.apache.james.mime4j.field.address.parser.ASTangle_addr)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Address buildAddress(org.apache.james.mime4j.field.address.parser.ASTaddress)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAngleAddr(org.apache.james.mime4j.field.address.parser.ASTangle_addr)>
<com.jcraft.jsch.IdentityFile: byte[] getSignature(byte[])> --> <com.jcraft.jsch.IdentityFile: byte[] getSignature_dss(byte[])>
<com.dropbox.client2.RESTUtility$RequestMethod: void <clinit>()> --> <com.dropbox.client2.RESTUtility$RequestMethod: void <init>(java.lang.String,int)>
<com.actionbarsherlock.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: boolean onChooseActivity(com.actionbarsherlock.widget.ActivityChooserModel,android.content.Intent)> --> <com.actionbarsherlock.widget.ShareActionProvider$OnShareTargetSelectedListener: boolean onShareTargetSelected(com.actionbarsherlock.widget.ShareActionProvider,android.content.Intent)>
<org.apache.http.entity.FileEntity: void <init>(java.io.File,java.lang.String)> --> <org.apache.http.entity.FileEntity: void setContentType(java.lang.String)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void <init>(org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void <init>(org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void <init>(org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void <init>(org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream)>
<com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> --> <org.ietf.jgss.GSSContext: void requestCredDeleg(boolean)>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int indexOf(byte,int,int)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int indexOf(byte)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int indexOf(byte,int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)>
<com.actionbarsherlock.widget.ActivityChooserView: com.actionbarsherlock.internal.widget.IcsListPopupWindow getListPopupWindow()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context)>
<org.json.simple.parser.JSONParser: java.util.List createArrayContainer(org.json.simple.parser.ContainerFactory)> --> <org.json.simple.JSONArray: void <init>()>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()> --> <org.apache.james.mime4j.parser.MimeEntity: void setRecursionMode(int)>
<org.apache.james.mime4j.parser.MimeTokenStream: void doParse(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.parser.MimeEntity: void setRecursionMode(int)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMimeEntity()> --> <org.apache.james.mime4j.parser.MimeEntity: void setRecursionMode(int)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getLocationSelection()> --> <com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedTopNodeId()>();     case 2: goto $r1_3 = $r0.<com.matburt.mobileorg.Gui.Capture.LocationFragment: java.util.ArrayList locations>;     default: goto $r1_1 = $r0.<com.matburt.mobileorg.Gui.Capture.LocationFragment: java.util.ArrayList locations>
<com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread: void start()> --> <com.dropbox.client2.session.AbstractSession$DBClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)>
<org.apache.http.message.BasicLineFormatter: java.lang.String formatStatusLine(org.apache.http.StatusLine,org.apache.http.message.LineFormatter)> --> <org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)>
<org.apache.http.impl.io.HttpResponseWriter: void writeHeadLine(org.apache.http.HttpMessage)> --> <org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: java.lang.String day_of_week()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime parseAll()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int zone()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int second()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int minute()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime date_time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int month()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int hour()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int obs_zone()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: java.lang.String year()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.DateTime parseLine()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: int day()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.DateTimeParser$Time time()> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParser: org.apache.james.mime4j.field.datetime.parser.Token jj_consume_token(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void <init>(com.actionbarsherlock.internal.app.ActionBarImpl,com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setDefaultShowAsAction(int)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void <init>(android.content.Context,com.actionbarsherlock.internal.widget.ActionBarContextView,com.actionbarsherlock.view.ActionMode$Callback,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setDefaultShowAsAction(int)>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: boolean isChunked()>
<org.apache.http.protocol.ResponseConnControl: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: boolean isChunked()>
<org.apache.http.protocol.RequestContent: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: boolean isChunked()>
<org.apache.http.protocol.ResponseContent: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpEntity: boolean isChunked()>
<org.apache.http.entity.BufferedHttpEntity: boolean isChunked()> --> <org.apache.http.HttpEntity: boolean isChunked()>
<org.apache.http.entity.HttpEntityWrapper: boolean isChunked()> --> <org.apache.http.HttpEntity: boolean isChunked()>
<com.actionbarsherlock.app.SherlockActivity: boolean onPreparePanel(int,android.view.View,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockActivity: boolean onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void <init>(java.lang.String,float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setFloatValues(float[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setIntValues(int[])>
<com.actionbarsherlock.internal.app.ActionBarImpl: void removeTabAt(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void removeTabAt(int)>
<com.matburt.mobileorg.Gui.Capture.LocationEntry$2: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Gui.Capture.LocationEntry: java.util.ArrayList access$300(com.matburt.mobileorg.Gui.Capture.LocationEntry)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void init(android.view.View)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void setHomeButtonEnabled(boolean)>
<com.matburt.mobileorg.Settings.SynchronizerPreferences: void setPreferenceSummary()> --> <com.matburt.mobileorg.Settings.SynchronizerPreferences: java.lang.String getSyncPreferenceString(android.content.SharedPreferences)>
<com.matburt.mobileorg.Settings.SynchronizerPreferences: android.view.View onCreateView(android.view.ViewGroup)> --> <com.matburt.mobileorg.Settings.SynchronizerPreferences: java.lang.String getSyncPreferenceString(android.content.SharedPreferences)>
<org.apache.james.mime4j.codec.EncoderUtil$Usage: void <clinit>()> --> <org.apache.james.mime4j.codec.EncoderUtil$Usage: void <init>(java.lang.String,int)>
<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams copy()> --> <org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>
<org.apache.http.params.BasicHttpParams: java.lang.Object clone()> --> <org.apache.http.params.BasicHttpParams: void copyParams(org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: java.lang.ThreadLocal access$200()>
<com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment: void <init>(com.matburt.mobileorg.Services.TimeclockDialog)> --> <com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment$1: void <init>(com.matburt.mobileorg.Services.TimeclockDialog$EditTimePickerFragment)>
<org.apache.james.mime4j.parser.MimeTokenStream: org.apache.james.mime4j.parser.MimeTokenStream createStrictValidationStream()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: void setStrictParsing(boolean)>
<org.apache.http.entity.mime.HttpMultipart$1: void <clinit>()> --> <org.apache.http.entity.mime.HttpMultipartMode: int ordinal()>
<org.apache.http.entity.mime.HttpMultipart: java.nio.charset.Charset getCharset()> --> <org.apache.http.entity.mime.HttpMultipartMode: int ordinal()>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.http.entity.mime.HttpMultipartMode: int ordinal()>
<org.apache.james.mime4j.field.AddressListField: org.apache.james.mime4j.field.ParseException getParseException()> --> <org.apache.james.mime4j.field.AddressListField: org.apache.james.mime4j.field.address.parser.ParseException getParseException()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onSaveInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: long[] getState()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void measure(int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void onFinishInflate()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: android.view.View findViewById(int)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Session$GlobalRequestReply: java.lang.Thread getThread()>
<com.jcraft.jsch.UserAuthNone: void <init>()> --> <com.jcraft.jsch.UserAuth: void <init>()>
<com.jcraft.jsch.UserAuthPassword: void <init>()> --> <com.jcraft.jsch.UserAuth: void <init>()>
<com.jcraft.jsch.UserAuthKeyboardInteractive: void <init>()> --> <com.jcraft.jsch.UserAuth: void <init>()>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: void <init>()> --> <com.jcraft.jsch.UserAuth: void <init>()>
<com.jcraft.jsch.UserAuthPublicKey: void <init>()> --> <com.jcraft.jsch.UserAuth: void <init>()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: int getEndLine()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: int getEndLine()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void showToastRemote(java.lang.String)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$UIHandler: boolean sendMessage(android.os.Message)>
<com.jcraft.jsch.Session: void disconnect()> --> <com.jcraft.jsch.Channel: void disconnect(com.jcraft.jsch.Session)>
<com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> --> <com.jcraft.jsch.UserInfo: boolean promptYesNo(java.lang.String)>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.UserInfo: boolean promptYesNo(java.lang.String)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)> --> <org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)> --> <org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)>
<org.apache.james.mime4j.codec.UnboundedFifoByteBuffer$1: void remove()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: byte remove()>
<org.apache.james.mime4j.codec.ByteQueue: byte dequeue()> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: byte remove()>
<com.actionbarsherlock.widget.ActivityChooserView: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.widget.ActivityChooserView$2: void <init>(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setCustomView(android.view.View,com.actionbarsherlock.app.ActionBar$LayoutParams)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setCustomNavigationView(android.view.View)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setCustomView(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setCustomNavigationView(android.view.View)>
<com.jcraft.jsch.ChannelShell: void start()> --> <com.jcraft.jsch.RequestShell: void <init>()>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.util.List getParamNames()>
<org.apache.james.mime4j.io.MaxLineLimitException: void <init>(java.lang.String)> --> <org.apache.james.mime4j.MimeIOException: void <init>(java.lang.String)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)> --> <org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)> --> <org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer formatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)> --> <org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer initBuffer(org.apache.http.util.CharArrayBuffer)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setFloatValues(float[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setValues(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setIntValues(int[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setValues(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setObjectValues(java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setValues(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setValues(com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder[])>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setActionView(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: android.content.Context getContext()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean invoke()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: android.content.Context getContext()>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setTitle(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: android.content.Context getContext()>
<org.apache.james.mime4j.parser.MimeTokenStream: java.io.InputStream getInputStream()> --> <org.apache.james.mime4j.parser.EntityStateMachine: java.io.InputStream getContentStream()>
<org.apache.james.mime4j.parser.MimeTokenStream: java.io.InputStream getDecodedInputStream()> --> <org.apache.james.mime4j.parser.EntityStateMachine: java.io.InputStream getContentStream()>
<org.apache.james.mime4j.field.datetime.DateTime: java.lang.String toString()> --> <org.apache.james.mime4j.field.datetime.DateTime: int getTimeZone()>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void updateDisplay(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: void updateDisplay(java.lang.String,java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void restoreInstanceState(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: void updateDisplay(java.lang.String,java.lang.String,java.lang.String)>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.james.mime4j.message.BodyPart: org.apache.james.mime4j.message.Header getHeader()>
<com.jcraft.jsch.Channel: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: long getUInt()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Buffer: long getUInt()>
<com.jcraft.jsch.ChannelForwardedTCPIP: void getData(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: long getUInt()>
<org.apache.james.mime4j.field.AddressListField: void parse()> --> <org.apache.james.mime4j.field.AddressListField: java.lang.String getBody()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void playTogether(com.actionbarsherlock.internal.nineoldandroids.animation.Animator[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void playTogether(java.util.Collection)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder 'with'(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasureExactFormat(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getPaddingLeft()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getPaddingLeft()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setSupportProgressBarIndeterminate(boolean)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onMenuOpened(int,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setSupportSecondaryProgress(int)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onTitleChanged(java.lang.CharSequence,int)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void invalidateOptionsMenu()> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onPause()> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onPostResume()> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setSupportProgressBarVisibility(boolean)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void requestWindowFeature(long)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setContentView(int)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setSupportProgress(int)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setSupportProgressBarIndeterminateVisibility(boolean)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onPostCreate(android.os.Bundle)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onOptionsItemSelected(android.view.MenuItem)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onPanelClosed(int,android.view.Menu)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void openOptionsMenu()> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onPrepareOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onDestroy()> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void setContentView(android.view.View)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void closeOptionsMenu()> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: boolean onCreateOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onStop()> --> <com.actionbarsherlock.app.SherlockExpandableListActivity: com.actionbarsherlock.ActionBarSherlock getSherlock()>
<com.matburt.mobileorg.OrgData.OrgProvider: com.matburt.mobileorg.util.SelectionBuilder buildSelectionFromUri(android.net.Uri)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: java.lang.String getId(android.net.Uri)>
<com.matburt.mobileorg.OrgData.OrgNode: long addNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: java.lang.String getId(android.net.Uri)>
<com.matburt.mobileorg.OrgData.OrgFile: long addFileOrgDataNode(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgContract$OrgData: java.lang.String getId(android.net.Uri)>
<com.jcraft.jsch.Request: void write(com.jcraft.jsch.Packet)> --> <com.jcraft.jsch.Channel: boolean isConnected()>
<com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)> --> <com.jcraft.jsch.Channel: boolean isConnected()>
<com.matburt.mobileorg.Services.TimeclockDialog: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Services.TimeclockDialog: android.view.Window getWindow()>
<oauth.signpost.signature.SignatureBaseString: java.lang.String generate()> --> <oauth.signpost.http.HttpRequest: java.lang.String getMethod()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getHeight()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void bringToFront()>
<com.jcraft.jsch.IdentityFile: byte[] getSignature_rsa(byte[])> --> <com.jcraft.jsch.SignatureRSA: void setPrvKey(byte[],byte[])>
<com.matburt.mobileorg.Services.CalendarSyncService$1: void start()> --> <com.matburt.mobileorg.Services.CalendarWrapper: int deleteEntries()>
<com.jcraft.jsch.Session: com.jcraft.jsch.KeyExchange receive_kexinit(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.Session: java.lang.String[] checkKexes(java.lang.String)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.Session: void initDeflater(java.lang.String)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.DHG1: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.DHG14: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.Session: java.lang.String[] checkCiphers(java.lang.String)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.Session: void initInflater(java.lang.String)> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> --> <com.jcraft.jsch.Session: java.lang.String getConfig(java.lang.String)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabClickListener: void onClick(android.view.View)> --> <com.actionbarsherlock.app.ActionBar$Tab: void select()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onItemSelected(com.actionbarsherlock.internal.widget.IcsAdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.app.ActionBar$Tab: void select()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams generateDefaultLayoutParams()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView$LayoutParams: void <init>(int,int)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void <init>()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void <init>()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void <init>()>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void updateEmptyStatus(boolean)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: int getLeft()>
<org.apache.james.mime4j.parser.AbstractEntity: void monitor(org.apache.james.mime4j.parser.Event)> --> <org.apache.james.mime4j.parser.MimeEntityConfig: boolean isStrictParsing()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token jjFillToken()>
<com.matburt.mobileorg.Services.CalendarSyncService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.CalendarSyncService$1: void <init>(com.matburt.mobileorg.Services.CalendarSyncService,boolean,java.lang.String[],boolean,boolean)>
<com.matburt.mobileorg.util.FileUtils: java.lang.String read()> --> <com.matburt.mobileorg.util.FileUtils: java.io.BufferedReader getReader()>
<org.apache.james.mime4j.field.AbstractField: org.apache.james.mime4j.field.ParsedField parse(org.apache.james.mime4j.util.ByteSequence,java.lang.String)> --> <org.apache.james.mime4j.field.DefaultFieldParser: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>
<com.jcraft.jsch.IdentityFile: boolean decrypt_rsa()> --> <com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>
<com.jcraft.jsch.IdentityFile: boolean decrypt_dss()> --> <com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>
<com.jcraft.jsch.Session: boolean checkCipher(java.lang.String)> --> <com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>
<com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> --> <com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>
<com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> --> <com.jcraft.jsch.Cipher: void init(int,byte[],byte[])>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.parser.Field parse(org.apache.james.mime4j.field.FieldParser,java.lang.String,java.lang.String)> --> <org.apache.james.mime4j.util.MimeUtil: java.lang.String fold(java.lang.String,int)>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.HttpResponseParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_0()>
<org.apache.james.mime4j.message.BodyCopier: org.apache.james.mime4j.message.Body copy(org.apache.james.mime4j.message.Body)> --> <org.apache.james.mime4j.message.Multipart: void <init>(org.apache.james.mime4j.message.Multipart)>
<com.matburt.mobileorg.Gui.Wizard.LocalDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Gui.Wizard.LocalDirectoryBrowser: void browseTo(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.LocalDirectoryBrowser: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.LocalDirectoryBrowser: void browseTo(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp$1: void <init>(com.jcraft.jsch.ChannelSftp,byte[],long[],com.jcraft.jsch.SftpProgressMonitor)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.graphics.drawable.Drawable getIcon()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean needsDividerBefore()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.graphics.drawable.Drawable getIcon()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.graphics.drawable.Drawable getIcon()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: android.graphics.drawable.Drawable getIcon()>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.DH: void setG(byte[])>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.DH: void setG(byte[])>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.DH: void setG(byte[])>
<com.dropbox.client2.android.AndroidAuthSession: void startAuthentication(android.content.Context)> --> <com.dropbox.client2.android.AndroidAuthSession: com.dropbox.client2.session.AppKeyPair getAppKeyPair()>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void run()> --> <com.actionbarsherlock.widget.ActivityChooserModel: android.content.Context access$500(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel: android.content.Context access$500(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: int getMeasuredWidth()>
<com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.SubMenu getSubMenu()> --> <com.actionbarsherlock.internal.view.menu.MenuItemWrapper: boolean hasSubMenu()>
<org.apache.http.message.BasicTokenIterator: int findTokenSeparator(int)> --> <org.apache.http.message.BasicTokenIterator: boolean isTokenSeparator(char)>
<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)> --> <org.apache.http.message.BasicTokenIterator: boolean isTokenSeparator(char)>
<com.dropbox.client2.jsonextract.JsonMap: com.dropbox.client2.jsonextract.JsonThing get(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonMap: java.lang.String pathConcatField(java.lang.String,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonMap: com.dropbox.client2.jsonextract.JsonThing getOrNull(java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonMap: java.lang.String pathConcatField(java.lang.String,java.lang.String)>
<com.dropbox.client2.jsonextract.JsonMap: java.lang.String access$100(java.lang.String,java.lang.String)> --> <com.dropbox.client2.jsonextract.JsonMap: java.lang.String pathConcatField(java.lang.String,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean dispatchHoverEvent(android.view.MotionEvent)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean onHoverEvent(android.view.MotionEvent)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.NullWizard: void createNullConfig()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.NullWizard: void setupDoneButton(android.view.View)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void showBlockAgenda(int)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()>
<com.matburt.mobileorg.Services.TimeclockDialog$3: void onClick(android.view.View)> --> <com.matburt.mobileorg.Services.TimeclockDialog: android.support.v4.app.FragmentManager getSupportFragmentManager()>
<com.jcraft.jsch.Session: void addChannel(com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Channel: void setSession(com.jcraft.jsch.Session)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setMenuInfo(android.view.ContextMenu$ContextMenuInfo)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void domain()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>(9);     default: goto $r3_3 = $r0.<org.apache.james.mime4j.field.address.parser.AddressListParser: int[] jj_la1>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void local_part()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.Token jj_consume_token(int)>(9);     default: goto $r3_3 = $r0.<org.apache.james.mime4j.field.address.parser.AddressListParser: int[] jj_la1>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.MailboxList buildGroupBody(org.apache.james.mime4j.field.address.parser.ASTgroup_body)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildMailbox(org.apache.james.mime4j.field.address.parser.ASTmailbox)>
<org.apache.james.mime4j.field.address.Mailbox: org.apache.james.mime4j.field.address.Mailbox parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildMailbox(org.apache.james.mime4j.field.address.parser.ASTmailbox)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void supportInvalidateOptionsMenu()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: void invalidateOptionsMenu()>
<oauth.signpost.basic.DefaultOAuthProvider: oauth.signpost.http.HttpRequest createRequest(java.lang.String)> --> <oauth.signpost.basic.HttpURLConnectionRequestAdapter: void <init>(java.net.HttpURLConnection)>
<oauth.signpost.basic.DefaultOAuthConsumer: oauth.signpost.http.HttpRequest wrap(java.lang.Object)> --> <oauth.signpost.basic.HttpURLConnectionRequestAdapter: void <init>(java.net.HttpURLConnection)>
<org.apache.james.mime4j.storage.ThresholdStorageProvider: org.apache.james.mime4j.storage.StorageOutputStream createStorageOutputStream()> --> <org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: void <init>(org.apache.james.mime4j.storage.ThresholdStorageProvider)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void start()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: int access$700(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)> --> <org.apache.james.mime4j.codec.Base64InputStream: int decodePad(int,int,byte[],int,int)>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.AbstractOAuthConsumer: void collectBodyParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void setCallback(com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)>
<org.apache.http.entity.mime.FormBodyPart: void <init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody)> --> <org.apache.http.entity.mime.FormBodyPart: void generateContentDisp(org.apache.http.entity.mime.content.ContentBody)>
<com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor: java.lang.Object extract(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.DropboxAPI$DeltaEntry$JsonExtractor: com.dropbox.client2.DropboxAPI$DeltaEntry extract(com.dropbox.client2.jsonextract.JsonThing)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream,boolean)>
<com.jcraft.jsch.Channel: void setInputStream(java.io.InputStream)> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream,boolean)>
<com.jcraft.jsch.Channel: void setInputStream(java.io.InputStream,boolean)> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream,boolean)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void onDraw(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersVertical(android.graphics.Canvas)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: java.lang.Object getDir(int)>
<org.apache.james.mime4j.storage.StorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage()> --> <org.apache.james.mime4j.storage.StorageOutputStream: org.apache.james.mime4j.storage.Storage toStorage0()>
<org.apache.james.mime4j.field.DateTimeField: org.apache.james.mime4j.field.ParseException getParseException()> --> <org.apache.james.mime4j.field.DateTimeField: org.apache.james.mime4j.field.datetime.parser.ParseException getParseException()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: android.content.Context getContext()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initTitle()> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: android.content.Context getContext()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void setSplitActionBar(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: android.content.Context getContext()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: android.content.Context getContext()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: android.content.Context getContext()>
<org.apache.http.params.BasicHttpParams: boolean isParameterSet(java.lang.String)> --> <org.apache.http.params.BasicHttpParams: java.lang.Object getParameter(java.lang.String)>
<com.jcraft.jsch.IdentityFile: boolean decrypt_dss()> --> <com.jcraft.jsch.Buffer: void <init>(byte[])>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Buffer: void <init>(byte[])>
<com.jcraft.jsch.IdentityFile: boolean decrypt_rsa()> --> <com.jcraft.jsch.Buffer: void <init>(byte[])>
<com.jcraft.jsch.KeyExchange: java.lang.String[] guess(byte[],byte[])> --> <com.jcraft.jsch.Buffer: void <init>(byte[])>
<com.jcraft.jsch.KeyPairRSA: boolean parse(byte[])> --> <com.jcraft.jsch.Buffer: void <init>(byte[])>
<com.jcraft.jsch.KeyPairDSA: boolean parse(byte[])> --> <com.jcraft.jsch.Buffer: void <init>(byte[])>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Buffer: void <init>(byte[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void playSequentially(com.actionbarsherlock.internal.nineoldandroids.animation.Animator[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder before(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void playSequentially(java.util.List)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder before(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)>
<com.jcraft.jsch.ChannelSftp: int access$100(com.jcraft.jsch.ChannelSftp,byte[],long,byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.app.ActionBar$TabListener: void onTabReselected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.app.ActionBar$TabListener: void onTabReselected(com.actionbarsherlock.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void onFinishInflate()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setOnLongClickListener(android.view.View$OnLongClickListener)>
<org.apache.james.mime4j.field.Fields: java.lang.String encodeAddresses(java.lang.Iterable)> --> <org.apache.james.mime4j.field.address.Address: java.lang.String getEncodedString()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard$2: void start()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: void showToastRemote(java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: com.actionbarsherlock.view.MenuInflater getSupportMenuInflater()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void showUpgradePopup()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity$1: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineActivity)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char[] GetSuffix(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.contentdisposition.parser.Token)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: char[] GetSuffix(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.internal.widget.IcsProgressBar getCircularProgressBar(boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setVisibility(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void hideProgressBars(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setVisibility(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void updateProgressBars(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setVisibility(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void showProgressBars(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setVisibility(int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.internal.widget.IcsProgressBar getHorizontalProgressBar(boolean)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setVisibility(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView$2: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: com.matburt.mobileorg.Gui.Outline.OutlineActionMode access$500(com.matburt.mobileorg.Gui.Outline.OutlineListView)>
<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode)> --> <org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)>
<org.apache.http.entity.mime.MultipartEntity: void <init>()> --> <org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator setDuration(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator setDuration(long)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder after(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator setDuration(long)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.Animator setDuration(long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator setDuration(long)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void start()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator setDuration(long)>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.JSchPartialAuthException: void <init>(java.lang.String)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void parseLine(java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgFileParser: void parseHeading(java.lang.String,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void parseLine()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void parseAddressList0()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void address_list()>
<org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream,boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setVisibility(int)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void setVisibility(int)>
<com.jcraft.jsch.IdentityFile: boolean decrypt()> --> <com.jcraft.jsch.IdentityFile: boolean decrypt_dss()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder play(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder play(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder play(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void playSequentially(com.actionbarsherlock.internal.nineoldandroids.animation.Animator[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder play(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder play(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void playSequentially(java.util.List)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder play(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void playTogether(com.actionbarsherlock.internal.nineoldandroids.animation.Animator[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder play(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void playTogether(java.util.Collection)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder play(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void hide()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet$Builder play(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void ExpandBuff(boolean)>
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.ChannelSftp: void run()>
<com.jcraft.jsch.jcraft.HMACSHA1: void <init>()> --> <com.jcraft.jsch.jcraft.HMACSHA1: void setH(java.security.MessageDigest)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void invalidateOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchInvalidateOptionsMenu()>
<com.actionbarsherlock.app.SherlockActivity: void invalidateOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchInvalidateOptionsMenu()>
<com.actionbarsherlock.app.SherlockFragmentActivity: void invalidateOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchInvalidateOptionsMenu()>
<com.actionbarsherlock.app.SherlockListActivity: void invalidateOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchInvalidateOptionsMenu()>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void invalidateOptionsMenu()> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchInvalidateOptionsMenu()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: int getEndLine()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: int getEndLine()>
<oauth.signpost.AbstractOAuthProvider: void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[])> --> <oauth.signpost.AbstractOAuthProvider: void setResponseParameters(oauth.signpost.http.HttpParameters)>
<org.apache.http.impl.DefaultHttpClientConnection: java.lang.String toString()> --> <org.apache.http.impl.DefaultHttpClientConnection: boolean isOpen()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ResizePopupRunnable: void start()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: int getCount()>
<com.matburt.mobileorg.Services.SyncService: void resetAlarm()> --> <com.matburt.mobileorg.Services.SyncService: void setAlarm()>
<com.matburt.mobileorg.Services.SyncService: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Services.SyncService: void setAlarm()>
<com.matburt.mobileorg.Services.SyncService: int onStartCommand(android.content.Intent,int,int)> --> <com.matburt.mobileorg.Services.SyncService: void setAlarm()>
<com.matburt.mobileorg.Services.SyncService: void access$100(com.matburt.mobileorg.Services.SyncService)> --> <com.matburt.mobileorg.Services.SyncService: void setAlarm()>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.app.SherlockActivity: boolean onCreatePanelMenu(int,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.app.SherlockActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: float getAlpha()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: float getAlpha()>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: float getAlpha()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: float getAlpha()>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: float getAlpha()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: float getAlpha()>
<com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: float getAlpha()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: float getAlpha()>
<org.apache.james.mime4j.message.Message: org.apache.james.mime4j.field.address.MailboxList getMailboxList(java.lang.String)> --> <org.apache.james.mime4j.field.MailboxListField: org.apache.james.mime4j.field.address.MailboxList getMailboxList()>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<com.matburt.mobileorg.Settings.SettingsActivity: void updatePreferenceSummary(java.lang.String)> --> <com.matburt.mobileorg.util.OrgUtils: java.lang.String lookUpValueFromArray(android.content.Context,int,int,java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getEndColumn()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: int getEndColumn()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setupSetter(java.lang.Class)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupSetter(java.lang.Class)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupSetter(java.lang.Class)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setupSetter(java.lang.Class)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setupSetter(java.lang.Class)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxFileInfo getThumbnail(java.lang.String,java.io.OutputStream,com.dropbox.client2.DropboxAPI$ThumbSize,com.dropbox.client2.DropboxAPI$ThumbFormat,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$DropboxInputStream: com.dropbox.client2.DropboxAPI$DropboxFileInfo getFileInfo()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$DropboxFileInfo getFile(java.lang.String,java.lang.String,java.io.OutputStream,com.dropbox.client2.ProgressListener)> --> <com.dropbox.client2.DropboxAPI$DropboxInputStream: com.dropbox.client2.DropboxAPI$DropboxFileInfo getFileInfo()>
<org.json.simple.JSONArray: void writeJSONString(java.util.List,java.io.Writer)> --> <org.json.simple.JSONValue: void writeJSONString(java.lang.Object,java.io.Writer)>
<org.json.simple.JSONObject: void writeJSONString(java.util.Map,java.io.Writer)> --> <org.json.simple.JSONValue: void writeJSONString(java.lang.Object,java.io.Writer)>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.HttpRequestParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onCreateActionMode(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.ActionMode: com.actionbarsherlock.view.MenuInflater getMenuInflater()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode$6: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void access$400(com.matburt.mobileorg.Gui.Outline.OutlineActionMode)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void saveConfig()> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void setResult(int,android.content.Intent)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void cancelConfig()> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void setResult(int,android.content.Intent)>
<org.apache.james.mime4j.parser.MimeTokenStream: void doParse(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.parser.MimeEntityConfig: int getMaxLineLen()>
<org.apache.james.mime4j.parser.MimeEntity: void <init>(org.apache.james.mime4j.io.LineNumberSource,org.apache.james.mime4j.io.BufferedLineReaderInputStream,org.apache.james.mime4j.descriptor.BodyDescriptor,int,int,org.apache.james.mime4j.parser.MimeEntityConfig)> --> <org.apache.james.mime4j.parser.MimeEntityConfig: int getMaxLineLen()>
<org.apache.james.mime4j.parser.AbstractEntity: org.apache.james.mime4j.util.ByteArrayBuffer fillFieldBuffer()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: int getMaxLineLen()>
<org.apache.james.mime4j.parser.MimeEntity: void clearMimeStream()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: int getMaxLineLen()>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: int getMaxLineLen()>
<org.apache.james.mime4j.parser.MimeEntity: void createMimeStream()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: int getMaxLineLen()>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMimeEntity()> --> <org.apache.james.mime4j.parser.MimeEntityConfig: int getMaxLineLen()>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: void sendOPENR(byte[])>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.ChannelSftp: void sendOPENR(byte[])>
<com.jcraft.jsch.ChannelSubsystem: void start()> --> <com.jcraft.jsch.RequestPtyReq: void <init>()>
<com.jcraft.jsch.ChannelSession: void sendRequests()> --> <com.jcraft.jsch.RequestPtyReq: void <init>()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: com.actionbarsherlock.internal.widget.ActionBarView$HomeView access$600(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: com.actionbarsherlock.internal.widget.ActionBarView$HomeView access$600(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: byte[] _realpath(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void _get(java.lang.String,java.io.OutputStream,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rm(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rmdir(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String,byte[][])> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _lstat(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void mkdir(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.Util: byte[] str2byte(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.SftpATTRS _stat(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.InputStream get(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,long)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void _setStat(java.lang.String,com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.lang.String readlink(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: boolean isRemoteDir(java.lang.String)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.Util: byte[] str2byte(java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)>
<oauth.signpost.AbstractOAuthConsumer: void completeOAuthParameters(oauth.signpost.http.HttpParameters)> --> <oauth.signpost.AbstractOAuthConsumer: java.lang.String generateNonce()>
<com.jcraft.jsch.Util: java.net.Socket createSocket(java.lang.String,int,int)> --> <com.jcraft.jsch.Util$1: void <init>(java.net.Socket[],java.lang.String,int,java.lang.Exception[])>
<org.json.simple.JSONObject: java.lang.String toJSONString(java.util.Map)> --> <org.json.simple.JSONObject: java.lang.String toJSONString(java.lang.String,java.lang.Object,java.lang.StringBuffer)>
<org.json.simple.JSONObject: java.lang.String toString(java.lang.String,java.lang.Object)> --> <org.json.simple.JSONObject: java.lang.String toJSONString(java.lang.String,java.lang.Object,java.lang.StringBuffer)>
<com.jcraft.jsch.SftpATTRS: java.lang.String getPermissionsString()> --> <com.jcraft.jsch.SftpATTRS: boolean isLink()>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: boolean onActionItemClicked(com.actionbarsherlock.view.ActionMode,com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runDeleteFileNode()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerCreate: void <init>(android.content.Intent,java.lang.String)> --> <com.matburt.mobileorg.util.OrgUtils: com.matburt.mobileorg.OrgData.OrgNode getCaptureIntentContents(android.content.Intent)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStopAtPos(int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_3()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStopAtPos(int,int)>
<org.json.simple.JSONValue: java.lang.Object parse(java.lang.String)> --> <org.json.simple.JSONValue: java.lang.Object parse(java.io.Reader)>
<com.matburt.mobileorg.Gui.ViewActivity: void viewNode(int)> --> <com.matburt.mobileorg.Gui.ViewActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Channel: void start()>
<com.actionbarsherlock.ActionBarSherlock: boolean callbackOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.ActionBarSherlock$OnMenuItemSelectedListener: boolean onMenuItemSelected(int,com.actionbarsherlock.view.MenuItem)>
<com.matburt.mobileorg.Services.TimeclockDialog: void saveClock(int,int)> --> <com.matburt.mobileorg.Services.TimeclockService: long getEndTime()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void access$400(com.matburt.mobileorg.Gui.Wizard.WizardView)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollLeft()>
<com.actionbarsherlock.internal.ActionBarSherlockNative: boolean dispatchCreateOptionsMenu(android.view.Menu)> --> <com.actionbarsherlock.internal.view.menu.MenuWrapper: android.view.Menu unwrap()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.structured.parser.Token)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$2: java.lang.Object initialValue()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$2: java.util.ArrayList initialValue()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry move(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session$AccessType: java.lang.String toString()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry createFolder(java.lang.String)> --> <com.dropbox.client2.session.Session$AccessType: java.lang.String toString()>
<com.dropbox.client2.DropboxAPI: void delete(java.lang.String)> --> <com.dropbox.client2.session.Session$AccessType: java.lang.String toString()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry copy(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session$AccessType: java.lang.String toString()>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry addFromCopyRef(java.lang.String,java.lang.String)> --> <com.dropbox.client2.session.Session$AccessType: java.lang.String toString()>
<com.jcraft.jsch.jce.TripleDESCBC: void init(int,byte[],byte[])> --> <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>
<com.jcraft.jsch.jce.TripleDESCTR: void init(int,byte[],byte[])> --> <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarWrapper$TabWrapper: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> --> <com.actionbarsherlock.internal.app.ActionBarWrapper: android.support.v4.app.FragmentTransaction access$100(com.actionbarsherlock.internal.app.ActionBarWrapper)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,int)> --> <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor)> --> <com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.language.parser.Token: org.apache.james.mime4j.field.language.parser.Token newToken(int)>
<com.jcraft.jsch.KeyPairDSA: byte[] getPublicKeyBlob()> --> <com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>
<com.jcraft.jsch.KeyPair: void writePublicKey(java.io.OutputStream,java.lang.String)> --> <com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>
<com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)> --> <com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>
<com.jcraft.jsch.KeyPairRSA: byte[] getPublicKeyBlob()> --> <com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>
<com.jcraft.jsch.KeyPair: java.lang.String getFingerPrint()> --> <com.jcraft.jsch.KeyPair: byte[] getPublicKeyBlob()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void startActivity(android.content.Intent)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void createAgendaBlockEntry()> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void startActivity(android.content.Intent)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: boolean access$700(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator,long)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: boolean delayedAnimationFrame(long)>
<com.actionbarsherlock.internal.view.StandaloneActionMode: void setCustomView(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setCustomView(android.view.View)>
<com.actionbarsherlock.internal.app.ActionBarImpl$ActionModeImpl: void setCustomView(android.view.View)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void setCustomView(android.view.View)>
<oauth.signpost.AbstractOAuthProvider: void handleUnexpectedResponse(int,oauth.signpost.http.HttpResponse)> --> <oauth.signpost.http.HttpResponse: java.lang.String getReasonPhrase()>
<org.apache.james.mime4j.message.MessageBuilder: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.message.BodyFactory: org.apache.james.mime4j.message.TextBody textBody(java.io.InputStream,java.lang.String)>
<org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream,boolean)> --> <org.apache.james.mime4j.codec.ByteQueue: void <init>()>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.codec.ByteQueue: void <init>()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean showOverflowMenu()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup)>
<oauth.signpost.signature.QueryStringSigningStrategy: java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.http.HttpParameters: java.lang.String getAsQueryString(java.lang.Object)>
<oauth.signpost.signature.SignatureBaseString: java.lang.String normalizeRequestParameters()> --> <oauth.signpost.http.HttpParameters: java.lang.String getAsQueryString(java.lang.Object)>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setKeyframes(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofKeyframe(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofObject(java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])>
<com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: void <init>(com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()> --> <org.apache.http.impl.entity.LaxContentLengthStrategy: void <init>()>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()> --> <org.apache.http.impl.entity.LaxContentLengthStrategy: void <init>()>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestExec: void write(com.jcraft.jsch.Packet)>
<com.dropbox.client2.jsonextract.JsonList: void <init>(java.util.List)> --> <com.dropbox.client2.jsonextract.JsonBase: void <init>(java.lang.Object)>
<com.dropbox.client2.jsonextract.JsonMap: void <init>(java.util.Map)> --> <com.dropbox.client2.jsonextract.JsonBase: void <init>(java.lang.Object)>
<com.jcraft.jsch.KnownHosts: void add(com.jcraft.jsch.HostKey,com.jcraft.jsch.UserInfo)> --> <com.jcraft.jsch.KnownHosts: java.lang.String getKnownHostsRepositoryID()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onResume()> --> <com.actionbarsherlock.app.SherlockActivity: void onResume()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onResume()> --> <com.actionbarsherlock.app.SherlockActivity: void onResume()>
<com.matburt.mobileorg.Services.CalendarSyncService: void removeCalendarEntries(com.matburt.mobileorg.util.MultiMap)> --> <com.matburt.mobileorg.util.MultiMap: java.util.Set keySet()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void reopenMenu(boolean)> --> <com.actionbarsherlock.internal.widget.ActionBarView: boolean isOverflowReserved()>
<org.apache.james.mime4j.field.mimeversion.parser.TokenMgrError: java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char)> --> <org.apache.james.mime4j.field.mimeversion.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_2(int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void jjCheckNAddTwoStates(int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void jjCheckNAddStates(int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void jjCheckNAddStates(int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void jjCheckNAdd(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setup(com.matburt.mobileorg.OrgData.OrgNode,boolean,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.content.ContentResolver)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void setupPriority(java.lang.String,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.text.SpannableStringBuilder)>
<org.apache.james.mime4j.field.datetime.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.datetime.parser.ParseException: java.lang.String add_escapes(java.lang.String)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: org.apache.james.mime4j.field.structured.parser.Token jj_consume_token(int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParser: org.apache.james.mime4j.field.structured.parser.ParseException generateParseException()>
<com.matburt.mobileorg.util.FileUtils: java.io.BufferedReader getReader()> --> <com.matburt.mobileorg.util.FileUtils: java.lang.String getSynchMode()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa2_0(long,long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfa_0(int,long)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa1_0(long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfa_0(int,long)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.RequestSftp: void <init>()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void show()> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void animateToMode(boolean)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void show(boolean)>
<com.jcraft.jsch.Channel: com.jcraft.jsch.Channel getChannel(java.lang.String)> --> <com.jcraft.jsch.ChannelSubsystem: void <init>()>
<org.apache.james.mime4j.message.StorageBinaryBody: org.apache.james.mime4j.message.SingleBody copy()> --> <org.apache.james.mime4j.message.StorageBinaryBody: org.apache.james.mime4j.message.StorageBinaryBody copy()>
<com.matburt.mobileorg.Gui.SearchActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.SearchActivity: void setContentView(int)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void <init>(com.actionbarsherlock.widget.ActivityChooserModel,com.actionbarsherlock.widget.ActivityChooserModel$1)> --> <com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void <init>(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getFilenames(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void set(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgFile: void <init>(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void set(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgFile getOrCreateFileFromAlias(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void set(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.ArrayList getFileAliases(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void set(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgFile: void <init>(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void set(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgFile: void <init>(android.database.Cursor)> --> <com.matburt.mobileorg.OrgData.OrgFile: void set(android.database.Cursor)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: java.util.HashMap getFileChecksums(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void set(android.database.Cursor)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet ofObject(java.lang.Object[])>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: boolean hasData()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int limit()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int limit()>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void restoreFromBundle(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: void setupTagEntries(java.util.ArrayList)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.TagsFragment: void setupTagEntries(java.util.ArrayList)>
<org.apache.james.mime4j.message.MessageWriter: void writeBody(org.apache.james.mime4j.message.Body,java.io.OutputStream)> --> <org.apache.james.mime4j.message.SingleBody: void writeTo(java.io.OutputStream)>
<com.actionbarsherlock.internal.widget.ActionBarView: void initIndeterminateProgress()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setId(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void initProgress()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setId(int)>
<com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.KeyPair: void writeSECSHPublicKey(java.io.OutputStream,java.lang.String)>
<com.jcraft.jsch.ChannelSession: void start()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.SftpATTRS: void dump(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Packet: int shift(int,int,int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Buffer: void putString(byte[],int,int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelSftp: void sendINIT()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Channel: void sendOpenConfirmation()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Channel: void sendOpenFailure(int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelDirectTCPIP: void start()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Channel$1: void flush()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Channel: void close()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Channel: void eof()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Packet: void unshift(byte,int,int,int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.Buffer: void putMPInt(byte[])> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.Buffer: void putInt(int)>
<com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener: void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void setVisibility(int)>
<com.actionbarsherlock.internal.widget.AbsActionBarView$VisibilityAnimListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void setVisibility(int)>
<com.matburt.mobileorg.OrgData.OrgProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> --> <com.matburt.mobileorg.OrgData.OrgProvider: java.lang.String getTableNameFromUri(android.net.Uri)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: com.actionbarsherlock.view.MenuItem setTitle(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.SubMenu setHeaderTitle(java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setSubMenu(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.SubMenu setHeaderTitle(java.lang.CharSequence)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setPropertyName(java.lang.String)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void jj_save(int,int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser$JJCalls: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser$JJCalls: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser$JJCalls: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser$JJCalls: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser$JJCalls: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser$JJCalls: void <init>()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser$JJCalls: void <init>()>
<com.matburt.mobileorg.Gui.Wizard.WizardActivity: void onResume()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void refresh()>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void setContentView(int)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void handleDataChanged()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void setNextSelectedPositionInt(int)>
<org.apache.james.mime4j.codec.QuotedPrintableEncoder: void encode(byte)> --> <org.apache.james.mime4j.codec.QuotedPrintableEncoder: void escape(byte)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void handleTrustRelationship(android.content.Context)> --> <javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>
<com.dropbox.client2.RESTUtility: void updateClientProxy(org.apache.http.client.HttpClient,com.dropbox.client2.session.Session)> --> <org.apache.http.HttpHost: void <init>(java.lang.String)>
<org.apache.james.mime4j.field.DateTimeField: void parse()> --> <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: java.lang.String getMessage()>
<org.apache.james.mime4j.field.ContentDispositionField: java.util.Date parseDate(java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.TokenMgrError: java.lang.String getMessage()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void onConfigurationChanged(android.content.res.Configuration)>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,int)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: org.apache.james.mime4j.field.address.parser.Node popNode()>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void clearNodeScope(org.apache.james.mime4j.field.address.parser.Node)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: org.apache.james.mime4j.field.address.parser.Node popNode()>
<org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: void closeNodeScope(org.apache.james.mime4j.field.address.parser.Node,boolean)> --> <org.apache.james.mime4j.field.address.parser.JJTAddressListParserState: org.apache.james.mime4j.field.address.parser.Node popNode()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: int jjStartNfaWithStates_0(int,int,int)>
<com.matburt.mobileorg.Services.SyncService: void onCreate()> --> <com.matburt.mobileorg.Services.SyncService: android.app.Application getApplication()>
<org.apache.http.protocol.SyncBasicHttpContext: void setAttribute(java.lang.String,java.lang.Object)> --> <org.apache.http.protocol.BasicHttpContext: void setAttribute(java.lang.String,java.lang.Object)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void refreshTitle()> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: java.lang.String getChangesString()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void handleDropboxResume()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: void storeKeys(java.lang.String,java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void removePagesAfter(int)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: android.view.View createWebDAVConfig()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: void removePagesAfter(int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void initTitle()>
<com.actionbarsherlock.internal.widget.ActionBarView: void access$1300(com.actionbarsherlock.internal.widget.ActionBarView)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void initTitle()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void initTitle()>
<com.jcraft.jsch.KeyPair: byte[] decrypt(byte[],byte[],byte[])> --> <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])>
<com.jcraft.jsch.KeyPair: byte[] encrypt(byte[],byte[][])> --> <com.jcraft.jsch.KeyPair: byte[] genKey(byte[],byte[])>
<org.apache.http.HttpVersion: void <init>(int,int)> --> <org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>
<org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)> --> <org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>
<com.matburt.mobileorg.Services.CalendarSyncService: void removeCalendarEntries(com.matburt.mobileorg.util.MultiMap)> --> <com.matburt.mobileorg.util.MultiMap: java.util.ArrayList get(java.lang.Long)>
<com.actionbarsherlock.widget.ActivityChooserView: void updateAppearance()> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int getHistorySize()>
<org.json.simple.parser.Yylex: org.json.simple.parser.Yytoken yylex()> --> <org.json.simple.parser.Yylex: char yycharat(int)>
<com.matburt.mobileorg.OrgData.OrgFile: void write(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgFile: void addFile(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgFileParser: void init(com.matburt.mobileorg.OrgData.OrgFile)> --> <com.matburt.mobileorg.OrgData.OrgFile: void addFile(android.content.ContentResolver)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp$LsEntry: void <init>(com.jcraft.jsch.ChannelSftp,java.lang.String,java.lang.String,com.jcraft.jsch.SftpATTRS)>
<com.jcraft.jsch.ChannelSession: void start()> --> <com.jcraft.jsch.ChannelSession: void eof()>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.http.entity.mime.HttpMultipart: java.lang.String getBoundary()>
<com.dropbox.client2.DropboxAPI$ChunkedUploader: void abort()> --> <com.dropbox.client2.DropboxAPI$ChunkedUploadRequest: void abort()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: void onRestoreInstanceState(android.os.Parcelable)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)>
<com.matburt.mobileorg.Services.SyncService: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Services.SyncService: void resetAlarm()>
<com.actionbarsherlock.internal.app.ActionBarImpl: void ensureTabsExist()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setVisibility(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setHasEmbeddedTabs(boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setVisibility(int)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setVisibility(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setVisibility(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$VisibilityAnimListener: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setVisibility(int)>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setVisibility(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$VisibilityAnimListener: void onAnimationStart(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setVisibility(int)>
<com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo: int compareTo(java.lang.Object)> --> <com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo: int compareTo(com.actionbarsherlock.widget.ActivityChooserModel$ActivityResolveInfo)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$ExpandedIndexObserver: void onChanged()> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter access$500(com.actionbarsherlock.internal.view.menu.MenuPopupHelper)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String stripDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.regex.Pattern getTimestampMatcher(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<com.matburt.mobileorg.OrgData.OrgNodePayload: void insertOrReplaceDate(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.util.regex.Pattern getTimestampMatcher(com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE)>
<org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.parser.RawField: java.lang.String getName()> --> <org.apache.james.mime4j.parser.RawField: java.lang.String parseName()>
<org.apache.james.mime4j.message.StorageBinaryBody: void <init>(org.apache.james.mime4j.storage.MultiReferenceStorage)> --> <org.apache.james.mime4j.message.BinaryBody: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void setInterpolator(android.view.animation.Interpolator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Animator: void setInterpolator(android.view.animation.Interpolator)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void runArchiveNode(boolean)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActionMode$3: void <init>(com.matburt.mobileorg.Gui.Outline.OutlineActionMode)>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.http.entity.mime.HttpMultipart: java.lang.String getPreamble()>
<org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void write(int)> --> <org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void write(byte[],int,int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void initAbsSpinner()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: void initAbsSpinner()>
<org.apache.http.impl.SocketHttpServerConnection: void close()> --> <org.apache.http.impl.SocketHttpServerConnection: void doFlush()>
<org.apache.http.impl.AbstractHttpServerConnection: void <init>()> --> <org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntityDeserializer createEntityDeserializer()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean runSearch()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read()> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>
<org.apache.http.impl.io.SocketInputBuffer: int fillBuffer()> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)> --> <org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStartNfa_3(int,long)> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjStopStringLiteralDfa_3(int,long)>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ParseException: java.lang.String getMessage()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void jj_rescan_token()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3_1()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_2_1(int)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: boolean jj_3_1()>
<org.apache.http.HttpHost: void <init>(java.lang.String)> --> <org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>
<org.apache.http.HttpHost: void <init>(java.lang.String,int)> --> <org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>
<org.apache.http.HttpHost: void <init>(org.apache.http.HttpHost)> --> <org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: void <init>(com.actionbarsherlock.internal.view.menu.MenuPopupHelper,com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: float getTranslationX()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: float getTranslationX()>
<com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: float getTranslationX()> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: float getTranslationX()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void onDetachedFromWindow()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void onDetachedFromWindow()>
<org.apache.http.message.BasicHeaderValueFormatter: java.lang.String formatElements(org.apache.http.HeaderElement[],boolean,org.apache.http.message.HeaderValueFormatter)> --> <org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: boolean onSubMenuSelected(com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void setCallback(com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)>
<com.matburt.mobileorg.Gui.SearchActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.SearchActivity: android.content.Intent getIntent()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: void animateValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimatorUpdateListener: void onAnimationUpdate(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: void sendOPENW(byte[])>
<com.jcraft.jsch.ChannelSftp: java.io.OutputStream put(java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int,long)> --> <com.jcraft.jsch.ChannelSftp: void sendOPENW(byte[])>
<com.dropbox.client2.jsonextract.JsonList: java.util.Iterator iterator()> --> <com.dropbox.client2.jsonextract.JsonList$WrapperIterator: void <init>(java.lang.String,java.util.Iterator,com.dropbox.client2.jsonextract.JsonList$1)>
<org.apache.http.MethodNotSupportedException: void <init>(java.lang.String)> --> <org.apache.http.HttpException: void <init>(java.lang.String)>
<org.apache.http.ProtocolException: void <init>(java.lang.String)> --> <org.apache.http.HttpException: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean isShortcutKey(int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <clinit>()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void jj_la1_0()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: int buildDropDown()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: void setFocusableInTouchMode(boolean)>
<com.matburt.mobileorg.OrgData.OrgEdit: boolean compare(com.matburt.mobileorg.OrgData.OrgEdit)> --> <com.matburt.mobileorg.OrgData.OrgEdit$TYPE: boolean equals(java.lang.Object)>
<com.dropbox.client2.DropboxAPI$BasicUploadRequest: com.dropbox.client2.DropboxAPI$Entry upload()> --> <com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)>
<com.dropbox.client2.DropboxAPI$ChunkedUploadRequest: com.dropbox.client2.DropboxAPI$ChunkedUploadResponse upload()> --> <com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)>
<com.dropbox.client2.RESTUtility: org.apache.http.HttpResponse execute(com.dropbox.client2.session.Session,org.apache.http.client.methods.HttpUriRequest,int)> --> <com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)>
<com.dropbox.client2.RESTUtility: java.lang.Object request(com.dropbox.client2.RESTUtility$RequestMethod,java.lang.String,java.lang.String,int,java.lang.String[],com.dropbox.client2.session.Session)> --> <com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$Entry commitChunkedUpload(java.lang.String,java.lang.String,boolean,java.lang.String)> --> <com.dropbox.client2.RESTUtility: java.lang.Object parseAsJSON(org.apache.http.HttpResponse)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: int measureChildView(android.view.View,int,int,int)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void addAgenda(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void <init>(android.content.Context)>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void <init>(android.content.Context)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void onConfigurationChanged(android.content.res.Configuration)>
<org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>
<org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void backup(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void backup(int)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseLanguage(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setMax(int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void postInvalidate()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void stopAnimation()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void postInvalidate()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setIndeterminateDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void postInvalidate()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void postInvalidate()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void startAnimation()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void postInvalidate()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: boolean onContextItemSelected(android.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: void removeAgenda(int,android.content.Context)>
<com.jcraft.jsch.Session: void delPortForwardingL(int)> --> <com.jcraft.jsch.Session: void delPortForwardingL(java.lang.String,int)>
<org.apache.james.mime4j.parser.MimeStreamParser: void setRaw(boolean)> --> <org.apache.james.mime4j.parser.MimeTokenStream: void setRecursionMode(int)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void setAlpha(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setAlpha(float)>
<com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup: void setAlpha(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setAlpha(float)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: void setAlpha(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setAlpha(float)>
<com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: void setAlpha(float)> --> <com.actionbarsherlock.internal.nineoldandroids.view.animation.AnimatorProxy: void setAlpha(float)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void SkipLexicalActions(org.apache.james.mime4j.field.structured.parser.Token)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char[] GetSuffix(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.structured.parser.Token)> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char[] GetSuffix(int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: char[] GetSuffix(int)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$PopupScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: boolean access$1100(com.actionbarsherlock.internal.widget.IcsListPopupWindow)>
<com.actionbarsherlock.internal.widget.FakeDialogPhoneWindow: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.FakeDialogPhoneWindow: int getMeasuredWidth()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfa_2(int,long)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_2()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfaWithStates_2(int,int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_2(int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: int jjMoveStringLiteralDfa0_2()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void setGroupCheckable(int,boolean,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setExclusiveCheckable(boolean)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setExclusiveCheckable(boolean)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void refresh()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void init()>
<com.matburt.mobileorg.Gui.Outline.OutlineListView: void collapseCurrent()> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void init()>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void init()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int read()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int read()>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$7: void onTimeSet(android.widget.TimePicker,int,int)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void access$700(com.matburt.mobileorg.Gui.Capture.DateTableRow,int,int)>
<org.apache.james.mime4j.MimeException: void <init>(java.lang.String,java.lang.Throwable)> --> <org.apache.james.mime4j.MimeException: java.lang.Throwable initCause(java.lang.Throwable)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parseLine()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: java.lang.String value()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parameter()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parseAll()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: org.apache.james.mime4j.field.contenttype.parser.Token jj_consume_token(int)>
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()> --> <org.apache.http.impl.entity.StrictContentLengthStrategy: void <init>()>
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.entity.EntitySerializer createEntitySerializer()> --> <org.apache.http.impl.entity.StrictContentLengthStrategy: void <init>()>
<com.matburt.mobileorg.Services.TimeclockService: void cancelNotification()> --> <com.matburt.mobileorg.Services.TimeclockService: void unsetAlarms()>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: java.util.ArrayList getAgendaQueryTitles(int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: com.matburt.mobileorg.Gui.Agenda.OrgAgenda getAgenda(int,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: com.matburt.mobileorg.Gui.Agenda.OrgAgenda getAgenda(int,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void saveAgendaBlock()> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: com.matburt.mobileorg.Gui.Agenda.OrgAgenda getAgenda(int,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.OrgAgenda: com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder getAgendaEntry(int,int,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: com.matburt.mobileorg.Gui.Agenda.OrgAgenda getAgenda(int,android.content.Context)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void showBlockAgenda(int)> --> <com.matburt.mobileorg.Gui.Agenda.OrgAgenda: com.matburt.mobileorg.Gui.Agenda.OrgAgenda getAgenda(int,android.content.Context)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void backup(int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: org.apache.james.mime4j.field.language.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void backup(int)>
<com.dropbox.client2.DropboxAPI$CreatedCopyRef: com.dropbox.client2.DropboxAPI$CreatedCopyRef extractFromJson(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonMap expectMap()>
<com.dropbox.client2.DropboxAPI$Entry$1: com.dropbox.client2.DropboxAPI$Entry extract(com.dropbox.client2.jsonextract.JsonThing)> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonMap expectMap()>
<com.dropbox.client2.DropboxAPI$DeltaPage: com.dropbox.client2.DropboxAPI$DeltaPage extractFromJson(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.jsonextract.JsonThing: com.dropbox.client2.jsonextract.JsonMap expectMap()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void <init>(com.actionbarsherlock.internal.widget.ActionBarView,com.actionbarsherlock.internal.widget.ActionBarView$1)> --> <com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void <init>(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isEnabled()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isEnabled()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isEnabled()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isEnabled()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean isEnabled()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void initForMenu(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean collapseActionView()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void clear()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuItemImpl)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void hideProgressBars(com.actionbarsherlock.internal.widget.IcsProgressBar,com.actionbarsherlock.internal.widget.IcsProgressBar)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void startAnimation(android.view.animation.Animation)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parameter()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parseAll()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parseLine()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void parse()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.Token jj_consume_token(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: java.lang.String value()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: org.apache.james.mime4j.field.contentdisposition.parser.Token jj_consume_token(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasureExactFormat(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean hasText()>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: int measureChildForCells(android.view.View,int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean hasText()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean needsDividerBefore()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean hasText()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean hasText()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean needsDividerAfter()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean hasText()>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropDownAdapter: boolean isEmpty()> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropDownAdapter: int getCount()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void clearListSelection()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: boolean access$502(com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView,boolean)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView: boolean access$502(com.actionbarsherlock.internal.widget.IcsListPopupWindow$DropDownListView,boolean)>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: void setupFileList(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaEntrySetting: android.content.ContentResolver getContentResolver()>
<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestSignal: boolean waitForReply()>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView$3: void <init>(com.actionbarsherlock.internal.widget.ActionBarView)>
<com.jcraft.jsch.ProxySOCKS5: void connect(com.jcraft.jsch.SocketFactory,java.lang.String,int,int)> --> <com.jcraft.jsch.ProxySOCKS5: void fill(java.io.InputStream,byte[],int)>
<com.google.gdata.util.common.base.UnicodeEscaper$2: java.lang.Object initialValue()> --> <com.google.gdata.util.common.base.UnicodeEscaper$2: char[] initialValue()>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void setupList()> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void setEmptyView(android.view.View)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void handleTrustRelationship(android.content.Context)> --> <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair genKeyPair(com.jcraft.jsch.JSch,int,int)> --> <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch)>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.KeyPairDSA: void <init>(com.jcraft.jsch.JSch)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.commonsware.cwac.merge.MergeAdapter: long getItemId(int)>
<org.apache.http.entity.mime.FormBodyPart: void addField(java.lang.String,java.lang.String)> --> <org.apache.http.entity.mime.MinimalField: void <init>(java.lang.String,java.lang.String)>
<org.apache.james.mime4j.field.address.Builder: void <clinit>()> --> <org.apache.james.mime4j.field.address.Builder: void <init>()>
<org.apache.james.mime4j.message.StorageBinaryBody: void writeTo(java.io.OutputStream)> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: java.io.InputStream getInputStream()>
<org.apache.james.mime4j.message.StorageBinaryBody: java.io.InputStream getInputStream()> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: java.io.InputStream getInputStream()>
<org.apache.james.mime4j.message.StorageTextBody: java.io.Reader getReader()> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: java.io.InputStream getInputStream()>
<org.apache.james.mime4j.message.StorageTextBody: void writeTo(java.io.OutputStream)> --> <org.apache.james.mime4j.storage.MultiReferenceStorage: java.io.InputStream getInputStream()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: void setIsActionButton(boolean)>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$ObjectKeyframe clone()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.Token: org.apache.james.mime4j.field.contentdisposition.parser.Token newToken(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setIcon(int)> --> <com.actionbarsherlock.internal.app.ActionBarImpl$TabImpl: com.actionbarsherlock.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.view.MenuItem add(int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])> --> <com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.view.MenuItem add(java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$UploadRequest putFileRequest(java.lang.String,java.io.InputStream,long,boolean,java.lang.String,com.dropbox.client2.ProgressListener)> --> <org.apache.http.entity.InputStreamEntity: void setContentEncoding(java.lang.String)>
<com.dropbox.client2.DropboxAPI: com.dropbox.client2.DropboxAPI$ChunkedUploadRequest chunkedUploadRequest(java.io.InputStream,long,com.dropbox.client2.ProgressListener,long,java.lang.String)> --> <org.apache.http.entity.InputStreamEntity: void setContentEncoding(java.lang.String)>
<com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread: void ensureRunning(com.dropbox.client2.session.AbstractSession$DBClientConnManager,int,int)> --> <com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread: void start()>
<com.matburt.mobileorg.Gui.ViewFragment: void display(java.lang.String)> --> <com.matburt.mobileorg.util.OrgNode2Html: void <init>(android.content.ContentResolver,android.content.Context)>
<com.matburt.mobileorg.Gui.ViewFragment: void displayPayload(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.util.OrgNode2Html: void <init>(android.content.ContentResolver,android.content.Context)>
<com.matburt.mobileorg.Gui.ViewFragment: void display(com.matburt.mobileorg.OrgData.OrgNode,int,android.content.ContentResolver)> --> <com.matburt.mobileorg.util.OrgNode2Html: void <init>(android.content.ContentResolver,android.content.Context)>
<org.apache.http.entity.EntityTemplate: void writeTo(java.io.OutputStream)> --> <org.apache.http.entity.ContentProducer: void writeTo(java.io.OutputStream)>
<org.apache.http.protocol.SyncBasicHttpContext: java.lang.Object removeAttribute(java.lang.String)> --> <org.apache.http.protocol.BasicHttpContext: java.lang.Object removeAttribute(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarContainer: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineFrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>
<oauth.signpost.signature.HmacSha1MessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)> --> <oauth.signpost.signature.SignatureBaseString: void <init>(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: org.apache.james.mime4j.field.contentdisposition.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveStringLiteralDfa0_2()>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa2_0(long,long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStopStringLiteralDfa_0(int,long)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjMoveStringLiteralDfa1_0(long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStopStringLiteralDfa_0(int,long)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: int jjStopStringLiteralDfa_0(int,long)>
<org.apache.http.impl.entity.LaxContentLengthStrategy: long determineLength(org.apache.http.HttpMessage)> --> <org.apache.http.HttpMessage: org.apache.http.Header[] getHeaders(java.lang.String)>
<com.twofortyfouram.locale.MarketActivity: android.app.Dialog onCreateDialog(int)> --> <com.twofortyfouram.locale.PackageUtilities: java.lang.String getCompatiblePackage(android.content.pm.PackageManager,java.lang.String)>
<com.twofortyfouram.locale.SharedResources: java.lang.CharSequence getTextResource(android.content.pm.PackageManager,java.lang.String,java.lang.String)> --> <com.twofortyfouram.locale.PackageUtilities: java.lang.String getCompatiblePackage(android.content.pm.PackageManager,java.lang.String)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void archiveNode(boolean)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit archiveNodeToSibling(android.content.ContentResolver)>
<org.apache.http.entity.mime.HttpMultipart: void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean)> --> <org.apache.http.entity.mime.HttpMultipart: void writeBytes(org.apache.james.mime4j.util.ByteSequence,java.io.OutputStream)>
<com.dropbox.client2.session.AbstractSession$2: org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy()> --> <com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy: void <init>(com.dropbox.client2.session.AbstractSession$1)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.String toString()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: java.lang.String toString()>
<org.apache.james.mime4j.parser.MimeEntity: void createMimeStream()> --> <org.apache.james.mime4j.io.MimeBoundaryInputStream: void <init>(org.apache.james.mime4j.io.BufferedLineReaderInputStream,java.lang.String)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean performExpand()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setTabSelected(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setTabSelected(int)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void selectTab(com.actionbarsherlock.app.ActionBar$Tab)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void setTabSelected(int)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: boolean performExpand()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void performCollapse()> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void parse()> --> <org.apache.james.mime4j.field.mimeversion.parser.ParseException: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void setTarget(java.lang.Object)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void setTarget(java.lang.Object)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: int getWidth()>
<com.commonsware.cwac.merge.MergeAdapter: void setActive(android.view.View,boolean)> --> <com.commonsware.cwac.merge.MergeAdapter$PieceStateRoster: void setActive(android.view.View,boolean)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: android.os.Parcelable access$100(com.actionbarsherlock.internal.widget.IcsAdapterView)> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.os.Parcelable onSaveInstanceState()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: android.os.Parcelable onSaveInstanceState()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.os.Parcelable onSaveInstanceState()>
<com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.SftpATTRS: int length()>
<com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.SftpATTRS: int length()>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void show()> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void setInputMethodMode(int)>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow$ListSelectorHider: void run()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void clearListSelection()>
<com.actionbarsherlock.internal.widget.IcsListPopupWindow: void show()> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void clearListSelection()>
<org.apache.james.mime4j.parser.AbstractEntity: void warn(org.apache.james.mime4j.parser.Event)> --> <org.apache.james.mime4j.parser.AbstractEntity: java.lang.String message(org.apache.james.mime4j.parser.Event)>
<org.apache.james.mime4j.parser.AbstractEntity: void debug(org.apache.james.mime4j.parser.Event)> --> <org.apache.james.mime4j.parser.AbstractEntity: java.lang.String message(org.apache.james.mime4j.parser.Event)>
<com.actionbarsherlock.internal.app.ActionBarImpl$1: void onAnimationEnd(com.actionbarsherlock.internal.nineoldandroids.animation.Animator)> --> <com.actionbarsherlock.internal.app.ActionBarImpl: void completeDeferredDestroyActionMode()>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendRENAME(byte[],byte[])>
<org.apache.james.mime4j.util.ByteSequence: void <clinit>()> --> <org.apache.james.mime4j.util.EmptyByteSequence: void <init>()>
<org.apache.james.mime4j.util.CharsetUtil: void <clinit>()> --> <org.apache.james.mime4j.util.CharsetUtil$Charset: java.lang.String[] access$300(org.apache.james.mime4j.util.CharsetUtil$Charset)>
<com.actionbarsherlock.internal.ActionBarSherlockNative: void initActionBar()> --> <com.actionbarsherlock.internal.app.ActionBarWrapper: void <init>(android.app.Activity)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void start()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OverflowPopup: boolean tryShow()>
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[],int,int)> --> <org.apache.http.impl.io.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParser: void <init>(java.io.InputStream,java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet)>
<org.apache.james.mime4j.field.ContentDispositionField: void parse()> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: java.util.List getParamNames()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: java.lang.String GetImage()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: java.lang.String GetImage()>
<com.matburt.mobileorg.Gui.CertificateConflictActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.CertificateConflictActivity: void setContentView(int)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void invalidateDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void invalidate(int,int,int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void run()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void changeMenuMode()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void connect()> --> <com.jcraft.jsch.Session: void setPassword(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: int getOrdering(int)>
<com.jcraft.jsch.jcraft.Compression: void init(int,int)> --> <com.jcraft.jzlib.ZStream: int inflateInit()>
<com.jcraft.jsch.ChannelSftp: void setFilenameEncoding(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: int getServerVersion()>
<org.apache.james.mime4j.message.Entity: org.apache.james.mime4j.message.Body removeBody()> --> <org.apache.james.mime4j.message.Body: void setParent(org.apache.james.mime4j.message.Entity)>
<org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body)> --> <org.apache.james.mime4j.message.Body: void setParent(org.apache.james.mime4j.message.Entity)>
<org.apache.http.HttpHost: java.lang.String toString()> --> <org.apache.http.HttpHost: java.lang.String toURI()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveStringLiteralDfa0_1()> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_1(int,int)>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfaWithStates_1(int,int,int)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjMoveNfa_1(int,int)>
<com.actionbarsherlock.view.MenuInflater$MenuState: void setItem(com.actionbarsherlock.view.MenuItem)> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setActionView(int)>
<com.actionbarsherlock.internal.widget.IcsAdapterView: void onDetachedFromWindow()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: boolean removeCallbacks(java.lang.Runnable)>
<com.jcraft.jsch.Session: com.jcraft.jsch.Channel openChannel(java.lang.String)> --> <com.jcraft.jsch.Channel: void init()>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Channel: void init()>
<com.actionbarsherlock.app.SherlockDialogFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> --> <com.actionbarsherlock.app.SherlockDialogFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)>
<org.apache.james.mime4j.message.MessageBuilder: void startMessage()> --> <org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body)>
<org.apache.james.mime4j.message.MessageBuilder: void startMultipart(org.apache.james.mime4j.descriptor.BodyDescriptor)> --> <org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body)>
<org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body,java.lang.String,java.util.Map)> --> <org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body)>
<org.apache.james.mime4j.message.Entity: void <init>(org.apache.james.mime4j.message.Entity)> --> <org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body)>
<org.apache.james.mime4j.message.MessageBuilder: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.message.Entity: void setBody(org.apache.james.mime4j.message.Body)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.GSSContext: boolean isEstablished()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.lang.String testConnection(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)> --> <com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.lang.String getFileName()>
<com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: int measureContentWidth()> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<com.actionbarsherlock.internal.nineoldandroids.animation.FloatKeyframeSet: float getFloatValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$FloatKeyframe: float getFloatValue()>
<org.apache.http.impl.SocketHttpClientConnection: org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.SocketOutputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>
<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams)> --> <org.apache.http.impl.io.SocketOutputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void symlink(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>
<com.jcraft.jsch.ChannelSftp: void rename(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: boolean isPattern(java.lang.String)>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Identity: boolean setPassphrase(byte[])>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Identity: boolean setPassphrase(byte[])>
<com.jcraft.jsch.JSch: void addIdentity(com.jcraft.jsch.Identity,byte[])> --> <com.jcraft.jsch.Identity: boolean setPassphrase(byte[])>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.InputStream)> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void <init>(java.io.InputStream,java.lang.String)>
<com.dropbox.client2.RESTUtility: void updateClientProxy(org.apache.http.client.HttpClient,com.dropbox.client2.session.Session)> --> <com.dropbox.client2.session.Session: com.dropbox.client2.session.Session$ProxyInfo getProxyInfo()>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.RequestAgentForwarding: void setReply(boolean)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.mimeversion.parser.Token: void <init>()>
<org.apache.james.mime4j.field.mimeversion.parser.Token: org.apache.james.mime4j.field.mimeversion.parser.Token newToken(int)> --> <org.apache.james.mime4j.field.mimeversion.parser.Token: void <init>()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void <init>(org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager)> --> <org.apache.james.mime4j.field.mimeversion.parser.Token: void <init>()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.Token: void <init>()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void ReInit(org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager)> --> <org.apache.james.mime4j.field.mimeversion.parser.Token: void <init>()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.mimeversion.parser.Token: void <init>()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.mimeversion.parser.Token: void <init>()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setSplitWhenNarrow(boolean)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void addAgenda(com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder)> --> <com.matburt.mobileorg.Gui.Outline.OutlineAdapter: void setLevelIndentation(boolean)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void save()> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getOlpId(android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getNodeId(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getOlpId(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerEdit: void <init>(long,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getOlpId(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void <init>(long,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getOlpId(android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.ViewActivity: void viewNode(int)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getOlpId(android.content.ContentResolver)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setUpChild(android.view.View)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryLoader: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel: java.lang.String access$400(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.actionbarsherlock.widget.ActivityChooserModel$HistoryPersister: void start()> --> <com.actionbarsherlock.widget.ActivityChooserModel: java.lang.String access$400(com.actionbarsherlock.widget.ActivityChooserModel)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void prepareDateImage()> --> <com.matburt.mobileorg.OrgData.OrgNodeTimeDate$TYPE: boolean equals(java.lang.Object)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineListView: void collapseCurrent()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: void findExpandedIndex()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuItemImpl getExpandedItem()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int positionChild(android.view.View,int,int,int)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.DateTimeField date(java.util.Date)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.DateTimeField date0(java.lang.String,java.util.Date,java.util.TimeZone)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.DateTimeField date(java.lang.String,java.util.Date)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.DateTimeField date0(java.lang.String,java.util.Date,java.util.TimeZone)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.DateTimeField date(java.lang.String,java.util.Date,java.util.TimeZone)> --> <org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.DateTimeField date0(java.lang.String,java.util.Date,java.util.TimeZone)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: boolean login()> --> <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: org.apache.http.HttpResponse executeRequest(org.apache.http.client.methods.HttpUriRequest)> --> <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void ping_u1_url(java.lang.String)> --> <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void getBaseUser()> --> <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: java.util.ArrayList getDirectoryList(java.lang.String)> --> <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setTitle(java.lang.CharSequence)>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <com.dropbox.client2.session.AbstractSession$2: void <init>(com.dropbox.client2.session.AbstractSession,org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.parser.MimeTokenStream: void doParse(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.parser.EntityStateMachine: int getState()>
<org.apache.james.mime4j.parser.MimeTokenStream: int next()> --> <org.apache.james.mime4j.parser.EntityStateMachine: int getState()>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineLinearLayout: android.view.View findViewById(int)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()> --> <org.apache.james.mime4j.util.MimeUtil: boolean isQuotedPrintableEncoded(java.lang.String)>
<org.apache.james.mime4j.message.MessageWriter: java.io.OutputStream encodeStream(java.io.OutputStream,java.lang.String,boolean)> --> <org.apache.james.mime4j.util.MimeUtil: boolean isQuotedPrintableEncoded(java.lang.String)>
<org.apache.james.mime4j.parser.MimeTokenStream: java.io.InputStream getDecodedInputStream()> --> <org.apache.james.mime4j.util.MimeUtil: boolean isQuotedPrintableEncoded(java.lang.String)>
<org.apache.james.mime4j.message.SimpleContentHandler: void body(org.apache.james.mime4j.descriptor.BodyDescriptor,java.io.InputStream)> --> <org.apache.james.mime4j.util.MimeUtil: boolean isQuotedPrintableEncoded(java.lang.String)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAddrSpec(org.apache.james.mime4j.field.address.parser.ASTaddr_spec)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAddrSpec(org.apache.james.mime4j.field.address.DomainList,org.apache.james.mime4j.field.address.parser.ASTaddr_spec)>
<org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAngleAddr(org.apache.james.mime4j.field.address.parser.ASTangle_addr)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Mailbox buildAddrSpec(org.apache.james.mime4j.field.address.DomainList,org.apache.james.mime4j.field.address.parser.ASTaddr_spec)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(java.lang.String)> --> <org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])>
<com.matburt.mobileorg.OrgData.OrgFileParser: void cloneChildren(com.matburt.mobileorg.OrgData.OrgNode,com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: void <init>(com.matburt.mobileorg.OrgData.OrgNode)>
<org.apache.http.impl.DefaultHttpServerConnection: java.lang.String toString()> --> <org.apache.http.impl.DefaultHttpServerConnection: int getRemotePort()>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)> --> <org.apache.http.message.BasicHeaderValueFormatter: int estimateParametersLen(org.apache.http.NameValuePair[])>
<com.jcraft.jsch.KeyPairDSA: void generate(int)> --> <com.jcraft.jsch.KeyPairGenDSA: byte[] getP()>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.internal.nineoldandroids.widget.NineHorizontalScrollView: void onConfigurationChanged(android.content.res.Configuration)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow$5: void onTimeSet(android.widget.TimePicker,int,int)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void access$500(com.matburt.mobileorg.Gui.Capture.DateTableRow,int,int)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setUpChild(android.view.View)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: int getBeginLine()>
<oauth.signpost.OAuth: oauth.signpost.http.HttpParameters decodeForm(java.lang.String)> --> <oauth.signpost.http.HttpParameters: java.lang.String put(java.lang.String,java.lang.String)>
<oauth.signpost.OAuth: oauth.signpost.http.HttpParameters oauthHeaderToParamsMap(java.lang.String)> --> <oauth.signpost.http.HttpParameters: java.lang.String put(java.lang.String,java.lang.String)>
<oauth.signpost.http.HttpParameters: java.lang.String putNull(java.lang.String,java.lang.String)> --> <oauth.signpost.http.HttpParameters: java.lang.String put(java.lang.String,java.lang.String)>
<org.apache.http.impl.entity.EntityDeserializer: org.apache.http.entity.BasicHttpEntity doDeserialize(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpMessage)> --> <org.apache.http.entity.BasicHttpEntity: void setContentEncoding(org.apache.http.Header)>
<com.jcraft.jsch.HostKey: java.lang.String getKey()> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.KnownHosts$HashedHostKey: void hash()> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.HostKey: java.lang.String getType()> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.SftpATTRS: com.jcraft.jsch.SftpATTRS getATTR(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.IdentityFile: void <init>(java.lang.String,byte[],byte[],com.jcraft.jsch.JSch)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.Session: java.lang.String getServerVersion()> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.KeyPair: com.jcraft.jsch.KeyPair load(com.jcraft.jsch.JSch,java.lang.String,java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_local(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.Util: java.lang.String quote(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.Util: java.lang.String unquote(java.lang.String)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.Session: com.jcraft.jsch.Buffer read(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.jcraft.jsch.Session: java.lang.String getClientVersion()> --> <com.jcraft.jsch.Util: java.lang.String byte2str(byte[])>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void init(com.matburt.mobileorg.Gui.Capture.DatesFragment,android.widget.TableLayout,com.matburt.mobileorg.OrgData.OrgNodeTimeDate)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: void prepareButtons()>
<org.apache.james.mime4j.field.address.AddressList: org.apache.james.mime4j.field.address.AddressList parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Builder getInstance()>
<org.apache.james.mime4j.field.address.Address: org.apache.james.mime4j.field.address.Address parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Builder getInstance()>
<org.apache.james.mime4j.field.address.Mailbox: org.apache.james.mime4j.field.address.Mailbox parse(java.lang.String)> --> <org.apache.james.mime4j.field.address.Builder: org.apache.james.mime4j.field.address.Builder getInstance()>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: android.widget.FrameLayout access$800(com.actionbarsherlock.widget.ActivityChooserView)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: boolean onLongClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView: android.widget.FrameLayout access$800(com.actionbarsherlock.widget.ActivityChooserView)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: void runExpandableOutline(long)>
<org.apache.james.mime4j.message.MessageWriter: void writeMultipart(org.apache.james.mime4j.message.Multipart,java.io.OutputStream)> --> <org.apache.james.mime4j.message.MessageWriter: org.apache.james.mime4j.util.ByteSequence getBoundary(org.apache.james.mime4j.field.ContentTypeField)>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int read(byte[],int,int)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int fillBuffer()>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int read()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int fillBuffer()>
<org.apache.james.mime4j.io.BufferedLineReaderInputStream: int readLine(org.apache.james.mime4j.util.ByteArrayBuffer)> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int fillBuffer()>
<org.apache.james.mime4j.io.MimeBoundaryInputStream: int fillBuffer()> --> <org.apache.james.mime4j.io.BufferedLineReaderInputStream: int fillBuffer()>
<com.dropbox.client2.session.AbstractSession: org.apache.http.client.HttpClient getHttpClient()> --> <com.dropbox.client2.session.AbstractSession$DBClientConnManager: void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void addMenuPresenter(com.actionbarsherlock.internal.view.menu.MenuPresenter)>
<com.actionbarsherlock.internal.widget.ActionBarView: void configPresenters(com.actionbarsherlock.internal.view.menu.MenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void addMenuPresenter(com.actionbarsherlock.internal.view.menu.MenuPresenter)>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper: void <init>(android.content.Context,com.actionbarsherlock.internal.view.menu.MenuBuilder,android.view.View,boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void addMenuPresenter(com.actionbarsherlock.internal.view.menu.MenuPresenter)>
<com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <org.json.JSONObject: void <init>()>
<com.matburt.mobileorg.Gui.TabsAdapter: void addTab(com.actionbarsherlock.app.ActionBar$Tab,java.lang.Class,android.os.Bundle)> --> <com.actionbarsherlock.app.ActionBar$Tab: com.actionbarsherlock.app.ActionBar$Tab setTag(java.lang.Object)>
<org.apache.james.mime4j.field.language.parser.SimpleCharStream: void FillBuff()> --> <org.apache.james.mime4j.field.language.parser.SimpleCharStream: void ExpandBuff(boolean)>
<org.apache.http.impl.EnglishReasonPhraseCatalog: void <clinit>()> --> <org.apache.http.impl.EnglishReasonPhraseCatalog: void setReason(int,java.lang.String)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
<com.actionbarsherlock.internal.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: int getCount()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter: boolean flagActionItems()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
<com.actionbarsherlock.internal.view.menu.MenuPopupHelper$MenuAdapter: com.actionbarsherlock.internal.view.menu.MenuItemImpl getItem(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
<org.apache.james.mime4j.field.MailboxField: org.apache.james.mime4j.field.ParseException getParseException()> --> <org.apache.james.mime4j.field.MailboxField: org.apache.james.mime4j.field.address.parser.ParseException getParseException()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void init()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: void setEvaluator(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setEvaluator(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet: void setEvaluator(com.actionbarsherlock.internal.nineoldandroids.animation.TypeEvaluator)>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder clone()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.Object clone()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder clone()>
<com.jcraft.jsch.ChannelSession: void start()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.Channel$1: void flush()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelSftp: void sendREAD(byte[],long,int,com.jcraft.jsch.ChannelSftp$RequestQueue)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelSftp: int sendWRITE(byte[],long,byte[],int,int)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelSftp: void sendINIT()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelSftp: void sendMKDIR(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[],byte[])> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelDirectTCPIP: void start()> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelSftp: void sendOPEN(byte[],int)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelSftp: void sendSETSTAT(byte[],com.jcraft.jsch.SftpATTRS)> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<com.jcraft.jsch.ChannelSftp: void sendPacketPath(byte,byte[])> --> <com.jcraft.jsch.Session: void write(com.jcraft.jsch.Packet,com.jcraft.jsch.Channel,int)>
<org.apache.james.mime4j.storage.ThresholdStorageProvider$ThresholdStorageOutputStream: void write0(byte[],int,int)> --> <org.apache.james.mime4j.storage.ThresholdStorageProvider: org.apache.james.mime4j.storage.StorageProvider access$100(org.apache.james.mime4j.storage.ThresholdStorageProvider)>
<com.actionbarsherlock.app.SherlockListFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> --> <com.actionbarsherlock.app.SherlockListFragment: void onCreateOptionsMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.view.MenuInflater)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onMeasureExactFormat(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeOutAnimation()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuView: boolean hasDividerBeforeChildAt(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.View getChildAt(int)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: com.actionbarsherlock.internal.nineoldandroids.animation.Animator makeInAnimation()> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: android.view.View getChildAt(int)>
<org.apache.http.message.AbstractHttpMessage: org.apache.http.Header[] getHeaders(java.lang.String)> --> <org.apache.http.message.HeaderGroup: org.apache.http.Header[] getHeaders(java.lang.String)>
<org.apache.http.message.HeaderGroup: org.apache.http.Header getCondensedHeader(java.lang.String)> --> <org.apache.http.message.HeaderGroup: org.apache.http.Header[] getHeaders(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin: void <init>(com.actionbarsherlock.internal.widget.IcsAbsSpinner)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$RecycleBin: void <init>(com.actionbarsherlock.internal.widget.IcsAbsSpinner)>
<com.jcraft.jsch.jgss.GSSContextKrb5: void create(java.lang.String,java.lang.String)> --> <org.ietf.jgss.GSSContext: void requestMutualAuth(boolean)>
<com.jcraft.jsch.ChannelSftp$2: int read()> --> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[])> --> <com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)>
<com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void <init>(android.content.Context)> --> <com.actionbarsherlock.internal.widget.ActionBarView$HomeView: void <init>(android.content.Context,android.util.AttributeSet)>
<com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer: void handleTrustRelationship(android.content.Context)> --> <com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer$IntelligentX509TrustManager: void <init>(com.matburt.mobileorg.Synchronizers.WebDAVSynchronizer,android.content.Context)>
<org.apache.james.mime4j.field.ContentTypeField: void parse()> --> <org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: java.lang.String getMessage()>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveStringLiteralDfa0_0()> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_0(int,int)>
<org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjStartNfaWithStates_0(int,int,int)> --> <org.apache.james.mime4j.field.language.parser.ContentLanguageParserTokenManager: int jjMoveNfa_0(int,int)>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: android.os.Parcelable onSaveInstanceState()> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner$SavedState: void <init>(android.os.Parcelable)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setMax(int)>
<com.actionbarsherlock.internal.widget.ActionBarView: void initProgress()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void setMax(int)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings: boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void saveAgendaBlock()>
<org.apache.james.mime4j.field.address.Mailbox: java.lang.String getEncodedString()> --> <org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeAddressLocalPart(java.lang.String)>
<com.actionbarsherlock.view.MenuInflater: void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.MenuInflater$MenuState: void readItem(android.util.AttributeSet)>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])>
<com.matburt.mobileorg.Settings.SettingsActivity: void onPause()> --> <com.actionbarsherlock.app.SherlockPreferenceActivity: void onPause()>
<com.actionbarsherlock.view.MenuInflater$MenuState: void readItem(android.util.AttributeSet)> --> <com.actionbarsherlock.view.MenuInflater: java.lang.Object[] access$300(com.actionbarsherlock.view.MenuInflater)>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuView: void setAlpha(float)>
<com.actionbarsherlock.internal.widget.FakeDialogPhoneWindow: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.FakeDialogPhoneWindow: android.content.Context getContext()>
<com.matburt.mobileorg.Services.SyncService$1: void start()> --> <com.matburt.mobileorg.Services.SyncService: boolean access$002(com.matburt.mobileorg.Services.SyncService,boolean)>
<com.matburt.mobileorg.Gui.Capture.TagsFragment: void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.Menu: com.actionbarsherlock.view.MenuItem findItem(int)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onPrepareOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.Menu: com.actionbarsherlock.view.MenuItem findItem(int)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.Menu: com.actionbarsherlock.view.MenuItem findItem(int)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu)> --> <com.actionbarsherlock.view.Menu: com.actionbarsherlock.view.MenuItem findItem(int)>
<com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: void setShowDefaultActivity(boolean,boolean)>
<com.matburt.mobileorg.Services.CalendarWrapper: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Services.CalendarComptabilityWrappers: void <init>(android.content.Context)>
<com.matburt.mobileorg.Services.CalendarWrapper: java.lang.CharSequence[] getCalendars(android.content.Context)> --> <com.matburt.mobileorg.Services.CalendarComptabilityWrappers: void <init>(android.content.Context)>
<com.twofortyfouram.locale.MarketActivity$2: void onClick(android.content.DialogInterface,int)> --> <com.twofortyfouram.locale.MarketActivity: void startActivity(android.content.Intent)>
<com.twofortyfouram.locale.MarketActivity$1: void onClick(android.content.DialogInterface,int)> --> <com.twofortyfouram.locale.MarketActivity: void startActivity(android.content.Intent)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)> --> <org.apache.http.util.ByteArrayBuffer: void clear()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()> --> <org.apache.http.util.ByteArrayBuffer: void clear()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void onResume()> --> <com.actionbarsherlock.app.SherlockFragment: void onResume()>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void onResume()> --> <com.actionbarsherlock.app.SherlockFragment: void onResume()>
<oauth.signpost.AbstractOAuthConsumer: oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.signature.OAuthMessageSigner: java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void update()> --> <com.actionbarsherlock.internal.widget.CapitalizingTextView: void setVisibility(int)>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: int access$100(com.matburt.mobileorg.Gui.Agenda.AgendaSettings)>
<com.actionbarsherlock.internal.widget.ActionBarView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.content.Context getContext()>
<com.actionbarsherlock.internal.widget.ActionBarView: void initTitle()> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.content.Context getContext()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.content.Context getContext()>
<com.matburt.mobileorg.Gui.Agenda.AgendaSettings$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Agenda.AgendaSettings: void access$000(com.matburt.mobileorg.Gui.Agenda.AgendaSettings)>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void layout(int,int,int,int)>
<com.actionbarsherlock.internal.view.menu.MenuItemWrapper: com.actionbarsherlock.view.SubMenu getSubMenu()> --> <com.actionbarsherlock.internal.view.menu.SubMenuWrapper: void <init>(android.view.SubMenu)>
<com.actionbarsherlock.internal.view.menu.MenuWrapper: com.actionbarsherlock.view.SubMenu addInternal(android.view.SubMenu)> --> <com.actionbarsherlock.internal.view.menu.SubMenuWrapper: void <init>(android.view.SubMenu)>
<com.actionbarsherlock.internal.view.ActionProviderWrapper: void onPrepareSubMenu(android.view.SubMenu)> --> <com.actionbarsherlock.internal.view.menu.SubMenuWrapper: void <init>(android.view.SubMenu)>
<oauth.signpost.AbstractOAuthConsumer: java.lang.String sign(java.lang.String)> --> <oauth.signpost.basic.UrlStringRequestAdapter: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.view.MenuItem add(int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenu: com.actionbarsherlock.view.MenuItem add(int,int,int,int)>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void initialize(com.actionbarsherlock.internal.view.menu.MenuItemImpl,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItemView: void setIcon(android.graphics.drawable.Drawable)>
<com.dropbox.client2.exception.DropboxFileSizeException: void <init>(java.lang.String)> --> <com.dropbox.client2.exception.DropboxException: void <init>(java.lang.String)>
<com.dropbox.client2.exception.DropboxIOException: void <init>(java.lang.String)> --> <com.dropbox.client2.exception.DropboxException: void <init>(java.lang.String)>
<com.dropbox.client2.exception.DropboxUnlinkedException: void <init>(java.lang.String)> --> <com.dropbox.client2.exception.DropboxException: void <init>(java.lang.String)>
<com.dropbox.client2.exception.DropboxParseException: void <init>(java.io.BufferedReader)> --> <com.dropbox.client2.exception.DropboxException: void <init>(java.lang.String)>
<com.dropbox.client2.exception.DropboxParseException: void <init>(java.lang.String)> --> <com.dropbox.client2.exception.DropboxException: void <init>(java.lang.String)>
<com.dropbox.client2.DropboxAPI$DropboxInputStream: void <init>(org.apache.http.client.methods.HttpUriRequest,org.apache.http.HttpResponse)> --> <com.dropbox.client2.exception.DropboxException: void <init>(java.lang.String)>
<com.actionbarsherlock.internal.widget.ActionBarView: void <init>(android.content.Context,android.util.AttributeSet)> --> <com.actionbarsherlock.internal.widget.ActionBarView: android.content.res.Resources getResources()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: java.lang.String getScheduled()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: java.lang.String toString()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: java.lang.String getTimestamp()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: java.lang.String toString()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: java.lang.String getDeadline()> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow: java.lang.String toString()>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void init(java.io.OutputStream,int,org.apache.http.params.HttpParams)> --> <org.apache.http.util.ByteArrayBuffer: void <init>(int)>
<org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)> --> <org.apache.http.util.ByteArrayBuffer: void <init>(int)>
<org.apache.http.impl.io.AbstractSessionInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)> --> <org.apache.http.util.ByteArrayBuffer: void <init>(int)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void <init>(com.actionbarsherlock.internal.widget.IcsSpinner,android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup$1: void <init>(com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup,com.actionbarsherlock.internal.widget.IcsSpinner)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard getWizard(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE,com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.jcraft.jsch.jce.DH: byte[] getE()> --> <javax.crypto.KeyAgreement: void init(java.security.Key)>
<com.jcraft.jsch.ChannelDirectTCPIP: void start()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void run()>
<org.apache.james.mime4j.field.DateTimeField$1: org.apache.james.mime4j.field.ParsedField parse(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)> --> <org.apache.james.mime4j.field.DateTimeField: void <init>(java.lang.String,java.lang.String,org.apache.james.mime4j.util.ByteSequence)>
<com.dropbox.client2.DropboxAPI$DeltaPage: com.dropbox.client2.DropboxAPI$DeltaPage extractFromJson(com.dropbox.client2.jsonextract.JsonThing,com.dropbox.client2.jsonextract.JsonExtractor)> --> <com.dropbox.client2.DropboxAPI$DeltaPage: void <init>(boolean,java.util.List,java.lang.String,boolean)>
<org.apache.james.mime4j.field.address.parser.AddressListParser: org.apache.james.mime4j.field.address.parser.ASTaddress parseAddress()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void parseAddress0()>
<com.dropbox.client2.session.WebAuthSession: java.lang.String retrieveWebAccessToken(com.dropbox.client2.session.RequestTokenPair)> --> <com.dropbox.client2.session.WebAuthSession: java.util.Map setUpToken(java.lang.String)>
<com.dropbox.client2.session.WebAuthSession: com.dropbox.client2.session.WebAuthSession$WebAuthInfo getAuthInfo(java.lang.String)> --> <com.dropbox.client2.session.WebAuthSession: java.util.Map setUpToken(java.lang.String)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void setAdapter(android.widget.SpinnerAdapter)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropDownAdapter: void <init>(android.widget.SpinnerAdapter)>
<org.apache.http.entity.mime.MinimalField: org.apache.james.mime4j.util.ByteSequence getRaw()> --> <org.apache.http.entity.mime.MinimalField: java.lang.String toString()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: java.lang.String GetImage()>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: org.apache.james.mime4j.field.contenttype.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: java.lang.String GetImage()>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int,int)> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void <init>(java.io.Reader,int,int,int)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: void installDecor()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setWindowCallback(com.actionbarsherlock.view.Window$Callback)>
<org.apache.http.impl.HttpConnectionMetricsImpl: java.lang.Object getMetric(java.lang.String)> --> <org.apache.http.io.HttpTransportMetrics: long getBytesTransferred()>
<org.apache.http.impl.HttpConnectionMetricsImpl: long getReceivedBytesCount()> --> <org.apache.http.io.HttpTransportMetrics: long getBytesTransferred()>
<org.apache.http.impl.HttpConnectionMetricsImpl: long getSentBytesCount()> --> <org.apache.http.io.HttpTransportMetrics: long getBytesTransferred()>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.OrgData.OrgNodePayload getOrgNodePayload()>
<com.matburt.mobileorg.Gui.Capture.PayloadFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityController: com.matburt.mobileorg.OrgData.OrgNodePayload getOrgNodePayload()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: void animateValue(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: void setAnimatedValue(java.lang.Object)>
<com.dropbox.client2.jsonextract.JsonList$WrapperIterator: com.dropbox.client2.jsonextract.JsonThing next()> --> <com.dropbox.client2.jsonextract.JsonList: java.lang.String access$000(java.lang.String,int)>
<com.jcraft.jsch.ChannelSubsystem: void start()> --> <com.jcraft.jsch.RequestSubsystem: void <init>()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])> --> <com.actionbarsherlock.view.MenuItem: com.actionbarsherlock.view.MenuItem setIntent(android.content.Intent)>
<org.apache.james.mime4j.field.AbstractField: void <clinit>()> --> <org.apache.james.mime4j.field.DefaultFieldParser: void <init>()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: int getPaddingLeft()>
<com.matburt.mobileorg.Gui.SearchActivity: void doSearch(java.lang.String)> --> <com.matburt.mobileorg.Gui.SearchActivity: com.actionbarsherlock.app.ActionBar getSupportActionBar()>
<com.actionbarsherlock.widget.ActivityChooserView$3: void onChanged()> --> <com.actionbarsherlock.widget.ActivityChooserView: void access$400(com.actionbarsherlock.widget.ActivityChooserView)>
<org.apache.james.mime4j.parser.MimeStreamParser: void parse(java.io.InputStream)> --> <org.apache.james.mime4j.parser.ContentHandler: void endMultipart()>
<com.matburt.mobileorg.Settings.SettingsActivity: void populateSyncSources()> --> <com.matburt.mobileorg.Settings.SettingsActivity: java.util.List getSynchronizerPlugins(android.content.Context)>
<com.matburt.mobileorg.Settings.SynchronizerPreferences$1: boolean onPreferenceClick(android.preference.Preference)> --> <com.matburt.mobileorg.Settings.SynchronizerPreferences: android.app.Activity access$000(com.matburt.mobileorg.Settings.SynchronizerPreferences)>
<com.matburt.mobileorg.Gui.Capture.HeadingFragment: void onActivityCreated(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.HeadingFragment: void updateDisplay(com.matburt.mobileorg.OrgData.OrgNode)>
<com.matburt.mobileorg.Gui.ViewActivity: void onStart()> --> <com.matburt.mobileorg.util.PreferenceUtils: int getLevelOfRecursion()>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: void requestLayout()>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: java.lang.String getActionViewStatesKey()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.lang.String getActionViewStatesKey()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.lang.String getActionViewStatesKey()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: java.lang.String getActionViewStatesKey()>
<org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream)> --> <org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream,int,byte[])>
<org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream,int)> --> <org.apache.james.mime4j.codec.Base64OutputStream: void <init>(java.io.OutputStream,int,byte[])>
<com.actionbarsherlock.internal.widget.IcsAdapterView$AdapterDataSetObserver: void onInvalidated()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView: android.os.Parcelable access$100(com.actionbarsherlock.internal.widget.IcsAdapterView)>
<com.jcraft.jsch.ChannelSftp: void cd(java.lang.String)> --> <com.jcraft.jsch.SftpATTRS: int getFlags()>
<com.jcraft.jsch.Channel$MyPipedInputStream: void updateReadSide()> --> <com.jcraft.jsch.Channel$MyPipedInputStream: int available()>
<com.actionbarsherlock.internal.view.menu.ActionMenu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,com.actionbarsherlock.view.MenuItem[])> --> <com.actionbarsherlock.internal.view.menu.ActionMenu: void removeGroup(int)>
<org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.protocol.HttpRequestHandlerResolver: org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String)>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void <init>(long,android.content.ContentResolver,java.lang.String)> --> <com.matburt.mobileorg.Gui.Capture.EditActivityControllerAddChild: void setupTodoAndParentId(long)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void access$000(com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.SSHWizard: void loginSSH()>
<org.apache.http.params.DefaultedHttpParams: boolean removeParameter(java.lang.String)> --> <org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)>
<com.dropbox.client2.RESTUtility: void updateClientProxy(org.apache.http.client.HttpClient,com.dropbox.client2.session.Session)> --> <org.apache.http.params.HttpParams: boolean removeParameter(java.lang.String)>
<org.apache.http.util.ExceptionUtils: void <clinit>()> --> <org.apache.http.util.ExceptionUtils: java.lang.reflect.Method getInitCauseMethod()>
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parse()> --> <org.apache.http.HttpMessage: void setHeaders(org.apache.http.Header[])>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStartNfa_1(int,long)> --> <org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: int jjStopStringLiteralDfa_1(int,long)>
<com.matburt.mobileorg.Gui.Outline.OutlineAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void setup(com.matburt.mobileorg.OrgData.OrgNode,boolean,com.matburt.mobileorg.Gui.Theme.DefaultTheme,android.content.ContentResolver)>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorageOutputStream: void <init>(org.apache.james.mime4j.storage.StorageOutputStream,java.lang.String,javax.crypto.spec.SecretKeySpec)> --> <javax.crypto.Cipher: void init(int,java.security.Key)>
<org.apache.james.mime4j.storage.CipherStorageProvider$CipherStorage: java.io.InputStream getInputStream()> --> <javax.crypto.Cipher: void init(int,java.security.Key)>
<com.jcraft.jsch.jce.ARCFOUR128: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key)>
<com.jcraft.jsch.jce.ARCFOUR256: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key)>
<com.jcraft.jsch.jce.ARCFOUR: void init(int,byte[],byte[])> --> <javax.crypto.Cipher: void init(int,java.security.Key)>
<com.jcraft.jsch.Channel$1: void close()> --> <com.jcraft.jsch.Channel$1: void init()>
<com.jcraft.jsch.Channel$1: void write(byte[],int,int)> --> <com.jcraft.jsch.Channel$1: void init()>
<com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier: void start()> --> <com.actionbarsherlock.internal.widget.IcsAdapterView$SelectionNotifier: void run()>
<org.apache.james.mime4j.field.address.parser.AddressListParser: void angle_addr()> --> <org.apache.james.mime4j.field.address.parser.AddressListParser: void route()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setDisplayOptions(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void requestLayout()>
<com.actionbarsherlock.internal.widget.ActionBarView: void setNavigationMode(int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void requestLayout()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean expandItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void requestLayout()>
<com.actionbarsherlock.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean collapseItemActionView(com.actionbarsherlock.internal.view.menu.MenuBuilder,com.actionbarsherlock.internal.view.menu.MenuItemImpl)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void requestLayout()>
<com.jcraft.jsch.ChannelSubsystem: void init()> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
<com.jcraft.jsch.ChannelExec: void init()> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
<com.jcraft.jsch.ChannelShell: void init()> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
<com.jcraft.jsch.ChannelDirectTCPIP: void setInputStream(java.io.InputStream)> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
<com.jcraft.jsch.ChannelSftp: void start()> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
<com.jcraft.jsch.IO: void setInputStream(java.io.InputStream,boolean)> --> <com.jcraft.jsch.IO: void setInputStream(java.io.InputStream)>
<com.matburt.mobileorg.Gui.Outline.OutlineActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Outline.OutlineActivity: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<com.matburt.mobileorg.Services.TimeclockDialog: void endTimeclock()> --> <com.matburt.mobileorg.Services.TimeclockService: void cancelNotification()>
<com.matburt.mobileorg.Services.TimeclockService: void onDestroy()> --> <com.matburt.mobileorg.Services.TimeclockService: void cancelNotification()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: void browseTo(int)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: void browseTo(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: void <init>(android.content.Context,com.matburt.mobileorg.Synchronizers.UbuntuOneSynchronizer)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: void browseTo(java.lang.String)>
<com.jcraft.jsch.SftpATTRS: java.lang.String toString()> --> <com.jcraft.jsch.SftpATTRS: int getGId()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneWizard: android.view.View createUbuntuOneList()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.UbuntuOneDirectoryBrowser: java.util.ArrayList listFiles()>
<com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe: com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe ofInt(float)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe$IntKeyframe: void <init>(float)>
<org.apache.james.mime4j.field.structured.parser.ParseException: java.lang.String getMessage()> --> <org.apache.james.mime4j.field.structured.parser.ParseException: java.lang.String add_escapes(java.lang.String)>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard: com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard getWizard(com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE,com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.WebDAVWizard: void <init>(com.matburt.mobileorg.Gui.Wizard.WizardView,android.content.Context)>
<com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet: void cancel()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: boolean isRunning()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setMenu(com.actionbarsherlock.view.Menu,com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)>
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)> --> <com.actionbarsherlock.view.MenuItem: boolean isActionViewExpanded()>
<com.jcraft.jsch.ChannelDirectTCPIP: void <init>()> --> <com.jcraft.jsch.ChannelDirectTCPIP: void setLocalWindowSize(int)>
<oauth.signpost.basic.DefaultOAuthProvider: oauth.signpost.http.HttpResponse sendRequest(oauth.signpost.http.HttpRequest)> --> <oauth.signpost.basic.HttpURLConnectionResponseAdapter: void <init>(java.net.HttpURLConnection)>
<com.actionbarsherlock.widget.ActivityChooserView$Callbacks: void onClick(android.view.View)> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: android.content.pm.ResolveInfo getDefaultActivity()>
<com.actionbarsherlock.widget.ActivityChooserView: void updateAppearance()> --> <com.actionbarsherlock.widget.ActivityChooserView$ActivityChooserViewAdapter: android.content.pm.ResolveInfo getDefaultActivity()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getPaddingBottom()>
<com.actionbarsherlock.internal.widget.ActionBarView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.ActionBarView: int getPaddingBottom()>
<org.apache.james.mime4j.field.structured.parser.StructuredFieldParserTokenManager: org.apache.james.mime4j.field.structured.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.structured.parser.SimpleCharStream: int getBeginLine()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollRight()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int getMeasuredWidth()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void disableAllNextActions(int)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int getMeasuredWidth()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: boolean onTouch(android.view.View,android.view.MotionEvent)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int getMeasuredWidth()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollLeft()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int getMeasuredWidth()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int getMeasuredWidth()>
<com.matburt.mobileorg.Gui.Wizard.WizardView$1: void start()> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int getMeasuredWidth()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void onScrollChanged(int,int,int,int)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int getMeasuredWidth()>
<com.matburt.mobileorg.Gui.ViewActivity: void viewNode(int)> --> <com.matburt.mobileorg.Gui.ViewFragment: void display(com.matburt.mobileorg.OrgData.OrgNode,int,android.content.ContentResolver)>
<com.jcraft.jsch.ChannelSftp: void put(java.lang.String,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<com.jcraft.jsch.ChannelSftp: void put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)>
<com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void execute(java.lang.Runnable)> --> <com.actionbarsherlock.widget.ActivityChooserModel$SerialExecutor: void onPreExecute(java.lang.Runnable)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void access$100(com.matburt.mobileorg.Gui.Outline.OutlineItem,java.lang.String)> --> <com.matburt.mobileorg.Gui.Outline.OutlineItem: void setNewTodo(java.lang.String)>
<org.apache.james.mime4j.parser.MimeEntity: org.apache.james.mime4j.parser.EntityStateMachine nextMessage()> --> <org.apache.james.mime4j.descriptor.MutableBodyDescriptor: java.lang.String getTransferEncoding()>
<com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder ofKeyframe(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe[])> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder: void <init>(java.lang.String,com.actionbarsherlock.internal.nineoldandroids.animation.IntKeyframeSet)>
<com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: void getFileSelection(com.matburt.mobileorg.util.SelectionBuilder,android.content.Context)> --> <com.matburt.mobileorg.Gui.Agenda.OrgQueryBuilder: long getFileId(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.CertificateConflictActivity: void access$000(com.matburt.mobileorg.Gui.CertificateConflictActivity)> --> <com.matburt.mobileorg.Gui.CertificateConflictActivity: void accept()>
<com.actionbarsherlock.internal.view.menu.ActionMenuItemView: boolean hasText()> --> <com.actionbarsherlock.internal.widget.CapitalizingButton: int getVisibility()>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersHorizontal(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: boolean hasDividerBeforeChildAt(int)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void measureChildWithMargins(android.view.View,int,int,int,int)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: boolean hasDividerBeforeChildAt(int)>
<com.actionbarsherlock.internal.widget.IcsLinearLayout: void drawDividersVertical(android.graphics.Canvas)> --> <com.actionbarsherlock.internal.widget.IcsLinearLayout: boolean hasDividerBeforeChildAt(int)>
<com.matburt.mobileorg.Services.CalendarSyncService: void onCreate()> --> <com.matburt.mobileorg.Services.CalendarSyncService: android.content.Context getBaseContext()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean performItemAction(com.actionbarsherlock.view.MenuItem,int)> --> <com.actionbarsherlock.view.ActionProvider: void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu)>
<com.actionbarsherlock.internal.view.ActionProviderWrapper: void onPrepareSubMenu(android.view.SubMenu)> --> <com.actionbarsherlock.view.ActionProvider: void onPrepareSubMenu(com.actionbarsherlock.view.SubMenu)>
<com.jcraft.jsch.ChannelSftp: java.util.Vector glob_remote(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendREADDIR(byte[])>
<com.jcraft.jsch.ChannelSftp: java.util.Vector ls(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void sendREADDIR(byte[])>
<com.matburt.mobileorg.Synchronizers.Synchronizer: java.util.ArrayList runSynchronizer(com.matburt.mobileorg.OrgData.OrgFileParser)> --> <com.matburt.mobileorg.util.OrgUtils: void announceSyncDone(android.content.Context)>
<com.matburt.mobileorg.Synchronizers.Synchronizer: void announceSyncDone()> --> <com.matburt.mobileorg.util.OrgUtils: void announceSyncDone(android.content.Context)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void archiveNode(boolean)> --> <com.matburt.mobileorg.util.OrgUtils: void announceSyncDone(android.content.Context)>
<com.matburt.mobileorg.Settings.SettingsActivity$1$1: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.util.OrgUtils: void announceSyncDone(android.content.Context)>
<com.matburt.mobileorg.Gui.Outline.OutlineItem: void setNewTodo(java.lang.String)> --> <com.matburt.mobileorg.util.OrgUtils: void announceSyncDone(android.content.Context)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode$2: void onClick(android.content.DialogInterface,int)> --> <com.matburt.mobileorg.util.OrgUtils: void announceSyncDone(android.content.Context)>
<com.matburt.mobileorg.Gui.Capture.EditActivity: void saveEdits()> --> <com.matburt.mobileorg.util.OrgUtils: void announceSyncDone(android.content.Context)>
<com.matburt.mobileorg.Gui.Outline.OutlineActionMode: void deleteFileNode()> --> <com.matburt.mobileorg.util.OrgUtils: void announceSyncDone(android.content.Context)>
<com.matburt.mobileorg.Services.CalendarSyncService: void assimilateCalendar()> --> <com.matburt.mobileorg.util.OrgUtils: void announceSyncDone(android.content.Context)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: void parseLine()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParser: int jj_ntk()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$3: java.lang.Object initialValue()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$3: java.util.ArrayList initialValue()>
<com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void <init>(com.actionbarsherlock.internal.view.menu.ActionMenuPresenter,android.content.Context,com.actionbarsherlock.internal.view.menu.SubMenuBuilder)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu: void setCallback(com.actionbarsherlock.internal.view.menu.MenuPresenter$Callback)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView createTabView(com.actionbarsherlock.app.ActionBar$Tab,boolean)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView$TabView: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<com.dropbox.client2.session.AbstractSession$DBClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> --> <com.dropbox.client2.session.AbstractSession$IdleConnectionCloserThread: void ensureRunning(com.dropbox.client2.session.AbstractSession$DBClientConnManager,int,int)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: int getEndColumn()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: int getEndColumn()>
<org.apache.http.impl.DefaultConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.HeaderIterator headerIterator(java.lang.String)>
<com.dropbox.client2.session.AbstractSession$DBConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.HeaderIterator headerIterator(java.lang.String)>
<com.dropbox.client2.session.AbstractSession$DBKeepAliveStrategy: long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> --> <org.apache.http.HttpResponse: org.apache.http.HeaderIterator headerIterator(java.lang.String)>
<com.jcraft.jsch.ChannelAgentForwarding: void <init>()> --> <com.jcraft.jsch.ChannelAgentForwarding: void setLocalWindowSizeMax(int)>
<com.matburt.mobileorg.Gui.Capture.DateTableRow: void <init>(android.content.Context)> --> <com.matburt.mobileorg.Gui.Capture.DateTableRow$5: void <init>(com.matburt.mobileorg.Gui.Capture.DateTableRow)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_3(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void jjCheckNAddStates(int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void jjCheckNAddTwoStates(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void jjCheckNAddStates(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void jjCheckNAdd(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjMoveNfa_0(int,int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: void jjCheckNAdd(int)>
<com.jcraft.jsch.Session: void checkHost(java.lang.String,int,com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.KeyExchange: byte[] getHostKey()>
<com.jcraft.jsch.KeyExchange: java.lang.String getFingerPrint()> --> <com.jcraft.jsch.KeyExchange: byte[] getHostKey()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: com.dropbox.client2.DropboxAPI access$100(com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard)>
<com.matburt.mobileorg.Services.TimeclockService: void getEstimated()> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getProperty(java.lang.String)>
<com.matburt.mobileorg.Services.CalendarSyncService: void tryToInsertNode(com.matburt.mobileorg.util.MultiMap,com.matburt.mobileorg.OrgData.OrgNodeDate,java.lang.String,com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNodePayload: java.lang.String getProperty(java.lang.String)>
<com.matburt.mobileorg.Gui.ErrorReporter: void displayError(android.content.Context,java.lang.Exception)> --> <com.matburt.mobileorg.Gui.ErrorReporter: void displayError(android.content.Context,java.lang.String)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean)> --> <org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)> --> <org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>
<org.apache.http.message.BasicLineFormatter: void doFormatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)> --> <org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>
<org.apache.http.message.BasicLineFormatter: void doFormatStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.StatusLine)> --> <org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)> --> <org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>
<org.apache.http.message.BasicLineFormatter: void doFormatRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.RequestLine)> --> <org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>
<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)> --> <org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>
<org.apache.http.message.BasicLineFormatter: org.apache.http.util.CharArrayBuffer appendProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.ProtocolVersion)> --> <org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStartNfa_0(int,long)> --> <org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager: int jjStopStringLiteralDfa_0(int,long)>
<com.actionbarsherlock.internal.widget.ActionBarContextView: void initForMode(com.actionbarsherlock.view.ActionMode)> --> <com.actionbarsherlock.view.ActionMode: com.actionbarsherlock.view.Menu getMenu()>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: com.actionbarsherlock.view.ActionMode startActionMode(com.actionbarsherlock.view.ActionMode$Callback)> --> <com.actionbarsherlock.view.ActionMode: com.actionbarsherlock.view.Menu getMenu()>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxField mailbox0(java.lang.String,org.apache.james.mime4j.field.address.Mailbox)> --> <org.apache.james.mime4j.field.Fields: java.lang.String encodeAddresses(java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.AddressListField addressList0(java.lang.String,java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: java.lang.String encodeAddresses(java.lang.Iterable)>
<org.apache.james.mime4j.field.Fields: org.apache.james.mime4j.field.MailboxListField mailboxList0(java.lang.String,java.lang.Iterable)> --> <org.apache.james.mime4j.field.Fields: java.lang.String encodeAddresses(java.lang.Iterable)>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: void setQwertyMode(boolean)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setQwertyMode(boolean)>
<com.actionbarsherlock.internal.ActionBarSherlockCompat: boolean preparePanel()> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void setQwertyMode(boolean)>
<com.matburt.mobileorg.Gui.FileDecryptionActivity: boolean isAvailable()> --> <com.matburt.mobileorg.Gui.FileDecryptionActivity: android.content.pm.PackageManager getPackageManager()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE: void <clinit>()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.Wizard$TYPE: void <init>(java.lang.String,int)>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: void putRemoteFile(java.lang.String,java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void exit()>
<com.matburt.mobileorg.Synchronizers.SSHSynchronizer: java.io.BufferedReader getRemoteFile(java.lang.String)> --> <com.jcraft.jsch.ChannelSftp: void exit()>
<com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard: android.view.View createDropboxLogin()> --> <com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard$1: void <init>(com.matburt.mobileorg.Gui.Wizard.Wizards.DropboxWizard)>
<org.apache.http.params.AbstractHttpParams: boolean isParameterFalse(java.lang.String)> --> <org.apache.http.params.AbstractHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
<org.apache.http.params.AbstractHttpParams: boolean isParameterTrue(java.lang.String)> --> <org.apache.http.params.AbstractHttpParams: boolean getBooleanParameter(java.lang.String,boolean)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void layout(int,boolean)> --> <com.actionbarsherlock.internal.widget.IcsSpinner: void recycleAllViews()>
<org.apache.james.mime4j.parser.MimeTokenStream: void doParse(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.io.LineNumberInputStream: void <init>(java.io.InputStream)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: org.apache.james.mime4j.field.datetime.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: char BeginToken()>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: void savePresenterStates(android.os.Bundle)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: void dispatchSaveInstanceState(android.os.Bundle)>
<com.jcraft.jsch.ChannelSftp$RequestQueue: void cancel(com.jcraft.jsch.ChannelSftp$Header,com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp$2: int read(byte[],int,int)> --> <com.jcraft.jsch.ChannelSftp: com.jcraft.jsch.ChannelSftp$Header access$500(com.jcraft.jsch.ChannelSftp,com.jcraft.jsch.Buffer,com.jcraft.jsch.ChannelSftp$Header)>
<com.matburt.mobileorg.Gui.Capture.DatesFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Capture.DatesFragment: void setHasOptionsMenu(boolean)>
<com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void <init>(com.actionbarsherlock.internal.widget.IcsSpinner,android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
<org.apache.james.mime4j.field.address.parser.ASTgroup_body: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)>
<org.apache.james.mime4j.field.address.parser.ASTname_addr: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)>
<org.apache.james.mime4j.field.address.parser.ASTdomain: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)>
<org.apache.james.mime4j.field.address.parser.ASTroute: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)>
<org.apache.james.mime4j.field.address.parser.ASTaddr_spec: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)>
<org.apache.james.mime4j.field.address.parser.ASTaddress: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)>
<org.apache.james.mime4j.field.address.parser.ASTmailbox: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)>
<org.apache.james.mime4j.field.address.parser.ASTphrase: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)>
<org.apache.james.mime4j.field.address.parser.ASTaddress_list: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)>
<org.apache.james.mime4j.field.address.parser.ASTangle_addr: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)>
<org.apache.james.mime4j.field.address.parser.ASTlocal_part: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)> --> <org.apache.james.mime4j.field.address.parser.SimpleNode: void <init>(org.apache.james.mime4j.field.address.parser.AddressListParser,int)>
<com.actionbarsherlock.widget.ActivityChooserView: void access$500(com.actionbarsherlock.widget.ActivityChooserView,int)> --> <com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)>
<com.actionbarsherlock.widget.ActivityChooserView: void onLayout(boolean,int,int,int,int)> --> <com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)>
<com.actionbarsherlock.widget.ActivityChooserView: boolean showPopup()> --> <com.actionbarsherlock.widget.ActivityChooserView: void showPopupUnchecked(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.address.parser.Token)> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char[] GetSuffix(int)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void MoreLexicalActions()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char[] GetSuffix(int)>
<com.dropbox.client2.session.WebAuthSession$WebAuthInfo: void <init>(java.lang.String,com.dropbox.client2.session.RequestTokenPair,com.dropbox.client2.session.WebAuthSession$1)> --> <com.dropbox.client2.session.WebAuthSession$WebAuthInfo: void <init>(java.lang.String,com.dropbox.client2.session.RequestTokenPair)>
<com.jcraft.jsch.jcraft.Compression: void init(int,int)> --> <com.jcraft.jzlib.ZStream: int deflateInit(int)>
<com.matburt.mobileorg.OrgData.CalendarEntry: com.matburt.mobileorg.OrgData.OrgNode convertToOrgNode()> --> <com.matburt.mobileorg.OrgData.OrgNodeDate: java.lang.String getDate(long,long,boolean)>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void removePagesAfter(int)> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: int getChildCount()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: int getNumberOfPages()> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: int getChildCount()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void disableAllNextActions(int)> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: int getChildCount()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void scrollRight()> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: int getChildCount()>
<com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: void onMeasure(int,int)> --> <com.matburt.mobileorg.Gui.Wizard.WideLinearLayout: int getChildCount()>
<com.actionbarsherlock.internal.widget.IcsAbsSpinner: void onMeasure(int,int)> --> <com.actionbarsherlock.internal.widget.IcsAbsSpinner: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<com.actionbarsherlock.internal.widget.AbsActionBarView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.widget.AbsActionBarView: void setAlpha(float)>
<org.apache.james.mime4j.field.AddressListField: void <clinit>()> --> <org.apache.james.mime4j.field.AddressListField$1: void <init>()>
<com.actionbarsherlock.internal.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: boolean shouldShowIcon()>
<com.matburt.mobileorg.Gui.Wizard.WizardView: void enablePage(int)> --> <com.matburt.mobileorg.Gui.Wizard.WizardView: int getNumberOfPages()>
<com.actionbarsherlock.view.MenuInflater$MenuState: void readItem(android.util.AttributeSet)> --> <com.actionbarsherlock.view.MenuInflater: java.lang.Class[] access$200()>
<com.twofortyfouram.locale.MarketActivity: void onCreate(android.os.Bundle)> --> <com.twofortyfouram.locale.MarketActivity: void setTheme(int)>
<com.matburt.mobileorg.Gui.Agenda.AgendaActivity: void refresh()> --> <com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void showBlockAgenda(int)>
<com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void onResume()> --> <com.matburt.mobileorg.Gui.Agenda.AgendaFragment: void showBlockAgenda(int)>
<com.actionbarsherlock.app.SherlockPreferenceActivity: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchConfigurationChanged(android.content.res.Configuration)>
<com.actionbarsherlock.app.SherlockActivity: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchConfigurationChanged(android.content.res.Configuration)>
<com.actionbarsherlock.app.SherlockFragmentActivity: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchConfigurationChanged(android.content.res.Configuration)>
<com.actionbarsherlock.app.SherlockExpandableListActivity: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchConfigurationChanged(android.content.res.Configuration)>
<com.actionbarsherlock.app.SherlockListActivity: void onConfigurationChanged(android.content.res.Configuration)> --> <com.actionbarsherlock.ActionBarSherlock: void dispatchConfigurationChanged(android.content.res.Configuration)>
<com.actionbarsherlock.internal.widget.IcsSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> --> <com.actionbarsherlock.internal.widget.IcsSpinner$DropdownPopup: void <init>(com.actionbarsherlock.internal.widget.IcsSpinner,android.content.Context,android.util.AttributeSet,int)>
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(int)> --> <org.apache.http.util.ByteArrayBuffer: void append(int)>
<org.apache.http.entity.BufferedHttpEntity: void <init>(org.apache.http.HttpEntity)> --> <org.apache.http.util.EntityUtils: byte[] toByteArray(org.apache.http.HttpEntity)>
<com.actionbarsherlock.internal.widget.ScrollingTabContainerView: void animateToVisibility(int)> --> <com.actionbarsherlock.internal.widget.ScrollingTabContainerView: int getVisibility()>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: void TokenLexicalActions(org.apache.james.mime4j.field.mimeversion.parser.Token)>
<com.jcraft.jsch.jce.DH: byte[] getK()> --> <javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void ReInit(org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager)> --> <org.apache.james.mime4j.field.contentdisposition.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void ReInit(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contentdisposition.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void ReInit(java.io.Reader)> --> <org.apache.james.mime4j.field.contentdisposition.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.contentdisposition.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <init>(org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParserTokenManager)> --> <org.apache.james.mime4j.field.contentdisposition.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contentdisposition.parser.Token: void <init>()>
<org.apache.james.mime4j.field.contentdisposition.parser.Token: org.apache.james.mime4j.field.contentdisposition.parser.Token newToken(int)> --> <org.apache.james.mime4j.field.contentdisposition.parser.Token: void <init>()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator$AnimationHandler: void handleMessage(android.os.Message)> --> <com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: boolean access$700(com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator,long)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void <init>(org.apache.james.mime4j.field.datetime.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParser: void <init>(java.io.Reader)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void <init>(org.apache.james.mime4j.field.datetime.parser.SimpleCharStream)>
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void <init>(org.apache.james.mime4j.field.datetime.parser.SimpleCharStream,int)> --> <org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void <init>(org.apache.james.mime4j.field.datetime.parser.SimpleCharStream)>
<com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void access$100(com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig)> --> <com.matburt.mobileorg.Gui.Widget.CaptureWidgetConfig: void cancelConfig()>
<com.google.gdata.util.common.base.UnicodeEscaper: int nextEscapeIndex(java.lang.CharSequence,int,int)> --> <com.google.gdata.util.common.base.UnicodeEscaper: char[] escape(int)>
<com.google.gdata.util.common.base.UnicodeEscaper: java.lang.String escapeSlow(java.lang.String,int)> --> <com.google.gdata.util.common.base.UnicodeEscaper: char[] escape(int)>
<com.google.gdata.util.common.base.UnicodeEscaper$1: java.lang.Appendable append(char)> --> <com.google.gdata.util.common.base.UnicodeEscaper: char[] escape(int)>
<com.google.gdata.util.common.base.UnicodeEscaper$1: java.lang.Appendable append(java.lang.CharSequence,int,int)> --> <com.google.gdata.util.common.base.UnicodeEscaper: char[] escape(int)>
<org.apache.james.mime4j.codec.ByteQueue: void enqueue(byte)> --> <org.apache.james.mime4j.codec.UnboundedFifoByteBuffer: boolean add(byte)>
<com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getOlpId(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: java.lang.String getStrippedNameForOlpPathLink()>
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> --> <org.apache.http.message.BasicLineParser: org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>
<com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator: java.lang.String toString()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.String toString()>
<com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator: java.lang.String toString()> --> <com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder: java.lang.String toString()>
<com.jcraft.jsch.ChannelSftp: boolean access$300(com.jcraft.jsch.ChannelSftp,int[],com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: void _put(java.io.InputStream,java.lang.String,com.jcraft.jsch.SftpProgressMonitor,int)> --> <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelSftp: boolean _sendCLOSE(byte[],com.jcraft.jsch.ChannelSftp$Header)> --> <com.jcraft.jsch.ChannelSftp: boolean checkStatus(int[],com.jcraft.jsch.ChannelSftp$Header)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.ChannelForwardedTCPIP: void sendOpenConfirmation()>
<org.apache.james.mime4j.field.contentdisposition.parser.ContentDispositionParser: void <init>(java.io.InputStream,java.lang.String)> --> <org.apache.james.mime4j.field.contentdisposition.parser.SimpleCharStream: void <init>(java.io.InputStream,java.lang.String,int,int)>
<org.apache.http.impl.DefaultHttpServerConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>
<org.apache.http.impl.DefaultHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)> --> <org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: org.apache.james.mime4j.field.address.parser.Token getNextToken()> --> <org.apache.james.mime4j.field.address.parser.SimpleCharStream: char BeginToken()>
<com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: void onCreate(android.os.Bundle)> --> <com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)>
<com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> --> <com.matburt.mobileorg.Settings.Synchronizers.WebDAVSettingsActivity: void setPreferenceSummary(android.content.SharedPreferences,java.lang.String)>
<com.actionbarsherlock.internal.app.ActionBarImpl: void setListNavigationCallbacks(android.widget.SpinnerAdapter,com.actionbarsherlock.app.ActionBar$OnNavigationListener)> --> <com.actionbarsherlock.internal.widget.ActionBarView: void setCallback(com.actionbarsherlock.app.ActionBar$OnNavigationListener)>
<org.apache.http.message.BasicHeaderIterator: int findNext(int)> --> <org.apache.http.message.BasicHeaderIterator: boolean filterHeader(int)>
<com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performShortcut(int,android.view.KeyEvent,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()>
<com.actionbarsherlock.internal.view.menu.ActionMenu: boolean performIdentifierAction(int,int)> --> <com.actionbarsherlock.internal.view.menu.ActionMenuItem: boolean invoke()>
<com.jcraft.jsch.ChannelSession: void start()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.RequestEnv: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Session: void send_newkeys()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.UserAuthNone: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.UserAuthPassword: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.RequestSignal: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.RequestX11: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.DHG1: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.RequestSubsystem: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Session: void send_kexinit()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Channel: void sendOpenConfirmation()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.UserAuthGSSAPIWithMIC: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Channel: void sendOpenFailure(int)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.ChannelSftp: void putHEAD(com.jcraft.jsch.Buffer,byte,int)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Session: void connect(int)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.ChannelDirectTCPIP: void start()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.RequestShell: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Session: void setPortForwarding(java.lang.String,int)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Session: void updateKeys(com.jcraft.jsch.KeyExchange)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Session: void sendKeepAliveMsg()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.RequestSftp: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.ChannelDirectTCPIP: void connect()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Channel: void connect(int)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.ChannelAgentForwarding: void write(byte[],int,int)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.RequestAgentForwarding: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Channel$1: void flush()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.ChannelAgentForwarding: void send(byte[])> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.RequestPtyReq: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Channel: void close()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.UserAuthPublicKey: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.ChannelX11: void start()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void start()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Channel: void eof()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.DHGEX: boolean next(com.jcraft.jsch.Buffer)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.RequestWindowChange: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.DHG14: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Session: void start()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.ChannelForwardedTCPIP: void delPort(com.jcraft.jsch.Session,java.lang.String,int)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Session: void sendIgnore()> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.Buffer: void putMPInt(byte[])> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.UserAuthKeyboardInteractive: boolean start(com.jcraft.jsch.Session)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.DHGEX: void init(com.jcraft.jsch.Session,byte[],byte[],byte[],byte[])> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.jcraft.jsch.RequestExec: void request(com.jcraft.jsch.Session,com.jcraft.jsch.Channel)> --> <com.jcraft.jsch.Buffer: void putByte(byte)>
<com.matburt.mobileorg.OrgData.OrgProviderUtils: com.matburt.mobileorg.OrgData.OrgNode getOrgNodeFromOlpPath(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getChild(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: void addChild(com.matburt.mobileorg.OrgData.OrgNode,java.lang.String)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getChild(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getSibling(java.lang.String,android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getChild(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgEdit archiveNodeToSibling(android.content.ContentResolver)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getChild(java.lang.String,android.content.ContentResolver)>
<com.matburt.mobileorg.Gui.Capture.LocationFragment: com.matburt.mobileorg.OrgData.OrgNode getSelectedNodeId(int)> --> <com.matburt.mobileorg.OrgData.OrgNode: com.matburt.mobileorg.OrgData.OrgNode getChild(java.lang.String,android.content.ContentResolver)>
<org.apache.james.mime4j.field.ParseException: void <init>(java.lang.String,java.lang.Throwable)> --> <org.apache.james.mime4j.MimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.james.mime4j.descriptor.MaximalBodyDescriptor: void parseContentDisposition(java.lang.String)> --> <org.apache.james.mime4j.MimeException: void <init>(java.lang.String,java.lang.Throwable)>
<org.apache.james.mime4j.parser.MimeEntity: void createMimeStream()> --> <org.apache.james.mime4j.MimeException: void <init>(java.lang.String,java.lang.Throwable)>
<com.actionbarsherlock.internal.view.menu.MenuBuilder: boolean bindNativeOverflow(android.view.Menu,android.view.MenuItem$OnMenuItemClickListener,java.util.HashMap)> --> <com.actionbarsherlock.internal.view.menu.MenuItemImpl: int getOrder()>
<com.matburt.mobileorg.Gui.Agenda.AgendasFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> --> <com.matburt.mobileorg.Gui.Agenda.AgendasFragment: void setHasOptionsMenu(boolean)>
<org.apache.james.mime4j.field.mimeversion.parser.MimeVersionParserTokenManager: org.apache.james.mime4j.field.mimeversion.parser.Token jjFillToken()> --> <org.apache.james.mime4j.field.mimeversion.parser.SimpleCharStream: int getBeginColumn()>
<com.matburt.mobileorg.Gui.Capture.EditActivityControllerEdit: void saveEdits(com.matburt.mobileorg.OrgData.OrgNode)> --> <com.matburt.mobileorg.OrgData.OrgNode: void updateAllNodes(android.content.ContentResolver)>
<org.apache.http.message.BasicHeaderElementIterator: java.lang.Object next()> --> <org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement nextElement()>
<com.matburt.mobileorg.Plugin.SyncEditActivity$1: void onClick(android.view.View)> --> <com.matburt.mobileorg.Plugin.SyncEditActivity: boolean access$002(com.matburt.mobileorg.Plugin.SyncEditActivity,boolean)>
<com.matburt.mobileorg.Plugin.SyncEditActivity$2: void onClick(android.view.View)> --> <com.matburt.mobileorg.Plugin.SyncEditActivity: boolean access$002(com.matburt.mobileorg.Plugin.SyncEditActivity,boolean)>
<org.apache.james.mime4j.codec.QuotedPrintableInputStream: void fillBuffer()> --> <org.apache.commons.logging.Log: void error(java.lang.Object)>
<org.apache.james.mime4j.descriptor.DefaultBodyDescriptor: void addField(org.apache.james.mime4j.parser.Field)> --> <org.apache.commons.logging.Log: void error(java.lang.Object)>
<org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeBaseQuotedPrintable(java.lang.String)> --> <org.apache.commons.logging.Log: void error(java.lang.Object)>
<org.apache.james.mime4j.util.MimeUtil: java.util.Map getHeaderParams(java.lang.String)> --> <org.apache.commons.logging.Log: void error(java.lang.Object)>
<org.apache.james.mime4j.codec.DecoderUtil: byte[] decodeBase64(java.lang.String)> --> <org.apache.commons.logging.Log: void error(java.lang.Object)>
<com.matburt.mobileorg.Services.TimeclockService: void showNotification(long)> --> <com.matburt.mobileorg.Services.TimeclockService: java.lang.String getPackageName()>
<com.actionbarsherlock.internal.view.menu.SubMenuBuilder: com.actionbarsherlock.view.SubMenu setHeaderIcon(int)> --> <com.actionbarsherlock.internal.view.menu.MenuBuilder: com.actionbarsherlock.internal.view.menu.MenuBuilder setHeaderIconInt(int)>
<com.actionbarsherlock.internal.widget.IcsProgressBar: void updateDrawableState()> --> <com.actionbarsherlock.internal.widget.IcsProgressBar: int[] getDrawableState()>
